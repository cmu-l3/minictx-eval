{"name":"ContinuousOn.const_isBigOUniformlyOn_isCompact_rev","declaration":"/-- A family of constant functions `f (i, x) = C i` is uniformly Ω(1) w.r.t. `s`,\nif `s` is compact and `C` is continuous with no zeros on `s`. -/\ntheorem ContinuousOn.const_isBigOUniformlyOn_isCompact_rev {α : Type u_1} {ι : Type u_2} {E : Type u_3} {F : Type u_4} {s : Set ι} [TopologicalSpace ι] {C : ι → E} {c : F} [NormedAddGroup E] [SeminormedAddGroup F] (hf : ContinuousOn C s) (hs : IsCompact s) (hC : ∀ i ∈ s, C i ≠ 0) (l : Filter α) : (fun x => c) =O[Filter.principal s ×ˢ l] fun x =>\n  match x with\n  | (i, _x) => C i"}
{"name":"ContinuousOn.const_isThetaUniformlyOn_isCompact","declaration":"/-- A family of constant functions `f (i, x) = C i` is uniformly Θ(1) w.r.t. `s`,\nif `s` is compact and `C` is continuous with no zeros on `s`. -/\ntheorem ContinuousOn.const_isThetaUniformlyOn_isCompact {α : Type u_1} {ι : Type u_2} {E : Type u_3} {F : Type u_4} {s : Set ι} [TopologicalSpace ι] {C : ι → E} {c : F} [NormedAddGroup E] [SeminormedAddGroup F] (hf : ContinuousOn C s) (hs : IsCompact s) (hc : ‖c‖ ≠ 0) (hC : ∀ i ∈ s, C i ≠ 0) (l : Filter α) : (fun x =>\n    match x with\n    | (i, _x) => C i) =Θ[Filter.principal s ×ˢ l]\n  fun x => c"}
{"name":"ContinuousOn.const_isBigOWithUniformlyOn_isCompact","declaration":"/-- A family of constant functions `f (i, x) = C i` is uniformly bounded w.r.t. `s` by\n`⨆ i ∈ s, ‖C i‖`, if `s` is compact and `C` is continuous. -/\ntheorem ContinuousOn.const_isBigOWithUniformlyOn_isCompact {α : Type u_1} {ι : Type u_2} {E : Type u_3} {F : Type u_4} {s : Set ι} [TopologicalSpace ι] {C : ι → E} {c : F} [SeminormedAddGroup E] [Norm F] (hf : ContinuousOn C s) (hs : IsCompact s) (hc : ‖c‖ ≠ 0) (l : Filter α) : Asymptotics.IsBigOWith (sSup (norm '' (C '' s)) / ‖c‖) (Filter.principal s ×ˢ l)\n  (fun x =>\n    match x with\n    | (i, _x) => C i)\n  fun x => c"}
{"name":"Asymptotics.isLittleO_const_snd_atBot","declaration":"theorem Asymptotics.isLittleO_const_snd_atBot {α : Type u_1} {E : Type u_3} {F : Type u_4} [NormedAddCommGroup α] [LinearOrder α] [ProperSpace α] [NormedAddCommGroup F] [NoMinOrder α] [ClosedIicTopology α] (c : F) (lx : Filter E) : (fun x => c) =o[lx ×ˢ Filter.atBot] Prod.snd"}
{"name":"Asymptotics.isBigO_rev_of_isBigOUniformly_rev","declaration":"/-- If f = Ω(g) uniformly on `s`, then f_i = Ω(g) for any i.` -/\ntheorem Asymptotics.isBigO_rev_of_isBigOUniformly_rev {α : Type u_1} {ι : Type u_2} {E : Type u_3} {F : Type u_4} {s : Set ι} [Norm E] [Norm F] {f : ι × α → E} {g : α → F} {l : Filter α} (h : (g ∘ Prod.snd) =O[Filter.principal s ×ˢ l] f) {i : ι} (hi : i ∈ s) : g =O[l] fun x => f (i, x)"}
{"name":"Asymptotics.IsBigO.eventually_integrableOn","declaration":"/-- Let `f : X x Y → Z`. If as y → l, f(x, y) = O(g(y)) uniformly on `s : Set X` of finite measure,\nthen f is eventually (as y → l) integrable along `s`. -/\ntheorem Asymptotics.IsBigO.eventually_integrableOn {α : Type u_1} {ι : Type u_2} {E : Type u_3} {F : Type u_4} {s : Set ι} [MeasurableSpace ι] [NormedAddCommGroup E] {f : ι × α → E} {g : α → F} {μ : MeasureTheory.Measure ι} {l : Filter α} [Norm F] (hf : f =O[Filter.principal s ×ˢ l] fun x =>\n  match x with\n  | (_i, x) => g x) (hfm : ∀ᶠ (x : α) in l, MeasureTheory.AEStronglyMeasurable (fun i => f (i, x)) (μ.restrict s)) (hs : MeasurableSet s) (hμ : ↑↑μ s < ⊤) : ∀ᶠ (x : α) in l, MeasureTheory.IntegrableOn (fun i => f (i, x)) s μ"}
{"name":"Asymptotics.isLittleO_const_snd_atTop","declaration":"theorem Asymptotics.isLittleO_const_snd_atTop {α : Type u_1} {E : Type u_3} {F : Type u_4} [NormedAddCommGroup α] [LinearOrder α] [ProperSpace α] [NormedAddCommGroup F] [NoMaxOrder α] [ClosedIciTopology α] (c : F) (lx : Filter E) : (fun x => c) =o[lx ×ˢ Filter.atTop] Prod.snd"}
{"name":"Asymptotics.isLittleO_const_fst_atBot","declaration":"theorem Asymptotics.isLittleO_const_fst_atBot {α : Type u_1} {E : Type u_3} {F : Type u_4} [NormedAddCommGroup α] [LinearOrder α] [ProperSpace α] [NormedAddCommGroup F] [NoMinOrder α] [ClosedIicTopology α] (c : F) (ly : Filter E) : (fun x => c) =o[Filter.atBot ×ˢ ly] Prod.fst"}
{"name":"ContinuousOn.const_isBigOWithUniformlyOn_isCompact_rev","declaration":"/-- A family of constant functions `f (i, x) = C i` is uniformly bounded below w.r.t. `s` by\n`⊓ i ∈ s, ‖C i‖`, if `s` is compact and `C` is continuous. -/\ntheorem ContinuousOn.const_isBigOWithUniformlyOn_isCompact_rev {α : Type u_1} {ι : Type u_2} {E : Type u_3} {F : Type u_4} {s : Set ι} [TopologicalSpace ι] {C : ι → E} {c : F} [NormedAddGroup E] [SeminormedAddGroup F] (hf : ContinuousOn C s) (hs : IsCompact s) (hC : ∀ i ∈ s, C i ≠ 0) (l : Filter α) : Asymptotics.IsBigOWith (‖c‖ / sInf (norm '' (C '' s))) (Filter.principal s ×ˢ l) (fun x => c) fun x =>\n  match x with\n  | (i, _x) => C i"}
{"name":"Asymptotics.isBigO_of_isBigOUniformly","declaration":"/-- If f = O(g) uniformly on `s`, then f_i = O(g) for any i.` -/\ntheorem Asymptotics.isBigO_of_isBigOUniformly {α : Type u_1} {ι : Type u_2} {E : Type u_3} {F : Type u_4} {s : Set ι} [Norm E] [Norm F] {f : ι × α → E} {g : α → F} {l : Filter α} (h : f =O[Filter.principal s ×ˢ l] (g ∘ Prod.snd)) {i : ι} (hi : i ∈ s) : (fun x => f (i, x)) =O[l] g"}
{"name":"ContinuousOn.const_isBigOUniformlyOn_isCompact","declaration":"/-- A family of constant functions `f (i, x) = C i` is uniformly O(1) w.r.t. `s`,\nif `s` is compact and `C` is continuous. -/\ntheorem ContinuousOn.const_isBigOUniformlyOn_isCompact {α : Type u_1} {ι : Type u_2} {E : Type u_3} {F : Type u_4} {s : Set ι} [TopologicalSpace ι] {C : ι → E} {c : F} [SeminormedAddGroup E] [Norm F] (hf : ContinuousOn C s) (hs : IsCompact s) (hc : ‖c‖ ≠ 0) (l : Filter α) : (fun x =>\n    match x with\n    | (i, _x) => C i) =O[Filter.principal s ×ˢ l]\n  fun x => c"}
{"name":"Asymptotics.isTheta_of_isThetaUniformly","declaration":"/-- If f = Θ(g) uniformly on `s`, then f_i = Θ(g) for any i.` -/\ntheorem Asymptotics.isTheta_of_isThetaUniformly {α : Type u_1} {ι : Type u_2} {E : Type u_3} {F : Type u_4} {s : Set ι} [Norm E] [Norm F] {f : ι × α → E} {g : α → F} {l : Filter α} (h : f =Θ[Filter.principal s ×ˢ l] (g ∘ Prod.snd)) {i : ι} (hi : i ∈ s) : (fun x => f (i, x)) =Θ[l] g"}
{"name":"Asymptotics.IsBigO.set_integral_isBigO","declaration":"/-- Let `f : X x Y → Z`. If as y → l, f(x, y) = O(g(y)) uniformly on `s : Set X` of finite measure,\nthen the integral of f along s is O(g(y)). -/\ntheorem Asymptotics.IsBigO.set_integral_isBigO {α : Type u_1} {ι : Type u_2} {E : Type u_3} {F : Type u_4} {s : Set ι} [MeasurableSpace ι] [NormedAddCommGroup E] {f : ι × α → E} {g : α → F} {μ : MeasureTheory.Measure ι} {l : Filter α} [NormedSpace ℝ E] [NormedAddCommGroup F] (hf : f =O[Filter.principal s ×ˢ l] fun x =>\n  match x with\n  | (_i, x) => g x) (hs : MeasurableSet s) (hμ : ↑↑μ s < ⊤) : (fun x => ∫ (i : ι) in s, f (i, x) ∂μ) =O[l] g"}
{"name":"Asymptotics.isLittleO_const_fst_atTop","declaration":"theorem Asymptotics.isLittleO_const_fst_atTop {α : Type u_1} {E : Type u_3} {F : Type u_4} [NormedAddCommGroup α] [LinearOrder α] [ProperSpace α] [NormedAddCommGroup F] [NoMaxOrder α] [ClosedIciTopology α] (c : F) (ly : Filter E) : (fun x => c) =o[Filter.atTop ×ˢ ly] Prod.fst"}
