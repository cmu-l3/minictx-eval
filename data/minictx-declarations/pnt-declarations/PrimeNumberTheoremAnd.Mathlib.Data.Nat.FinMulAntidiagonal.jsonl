{"name":"Nat.card_finMulAntidiagonal_pi","declaration":"theorem Nat.card_finMulAntidiagonal_pi (d : ℕ) (n : ℕ) (hn : Squarefree n) : (Finset.pi (List.toFinset (Nat.factors n)) fun x => Finset.univ).card = (Nat.finMulAntidiagonal d n).card"}
{"name":"Nat.ne_zero_of_mem_finMulAntidiagonal","declaration":"theorem Nat.ne_zero_of_mem_finMulAntidiagonal {d : ℕ} {n : ℕ} {f : Fin d → ℕ} (hf : f ∈ Nat.finMulAntidiagonal d n) (i : Fin d) : f i ≠ 0"}
{"name":"Nat.dvd_of_mem_finMulAntidiagonal","declaration":"theorem Nat.dvd_of_mem_finMulAntidiagonal {n : ℕ} {d : ℕ} {f : Fin d → ℕ} (hf : f ∈ Nat.finMulAntidiagonal d n) (i : Fin d) : f i ∣ n"}
{"name":"Nat.card_lcm_eq","declaration":"theorem Nat.card_lcm_eq {n : ℕ} (hn : Squarefree n) : (Finset.filter\n      (fun x =>\n        match x with\n        | (x, y) => Nat.lcm x y = n)\n      (Nat.divisors n ×ˢ Nat.divisors n)).card =\n  3 ^ ArithmeticFunction.cardDistinctFactors n"}
{"name":"Nat.filter_primeFactors","declaration":"theorem Nat.filter_primeFactors {m : ℕ} {n : ℕ} (hmn : m ∣ n) (hn : n ≠ 0) : Finset.filter (fun p => p ∣ m) n.primeFactors = m.primeFactors"}
{"name":"Nat.finMulAntidiagonal_zero","declaration":"theorem Nat.finMulAntidiagonal_zero {d : ℕ} : Nat.finMulAntidiagonal d 0 = ∅"}
{"name":"Nat.finMulAntidiagonal.aux","declaration":"/-- Auxiliary construction for `finMulAntidiagonal` that bundles a proof of lawfulness\n(`mem_finMulAntidiagonal`), as this is needed to invoke `disjiUnion`. Using `Finset.disjiUnion` makes\nthis computationally much more efficient than using `Finset.biUnion`. -/\ndef Nat.finMulAntidiagonal.aux (d : ℕ) (n : ℕ) : { s // ∀ (f : Fin d → ℕ), f ∈ s ↔ (Finset.prod Finset.univ fun i => f i) = n ∧ n ≠ 0 }"}
{"name":"Nat.finMulAntidiagonal_univ_eq","declaration":"theorem Nat.finMulAntidiagonal_univ_eq {d : ℕ} {m : ℕ} {n : ℕ} (hmn : m ∣ n) (hn : n ≠ 0) : Nat.finMulAntidiagonal d m =\n  Finset.filter (fun f => (Finset.prod Finset.univ fun i => f i) = m) (Fintype.piFinset fun x => Nat.divisors n)"}
{"name":"Nat.image_apply_finMulAntidiagonal","declaration":"theorem Nat.image_apply_finMulAntidiagonal {d : ℕ} {n : ℕ} {i : Fin d} (hd : d ≠ 1) : Finset.image (fun f => f i) (Nat.finMulAntidiagonal d n) = Nat.divisors n"}
{"name":"Nat.card_finMulAntidiagonal","declaration":"theorem Nat.card_finMulAntidiagonal {d : ℕ} {n : ℕ} (hn : Squarefree n) : (Nat.finMulAntidiagonal d n).card = d ^ ArithmeticFunction.cardDistinctFactors n"}
{"name":"Nat.finMulAntidiagonal","declaration":"def Nat.finMulAntidiagonal (d : ℕ) (n : ℕ) : Finset (Fin d → ℕ)"}
{"name":"Nat.mem_finMulAntidiagonal","declaration":"theorem Nat.mem_finMulAntidiagonal {d : ℕ} {n : ℕ} {f : Fin d → ℕ} : f ∈ Nat.finMulAntidiagonal d n ↔ (Finset.prod Finset.univ fun i => f i) = n ∧ n ≠ 0"}
{"name":"Nat.finMulAntidiagonal_one","declaration":"theorem Nat.finMulAntidiagonal_one {d : ℕ} : Nat.finMulAntidiagonal d 1 = {fun x => 1}"}
{"name":"Nat.prod_eq_of_mem_finMulAntidiagonal","declaration":"theorem Nat.prod_eq_of_mem_finMulAntidiagonal {d : ℕ} {n : ℕ} {f : Fin d → ℕ} (hf : f ∈ Nat.finMulAntidiagonal d n) : (Finset.prod Finset.univ fun i => f i) = n"}
{"name":"Nat.image_piFinTwoEquiv","declaration":"theorem Nat.image_piFinTwoEquiv {n : ℕ} : Finset.image (⇑(piFinTwoEquiv fun x => ℕ)) (Nat.finMulAntidiagonal 2 n) = Nat.divisorsAntidiagonal n"}
{"name":"Nat.finMulAntidiagonal_exists_unique_prime_dvd","declaration":"theorem Nat.finMulAntidiagonal_exists_unique_prime_dvd {d : ℕ} {n : ℕ} {p : ℕ} (hn : Squarefree n) (hp : p ∈ Nat.factors n) (f : Fin d → ℕ) (hf : f ∈ Nat.finMulAntidiagonal d n) : ∃! i, p ∣ f i"}
{"name":"Nat.finMulAntidiagonal_empty_of_ne_one","declaration":"theorem Nat.finMulAntidiagonal_empty_of_ne_one {n : ℕ} (hn : n ≠ 1) : Nat.finMulAntidiagonal 0 n = ∅"}
