{"name":"BrunTitchmarsh.card_range_filter_prime_isBigO","declaration":"theorem BrunTitchmarsh.card_range_filter_prime_isBigO  : (fun N => ↑(Finset.filter Nat.Prime (Finset.range N)).card) =O[Filter.atTop] fun N => ↑N / Real.log ↑N"}
{"name":"BrunTitchmarsh.primesBetween_le_siftedSum_add","declaration":"theorem BrunTitchmarsh.primesBetween_le_siftedSum_add (x : ℝ) (y : ℝ) (z : ℝ) (hx : 0 < x) (hz : 1 ≤ z) : ↑(BrunTitchmarsh.primesBetween x (x + y)) ≤ Sieve.siftedSum (BrunTitchmarsh.primeInterSieve x y z hz).toSieve + z"}
{"name":"BrunTitchmarsh.primesBetween_le","declaration":"theorem BrunTitchmarsh.primesBetween_le (x : ℝ) (y : ℝ) (z : ℝ) (hx : 0 < x) (hy : 0 < y) (hz : 1 < z) : ↑(BrunTitchmarsh.primesBetween x (x + y)) ≤ 2 * y / Real.log z + 6 * z * (1 + Real.log z) ^ 3"}
{"name":"BrunTitchmarsh.Nat.ceil_le_self_add_one","declaration":"theorem BrunTitchmarsh.Nat.ceil_le_self_add_one (x : ℝ) (hx : 0 ≤ x) : ↑⌈x⌉₊ ≤ x + 1"}
{"name":"BrunTitchmarsh.err_isBigO","declaration":"theorem BrunTitchmarsh.err_isBigO  : (fun x => x ^ (1 / 2) * (1 + 1 / 2 * Real.log x) ^ 3) =O[Filter.atTop] fun x => x / Real.log x"}
{"name":"BrunTitchmarsh.card_isPrimePow_isBigO","declaration":"theorem BrunTitchmarsh.card_isPrimePow_isBigO  : (fun N => ↑(Finset.filter IsPrimePow (Finset.range N)).card) =O[Filter.atTop] fun N => ↑N / Real.log ↑N"}
{"name":"BrunTitchmarsh.pow_half_mul_one_add_log_div_isBigO","declaration":"theorem BrunTitchmarsh.pow_half_mul_one_add_log_div_isBigO  : (fun N => N ^ (1 / 2) * (1 + Real.log N / Real.log 2)) =O[Filter.atTop] fun N => N / Real.log N"}
{"name":"BrunTitchmarsh.ceil_approx","declaration":"theorem BrunTitchmarsh.ceil_approx (x : ℝ) (hx : 0 ≤ x) : ∃ C, |C| ≤ 1 ∧ ↑⌈x⌉₊ = x + C"}
{"name":"BrunTitchmarsh.Ioc_filter_dvd_eq","declaration":"theorem BrunTitchmarsh.Ioc_filter_dvd_eq (d : ℕ) (a : ℕ) (b : ℕ) (hd : d ≠ 0) : Finset.filter (fun x => d ∣ x) (Finset.Ioc a b) = Finset.image (fun x => x * d) (Finset.Ioc (a / d) (b / d))"}
{"name":"BrunTitchmarsh.primeInterSieve","declaration":"def BrunTitchmarsh.primeInterSieve (x : ℝ) (y : ℝ) (z : ℝ) (hz : 1 ≤ z) : SelbergSieve"}
{"name":"BrunTitchmarsh.nat_div_approx","declaration":"theorem BrunTitchmarsh.nat_div_approx (a : ℕ) (b : ℕ) : ∃ C, |C| ≤ 1 ∧ ↑(a / b) = ↑a / ↑b + C"}
{"name":"BrunTitchmarsh.card_range_filter_isPrimePow_le","declaration":"theorem BrunTitchmarsh.card_range_filter_isPrimePow_le  : ∃ C, ∀ (N : ℕ), ↑(Finset.filter IsPrimePow (Finset.range N)).card ≤ C * (↑N / Real.log ↑N)"}
{"name":"BrunTitchmarsh.prime_or_pow","declaration":"theorem BrunTitchmarsh.prime_or_pow (N : ℕ) (n : ℕ) (hnN : n < N) (hnprime : IsPrimePow n) : Nat.Prime n ∨ ∃ m, ↑m < Real.sqrt ↑N ∧ ∃ k ≤ Nat.log 2 N, n = m ^ k"}
{"name":"BrunTitchmarsh.tmp","declaration":"theorem BrunTitchmarsh.tmp (N : ℕ) : ↑(Finset.filter Nat.Prime (Finset.range N)).card ≤\n  4 * (↑N / Real.log ↑N) + 6 * (↑N ^ (1 / 2) * (1 + 1 / 2 * Real.log ↑N) ^ 3)"}
{"name":"BrunTitchmarsh.boudingSum_ge","declaration":"theorem BrunTitchmarsh.boudingSum_ge (x : ℝ) (y : ℝ) (z : ℝ) (hz : 1 ≤ z) : SelbergSieve.selbergBoundingSum (BrunTitchmarsh.primeInterSieve x y z hz) ≥ Real.log z / 2"}
{"name":"BrunTitchmarsh.pows_small_primes_le","declaration":"theorem BrunTitchmarsh.pows_small_primes_le (N : ℕ) : ↑(Finset.image (fun p => p.1 ^ p.2) (Finset.Ico 1 ⌈Real.sqrt ↑N⌉₊ ×ˢ Finset.range (Nat.log 2 N + 1))).card ≤\n  ↑N ^ (1 / 2) * (1 + Real.log ↑N / Real.log 2)"}
{"name":"BrunTitchmarsh.one_add_log_div_log_two_isBigO","declaration":"theorem BrunTitchmarsh.one_add_log_div_log_two_isBigO  : (fun N => 1 + Real.log N / Real.log 2) =O[Filter.atTop] fun N => Real.log N"}
{"name":"BrunTitchmarsh.primeSieve_rem_sum_le","declaration":"theorem BrunTitchmarsh.primeSieve_rem_sum_le (x : ℝ) (y : ℝ) (z : ℝ) (hx : 0 < x) (hy : 0 < y) (hz : 1 ≤ z) : (Finset.sum (Nat.divisors (BrunTitchmarsh.primeInterSieve x y z hz).prodPrimes) fun d =>\n    if ↑d ≤ z then\n      3 ^ ArithmeticFunction.cardDistinctFactors d * |Sieve.rem (BrunTitchmarsh.primeInterSieve x y z hz).toSieve d|\n    else 0) ≤\n  5 * z * (1 + Real.log z) ^ 3"}
{"name":"BrunTitchmarsh.rpow_mul_rpow_log_isBigO_id_div_log","declaration":"theorem BrunTitchmarsh.rpow_mul_rpow_log_isBigO_id_div_log (k : ℝ) {r : ℝ} (hr : r < 1) : (fun x => x ^ r * Real.log x ^ k) =O[Filter.atTop] fun x => x / Real.log x"}
{"name":"BrunTitchmarsh.range_filter_isPrimePow_subset_union","declaration":"theorem BrunTitchmarsh.range_filter_isPrimePow_subset_union (N : ℕ) : Finset.filter IsPrimePow (Finset.range N) ⊆\n  Finset.filter Nat.Prime (Finset.range N) ∪\n    Finset.image (fun p => p.1 ^ p.2) (Finset.Ico 1 ⌈Real.sqrt ↑N⌉₊ ×ˢ Finset.range (Nat.log 2 N + 1))"}
{"name":"BrunTitchmarsh.siftedSum_le","declaration":"theorem BrunTitchmarsh.siftedSum_le (x : ℝ) (y : ℝ) (z : ℝ) (hx : 0 < x) (hy : 0 < y) (hz : 1 < z) : Sieve.siftedSum (BrunTitchmarsh.primeInterSieve x y z ⋯).toSieve ≤ 2 * y / Real.log z + 5 * z * (1 + Real.log z) ^ 3"}
{"name":"BrunTitchmarsh.rem_eq","declaration":"theorem BrunTitchmarsh.rem_eq (x : ℝ) (y : ℝ) (z : ℝ) (hx : 0 < x) (hz : 1 ≤ z) (d : ℕ) (hd : d ≠ 0) : Sieve.rem (BrunTitchmarsh.primeInterSieve x y z hz).toSieve d = ↑(⌊x + y⌋₊ / d - (⌈x⌉₊ - 1) / d) - (↑d)⁻¹ * y"}
{"name":"BrunTitchmarsh.IsBigO.nat_Top_of_atTop","declaration":"theorem BrunTitchmarsh.IsBigO.nat_Top_of_atTop (f : ℕ → ℝ) (g : ℕ → ℝ) (h : f =O[Filter.atTop] g) (h0 : ∀ (n : ℕ), g n = 0 → f n = 0) : f =O[⊤] g"}
{"name":"BrunTitchmarsh.primesBetween","declaration":"def BrunTitchmarsh.primesBetween (a : ℝ) (b : ℝ) : ℕ"}
{"name":"BrunTitchmarsh.multSum_eq","declaration":"theorem BrunTitchmarsh.multSum_eq (x : ℝ) (y : ℝ) (z : ℝ) (hx : 0 < x) (hz : 1 ≤ z) (d : ℕ) (hd : d ≠ 0) : Sieve.multSum (BrunTitchmarsh.primeInterSieve x y z hz).toSieve d = ↑(⌊x + y⌋₊ / d - (⌈x⌉₊ - 1) / d)"}
{"name":"BrunTitchmarsh.floor_approx","declaration":"theorem BrunTitchmarsh.floor_approx (x : ℝ) (hx : 0 ≤ x) : ∃ C, |C| ≤ 1 ∧ ↑⌊x⌋₊ = x + C"}
{"name":"BrunTitchmarsh.primesBetween_subset","declaration":"theorem BrunTitchmarsh.primesBetween_subset (x : ℝ) (y : ℝ) (z : ℝ) (hx : 0 < x) : Finset.filter Nat.Prime (Finset.Icc ⌈x⌉₊ ⌊x + y⌋₊) ⊆\n  Finset.filter (fun d => ∀ (p : ℕ), Nat.Prime p → ↑p ≤ z → ¬p ∣ d) (Finset.Icc ⌈x⌉₊ ⌊x + y⌋₊) ∪ Finset.Icc 1 ⌊z⌋₊"}
{"name":"BrunTitchmarsh.abs_rem_le","declaration":"theorem BrunTitchmarsh.abs_rem_le (x : ℝ) (y : ℝ) (z : ℝ) (hx : 0 < x) (hy : 0 < y) (hz : 1 ≤ z) {d : ℕ} (hd : d ≠ 0) : |Sieve.rem (BrunTitchmarsh.primeInterSieve x y z hz).toSieve d| ≤ 5"}
{"name":"BrunTitchmarsh.floor_div_approx","declaration":"theorem BrunTitchmarsh.floor_div_approx (x : ℝ) (hx : 0 ≤ x) (d : ℕ) : ∃ C, |C| ≤ 2 ∧ ↑(⌊x⌋₊ / d) = x / ↑d + C"}
{"name":"BrunTitchmarsh.primesBetween_mono_right","declaration":"theorem BrunTitchmarsh.primesBetween_mono_right (a : ℝ) (b : ℝ) (c : ℝ) (hbc : b ≤ c) : BrunTitchmarsh.primesBetween a b ≤ BrunTitchmarsh.primesBetween a c"}
{"name":"BrunTitchmarsh.siftedSum_eq_card","declaration":"theorem BrunTitchmarsh.siftedSum_eq_card (x : ℝ) (y : ℝ) (z : ℝ) (hz : 1 ≤ z) : Sieve.siftedSum (BrunTitchmarsh.primeInterSieve x y z hz).toSieve =\n  ↑(Finset.filter (fun d => ∀ (p : ℕ), Nat.Prime p → ↑p ≤ z → ¬p ∣ d) (Finset.Icc ⌈x⌉₊ ⌊x + y⌋₊)).card"}
{"name":"BrunTitchmarsh.primesBetween_one","declaration":"theorem BrunTitchmarsh.primesBetween_one (n : ℕ) : BrunTitchmarsh.primesBetween 1 ↑n = (Finset.filter Nat.Prime (Finset.range (n + 1))).card"}
{"name":"BrunTitchmarsh.card_Ioc_filter_dvd","declaration":"theorem BrunTitchmarsh.card_Ioc_filter_dvd (d : ℕ) (a : ℕ) (b : ℕ) (hd : d ≠ 0) : (Finset.filter (fun x => d ∣ x) (Finset.Ioc a b)).card = b / d - a / d"}
{"name":"BrunTitchmarsh.Nat.log_eq_floor_logb","declaration":"theorem BrunTitchmarsh.Nat.log_eq_floor_logb (b : ℕ) (n : ℕ) (hb : 1 < b) : Nat.log b n = ⌊Real.logb ↑b ↑n⌋₊"}
{"name":"BrunTitchmarsh.card_pows_aux","declaration":"theorem BrunTitchmarsh.card_pows_aux  : (fun N =>\n    ↑(Finset.image (fun p => p.1 ^ p.2)\n          (Finset.Ico 1 ⌈Real.sqrt ↑N⌉₊ ×ˢ Finset.range (Nat.log 2 N + 1))).card) =O[Filter.atTop]\n  fun N => ↑N / Real.log ↑N"}
