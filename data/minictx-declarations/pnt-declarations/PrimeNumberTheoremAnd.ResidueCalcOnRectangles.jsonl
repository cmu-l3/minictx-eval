{"name":"ContinuousOn.rectangleBorderNoPIntegrable","declaration":"theorem ContinuousOn.rectangleBorderNoPIntegrable {E : Type u_1} [NormedAddCommGroup E] {f : ℂ → E} {z : ℂ} {w : ℂ} {p : ℂ} (hf : ContinuousOn f (Rectangle z w \\ {p})) (pNotOnBorder : p ∉ RectangleBorder z w) : RectangleBorderIntegrable f z w"}
{"name":"RectanglePullToNhdOfPole''","declaration":"theorem RectanglePullToNhdOfPole'' {E : Type u_1} [NormedAddCommGroup E] [NormedSpace ℂ E] {f : ℂ → E} [CompleteSpace E] {z : ℂ} {w : ℂ} {p : ℂ} (zRe_le_wRe : z.re ≤ w.re) (zIm_le_wIm : z.im ≤ w.im) (pInRectInterior : Rectangle z w ∈ nhds p) (fHolo : HolomorphicOn f (Rectangle z w \\ {p})) : ∀ᶠ (c : ℝ) in nhdsWithin 0 (Set.Ioi 0),\n  RectangleIntegral' f z w = RectangleIntegral' f (-↑c - Complex.I * ↑c + p) (↑c + Complex.I * ↑c + p)"}
{"name":"ResidueTheoremAtOrigin'","declaration":"theorem ResidueTheoremAtOrigin' {z : ℂ} {w : ℂ} {c : ℂ} (h1 : z.re < 0) (h2 : z.im < 0) (h3 : 0 < w.re) (h4 : 0 < w.im) : RectangleIntegral (fun s => c / s) z w = 2 * Complex.I * ↑Real.pi * c"}
{"name":"LowerUIntegral","declaration":"def LowerUIntegral {E : Type u_1} [NormedAddCommGroup E] [NormedSpace ℂ E] (f : ℂ → E) (σ : ℝ) (σ' : ℝ) (T : ℝ) : E"}
{"name":"HolomorphicOn.rectangleBorderIntegrable","declaration":"theorem HolomorphicOn.rectangleBorderIntegrable {E : Type u_1} [NormedAddCommGroup E] [NormedSpace ℂ E] {f : ℂ → E} {z : ℂ} {w : ℂ} (hf : HolomorphicOn f (Rectangle z w)) : RectangleBorderIntegrable f z w"}
{"name":"RectangleIntegralHSplit'","declaration":"theorem RectangleIntegralHSplit' {E : Type u_1} [NormedAddCommGroup E] [NormedSpace ℂ E] {f : ℂ → E} {a : ℝ} {x₀ : ℝ} {x₁ : ℝ} {y₀ : ℝ} {y₁ : ℝ} (ha : a ∈ Set.uIcc x₀ x₁) (hf : RectangleBorderIntegrable f (↑x₀ + ↑y₀ * Complex.I) (↑x₁ + ↑y₁ * Complex.I)) : RectangleIntegral f (↑x₀ + ↑y₀ * Complex.I) (↑x₁ + ↑y₁ * Complex.I) =\n  RectangleIntegral f (↑x₀ + ↑y₀ * Complex.I) (↑a + ↑y₁ * Complex.I) +\n    RectangleIntegral f (↑a + ↑y₀ * Complex.I) (↑x₁ + ↑y₁ * Complex.I)"}
{"name":"RectangleIntegral_congr","declaration":"theorem RectangleIntegral_congr {E : Type u_1} [NormedAddCommGroup E] [NormedSpace ℂ E] {f : ℂ → E} {g : ℂ → E} {z : ℂ} {w : ℂ} (h : Set.EqOn f g (RectangleBorder z w)) : RectangleIntegral f z w = RectangleIntegral g z w"}
{"name":"integral_const_div_sq_add_sq","declaration":"theorem integral_const_div_sq_add_sq {x₁ : ℝ} {x₂ : ℝ} {y : ℝ} (hy : y ≠ 0) : ∫ (x : ℝ) in x₁..x₂, y / (x ^ 2 + y ^ 2) = Real.arctan (x₂ / y) - Real.arctan (x₁ / y)"}
{"name":"RectangleBorderIntegrable","declaration":"def RectangleBorderIntegrable {E : Type u_1} [NormedAddCommGroup E] (f : ℂ → E) (z : ℂ) (w : ℂ) : Prop"}
{"name":"HIntegral_symm","declaration":"theorem HIntegral_symm {E : Type u_1} [NormedAddCommGroup E] [NormedSpace ℂ E] {f : ℂ → E} {x₁ : ℝ} {x₂ : ℝ} {y : ℝ} : HIntegral f x₁ x₂ y = -HIntegral f x₂ x₁ y"}
{"name":"RectangleIntegral'","declaration":"/-- A `RectangleIntegral'` of a function `f` is one over a rectangle determined by\n`z` and `w` in `ℂ`, divided by `2 * π * I`. -/\ndef RectangleIntegral' {E : Type u_1} [NormedAddCommGroup E] [NormedSpace ℂ E] (f : ℂ → E) (z : ℂ) (w : ℂ) : E"}
{"name":"RectangleBorderIntegrable.add","declaration":"theorem RectangleBorderIntegrable.add {E : Type u_1} [NormedAddCommGroup E] [NormedSpace ℂ E] {z : ℂ} {w : ℂ} {f : ℂ → E} {g : ℂ → E} (hf : RectangleBorderIntegrable f z w) (hg : RectangleBorderIntegrable g z w) : RectangleIntegral (f + g) z w = RectangleIntegral f z w + RectangleIntegral g z w"}
{"name":"RectangleIntegral.const_smul","declaration":"theorem RectangleIntegral.const_smul {E : Type u_1} [NormedAddCommGroup E] [NormedSpace ℂ E] (f : ℂ → E) (z : ℂ) (w : ℂ) (c : ℂ) : RectangleIntegral (fun s => c • f s) z w = c • RectangleIntegral f z w"}
{"name":"ResidueTheoremAtOrigin_aux1c'","declaration":"theorem ResidueTheoremAtOrigin_aux1c' (a : ℝ) (b : ℝ) : let f := fun y => (↑y - Complex.I)⁻¹;\nIntervalIntegrable f MeasureTheory.volume a b"}
{"name":"ResidueTheoremAtOrigin_aux2c'","declaration":"theorem ResidueTheoremAtOrigin_aux2c' (a : ℝ) (b : ℝ) : let f := fun y => (-1 + ↑y * Complex.I)⁻¹;\nIntervalIntegrable f MeasureTheory.volume a b"}
{"name":"RectangleIntegral'_congr","declaration":"theorem RectangleIntegral'_congr {E : Type u_1} [NormedAddCommGroup E] [NormedSpace ℂ E] {f : ℂ → E} {g : ℂ → E} {z : ℂ} {w : ℂ} (h : Set.EqOn f g (RectangleBorder z w)) : RectangleIntegral' f z w = RectangleIntegral' g z w"}
{"name":"ContinuousOn.rectangleBorder_integrable","declaration":"theorem ContinuousOn.rectangleBorder_integrable {E : Type u_1} [NormedAddCommGroup E] {f : ℂ → E} {z : ℂ} {w : ℂ} (hf : ContinuousOn f (RectangleBorder z w)) : RectangleBorderIntegrable f z w"}
{"name":"integral_const_div_self_add_im","declaration":"theorem integral_const_div_self_add_im {A : ℂ} {x₁ : ℝ} {x₂ : ℝ} {y : ℝ} (hy : y ≠ 0) : ∫ (x : ℝ) in x₁..x₂, A / (↑x + ↑y * Complex.I) =\n  A * (↑(Real.log (x₂ ^ 2 + y ^ 2)) / 2 - ↑(Real.log (x₁ ^ 2 + y ^ 2)) / 2) -\n    A * Complex.I * (↑(Real.arctan (x₂ / y)) - ↑(Real.arctan (x₁ / y)))"}
{"name":"VerticalIntegral'","declaration":"def VerticalIntegral' {E : Type u_1} [NormedAddCommGroup E] [NormedSpace ℂ E] (f : ℂ → E) (σ : ℝ) : E"}
{"name":"Complex.inv_re_add_im","declaration":"theorem Complex.inv_re_add_im {x : ℝ} {y : ℝ} : (↑x + ↑y * Complex.I)⁻¹ = (↑x - Complex.I * ↑y) / (↑x ^ 2 + ↑y ^ 2)"}
{"name":"RectanglePullToNhdOfPole","declaration":"/-- Given `f` holomorphic on a rectangle `z` and `w` except at a point `p`, the integral of `f` over\nthe rectangle with corners `z` and `w` is the same as the integral of `f` over a small square\ncentered at `p`. -/\ntheorem RectanglePullToNhdOfPole {E : Type u_1} [NormedAddCommGroup E] [NormedSpace ℂ E] {f : ℂ → E} [CompleteSpace E] {z : ℂ} {w : ℂ} {p : ℂ} (zRe_lt_wRe : z.re ≤ w.re) (zIm_lt_wIm : z.im ≤ w.im) (hp : Rectangle z w ∈ nhds p) (fHolo : HolomorphicOn f (Rectangle z w \\ {p})) : ∀ᶠ (c : ℝ) in nhdsWithin 0 (Set.Ioi 0),\n  RectangleIntegral f z w = RectangleIntegral f (-↑c - Complex.I * ↑c + p) (↑c + Complex.I * ↑c + p)"}
{"name":"RectangleIntegralVSplit","declaration":"theorem RectangleIntegralVSplit {E : Type u_1} [NormedAddCommGroup E] [NormedSpace ℂ E] {f : ℂ → E} {b : ℝ} {x₀ : ℝ} {x₁ : ℝ} {y₀ : ℝ} {y₁ : ℝ} (f_int_y₀_b_left : IntervalIntegrable (fun y => f (↑x₀ + ↑y * Complex.I)) MeasureTheory.volume y₀ b) (f_int_b_y₁_left : IntervalIntegrable (fun y => f (↑x₀ + ↑y * Complex.I)) MeasureTheory.volume b y₁) (f_int_y₀_b_right : IntervalIntegrable (fun y => f (↑x₁ + ↑y * Complex.I)) MeasureTheory.volume y₀ b) (f_int_b_y₁_right : IntervalIntegrable (fun y => f (↑x₁ + ↑y * Complex.I)) MeasureTheory.volume b y₁) : RectangleIntegral f (↑x₀ + ↑y₀ * Complex.I) (↑x₁ + ↑y₁ * Complex.I) =\n  RectangleIntegral f (↑x₀ + ↑y₀ * Complex.I) (↑x₁ + ↑b * Complex.I) +\n    RectangleIntegral f (↑x₀ + ↑b * Complex.I) (↑x₁ + ↑y₁ * Complex.I)"}
{"name":"VIntegral","declaration":"def VIntegral {E : Type u_1} [NormedAddCommGroup E] [NormedSpace ℂ E] (f : ℂ → E) (x : ℝ) (y₁ : ℝ) (y₂ : ℝ) : E"}
{"name":"continuous_self_div_sq_add_sq","declaration":"theorem continuous_self_div_sq_add_sq {y : ℝ} (hy : y ≠ 0) : Continuous fun x => x / (x ^ 2 + y ^ 2)"}
{"name":"UpperUIntegral","declaration":"def UpperUIntegral {E : Type u_1} [NormedAddCommGroup E] [NormedSpace ℂ E] (f : ℂ → E) (σ : ℝ) (σ' : ℝ) (T : ℝ) : E"}
{"name":"HolomorphicOn.rectangleBorderIntegrable'","declaration":"theorem HolomorphicOn.rectangleBorderIntegrable' {E : Type u_1} [NormedAddCommGroup E] [NormedSpace ℂ E] {f : ℂ → E} {z : ℂ} {w : ℂ} {p : ℂ} (hf : HolomorphicOn f (Rectangle z w \\ {p})) (hp : Rectangle z w ∈ nhds p) : RectangleBorderIntegrable f z w"}
{"name":"existsDifferentiableOn_of_bddAbove","declaration":"theorem existsDifferentiableOn_of_bddAbove {E : Type u_1} [NormedAddCommGroup E] [NormedSpace ℂ E] {f : ℂ → E} [CompleteSpace E] {s : Set ℂ} {c : ℂ} (hc : s ∈ nhds c) (hd : HolomorphicOn f (s \\ {c})) (hb : BddAbove (norm ∘ f '' (s \\ {c}))) : ∃ g, HolomorphicOn g s ∧ Set.EqOn f g (s \\ {c})"}
{"name":"verticalIntegral_split_three","declaration":"theorem verticalIntegral_split_three {E : Type u_1} [NormedAddCommGroup E] [NormedSpace ℂ E] {f : ℂ → E} {σ : ℝ} (a : ℝ) (b : ℝ) (hf : MeasureTheory.Integrable (fun t => f (↑σ + ↑t * Complex.I)) MeasureTheory.volume) : VerticalIntegral f σ =\n  (Complex.I • ∫ (t : ℝ) in Set.Iic a, f (↑σ + ↑t * Complex.I)) + VIntegral f σ a b +\n    Complex.I • ∫ (t : ℝ) in Set.Ici b, f (↑σ + ↑t * Complex.I)"}
{"name":"ResidueTheoremAtOrigin","declaration":"theorem ResidueTheoremAtOrigin  : RectangleIntegral' (fun s => 1 / s) (-1 - Complex.I) (1 + Complex.I) = 1"}
{"name":"rectangleIntegral_symm","declaration":"theorem rectangleIntegral_symm {E : Type u_1} [NormedAddCommGroup E] [NormedSpace ℂ E] (f : ℂ → E) (z : ℂ) (w : ℂ) : RectangleIntegral f z w = RectangleIntegral f w z"}
{"name":"rectangleIntegral_symm_re","declaration":"theorem rectangleIntegral_symm_re {E : Type u_1} [NormedAddCommGroup E] [NormedSpace ℂ E] (f : ℂ → E) (z : ℂ) (w : ℂ) : RectangleIntegral f (↑w.re + ↑z.im * Complex.I) (↑z.re + ↑w.im * Complex.I) = -RectangleIntegral f z w"}
{"name":"RectangleIntegralVSplit'","declaration":"theorem RectangleIntegralVSplit' {E : Type u_1} [NormedAddCommGroup E] [NormedSpace ℂ E] {f : ℂ → E} {b : ℝ} {x₀ : ℝ} {x₁ : ℝ} {y₀ : ℝ} {y₁ : ℝ} (hb : b ∈ Set.uIcc y₀ y₁) (hf : RectangleBorderIntegrable f (↑x₀ + ↑y₀ * Complex.I) (↑x₁ + ↑y₁ * Complex.I)) : RectangleIntegral f (↑x₀ + ↑y₀ * Complex.I) (↑x₁ + ↑y₁ * Complex.I) =\n  RectangleIntegral f (↑x₀ + ↑y₀ * Complex.I) (↑x₁ + ↑b * Complex.I) +\n    RectangleIntegral f (↑x₀ + ↑b * Complex.I) (↑x₁ + ↑y₁ * Complex.I)"}
{"name":"HIntegral'","declaration":"def HIntegral' {E : Type u_1} [NormedAddCommGroup E] [NormedSpace ℂ E] (f : ℂ → E) (x₁ : ℝ) (x₂ : ℝ) (y : ℝ) : E"}
{"name":"VIntegral_symm","declaration":"theorem VIntegral_symm {E : Type u_1} [NormedAddCommGroup E] [NormedSpace ℂ E] {f : ℂ → E} {x : ℝ} {y₁ : ℝ} {y₂ : ℝ} : VIntegral f x y₁ y₂ = -VIntegral f x y₂ y₁"}
{"name":"ResidueTheoremAtOrigin_aux2c","declaration":"theorem ResidueTheoremAtOrigin_aux2c (a : ℝ) (b : ℝ) : let f := fun y => (1 + ↑y * Complex.I)⁻¹;\nIntervalIntegrable f MeasureTheory.volume a b"}
{"name":"RectangleIntegralHSplit","declaration":"/-- Given `x₀ a x₁ : ℝ`, and `y₀ y₁ : ℝ` and a function `f : ℂ → ℂ` so that\nboth `(t : ℝ) ↦ f(t + y₀ * I)` and `(t : ℝ) ↦ f(t + y₁ * I)` are integrable over both\n`t ∈ Icc x₀ a` and `t ∈ Icc a x₁`, we have that\n`RectangleIntegral f (x₀ + y₀ * I) (x₁ + y₁ * I)` is the sum of\n`RectangleIntegral f (x₀ + y₀ * I) (a + y₁ * I)` and\n`RectangleIntegral f (a + y₀ * I) (x₁ + y₁ * I)`.\n-/\ntheorem RectangleIntegralHSplit {E : Type u_1} [NormedAddCommGroup E] [NormedSpace ℂ E] {f : ℂ → E} {a : ℝ} {x₀ : ℝ} {x₁ : ℝ} {y₀ : ℝ} {y₁ : ℝ} (f_int_x₀_a_bot : IntervalIntegrable (fun x => f (↑x + ↑y₀ * Complex.I)) MeasureTheory.volume x₀ a) (f_int_a_x₁_bot : IntervalIntegrable (fun x => f (↑x + ↑y₀ * Complex.I)) MeasureTheory.volume a x₁) (f_int_x₀_a_top : IntervalIntegrable (fun x => f (↑x + ↑y₁ * Complex.I)) MeasureTheory.volume x₀ a) (f_int_a_x₁_top : IntervalIntegrable (fun x => f (↑x + ↑y₁ * Complex.I)) MeasureTheory.volume a x₁) : RectangleIntegral f (↑x₀ + ↑y₀ * Complex.I) (↑x₁ + ↑y₁ * Complex.I) =\n  RectangleIntegral f (↑x₀ + ↑y₀ * Complex.I) (↑a + ↑y₁ * Complex.I) +\n    RectangleIntegral f (↑a + ↑y₀ * Complex.I) (↑x₁ + ↑y₁ * Complex.I)"}
{"name":"RectangleIntegral.translate'","declaration":"theorem RectangleIntegral.translate' {E : Type u_1} [NormedAddCommGroup E] [NormedSpace ℂ E] (f : ℂ → E) (z : ℂ) (w : ℂ) (p : ℂ) : RectangleIntegral' (fun s => f (s - p)) z w = RectangleIntegral' f (z - p) (w - p)"}
{"name":"HIntegral","declaration":"def HIntegral {E : Type u_1} [NormedAddCommGroup E] [NormedSpace ℂ E] (f : ℂ → E) (x₁ : ℝ) (x₂ : ℝ) (y : ℝ) : E"}
{"name":"integral_const_div_re_add_self","declaration":"theorem integral_const_div_re_add_self {A : ℂ} {x : ℝ} {y₁ : ℝ} {y₂ : ℝ} (hx : x ≠ 0) : ∫ (y : ℝ) in y₁..y₂, A / (↑x + ↑y * Complex.I) =\n  A / Complex.I * (↑(Real.log (y₂ ^ 2 + (-x) ^ 2)) / 2 - ↑(Real.log (y₁ ^ 2 + (-x) ^ 2)) / 2) -\n    A / Complex.I * Complex.I * (↑(Real.arctan (y₂ / -x)) - ↑(Real.arctan (y₁ / -x)))"}
{"name":"RectangleIntegral","declaration":"/-- A `RectangleIntegral` of a function `f` is one over a rectangle determined by\n`z` and `w` in `ℂ`. -/\ndef RectangleIntegral {E : Type u_1} [NormedAddCommGroup E] [NormedSpace ℂ E] (f : ℂ → E) (z : ℂ) (w : ℂ) : E"}
{"name":"RectanglePullToNhdOfPole'","declaration":"theorem RectanglePullToNhdOfPole' {E : Type u_1} [NormedAddCommGroup E] [NormedSpace ℂ E] {f : ℂ → E} [CompleteSpace E] {z₀ : ℂ} {z₁ : ℂ} {z₂ : ℂ} {z₃ : ℂ} {p : ℂ} (h_orientation : z₀.re ≤ z₃.re ∧ z₀.im ≤ z₃.im ∧ z₁.re ≤ z₂.re ∧ z₁.im ≤ z₂.im) (hp : Rectangle z₁ z₂ ∈ nhds p) (hz : Rectangle z₁ z₂ ⊆ Rectangle z₀ z₃) (fHolo : HolomorphicOn f (Rectangle z₀ z₃ \\ {p})) : RectangleIntegral f z₀ z₃ = RectangleIntegral f z₁ z₂"}
{"name":"VerticalIntegral","declaration":"def VerticalIntegral {E : Type u_1} [NormedAddCommGroup E] [NormedSpace ℂ E] (f : ℂ → E) (σ : ℝ) : E"}
{"name":"ContinuousOn.rectangleBorderIntegrable","declaration":"theorem ContinuousOn.rectangleBorderIntegrable {E : Type u_1} [NormedAddCommGroup E] {f : ℂ → E} {z : ℂ} {w : ℂ} (hf : ContinuousOn f (Rectangle z w)) : RectangleBorderIntegrable f z w"}
{"name":"RectangleIntegral.translate","declaration":"theorem RectangleIntegral.translate {E : Type u_1} [NormedAddCommGroup E] [NormedSpace ℂ E] (f : ℂ → E) (z : ℂ) (w : ℂ) (p : ℂ) : RectangleIntegral (fun s => f (s - p)) z w = RectangleIntegral f (z - p) (w - p)"}
{"name":"ResidueTheoremOnRectangleWithSimplePole","declaration":"theorem ResidueTheoremOnRectangleWithSimplePole {f : ℂ → ℂ} {g : ℂ → ℂ} {z : ℂ} {w : ℂ} {p : ℂ} {A : ℂ} (zRe_le_wRe : z.re ≤ w.re) (zIm_le_wIm : z.im ≤ w.im) (pInRectInterior : Rectangle z w ∈ nhds p) (gHolo : HolomorphicOn g (Rectangle z w)) (principalPart : Set.EqOn (f - fun s => A / (s - p)) g (Rectangle z w \\ {p})) : RectangleIntegral' f z w = A"}
{"name":"HolomorphicOn.vanishesOnRectangle","declaration":"theorem HolomorphicOn.vanishesOnRectangle {E : Type u_1} [NormedAddCommGroup E] [NormedSpace ℂ E] {f : ℂ → E} {z : ℂ} {w : ℂ} [CompleteSpace E] {U : Set ℂ} (f_holo : HolomorphicOn f U) (hU : Rectangle z w ⊆ U) : RectangleIntegral f z w = 0"}
{"name":"HolomorphicOn","declaration":"/-- A function is `HolomorphicOn` a set if it is complex differentiable on that set. -/\ndef HolomorphicOn {E : Type u_1} [NormedAddCommGroup E] [NormedSpace ℂ E] (f : ℂ → E) (s : Set ℂ) : Prop"}
{"name":"VIntegral'","declaration":"def VIntegral' {E : Type u_1} [NormedAddCommGroup E] [NormedSpace ℂ E] (f : ℂ → E) (x : ℝ) (y₁ : ℝ) (y₂ : ℝ) : E"}
{"name":"RectangleIntegral.const_mul'","declaration":"theorem RectangleIntegral.const_mul' {E : Type u_1} [NormedAddCommGroup E] [NormedSpace ℂ E] (f : ℂ → E) (z : ℂ) (w : ℂ) (c : ℂ) : RectangleIntegral' (fun s => c • f s) z w = c • RectangleIntegral' f z w"}
{"name":"ResidueTheoremAtOrigin_aux1c","declaration":"theorem ResidueTheoremAtOrigin_aux1c (a : ℝ) (b : ℝ) : let f := fun y => (↑y + Complex.I)⁻¹;\nIntervalIntegrable f MeasureTheory.volume a b"}
{"name":"ResidueTheoremInRectangle","declaration":"theorem ResidueTheoremInRectangle {z : ℂ} {w : ℂ} {p : ℂ} {c : ℂ} (zRe_le_wRe : z.re ≤ w.re) (zIm_le_wIm : z.im ≤ w.im) (pInRectInterior : Rectangle z w ∈ nhds p) : RectangleIntegral' (fun s => c / (s - p)) z w = c"}
{"name":"DiffVertRect_eq_UpperLowerUs","declaration":"theorem DiffVertRect_eq_UpperLowerUs {E : Type u_1} [NormedAddCommGroup E] [NormedSpace ℂ E] {f : ℂ → E} {σ : ℝ} {σ' : ℝ} {T : ℝ} (f_int_σ : MeasureTheory.Integrable (fun t => f (↑σ + ↑t * Complex.I)) MeasureTheory.volume) (f_int_σ' : MeasureTheory.Integrable (fun t => f (↑σ' + ↑t * Complex.I)) MeasureTheory.volume) : VerticalIntegral f σ' - VerticalIntegral f σ - RectangleIntegral f (↑σ - Complex.I * ↑T) (↑σ' + Complex.I * ↑T) =\n  UpperUIntegral f σ σ' T - LowerUIntegral f σ σ' T"}
{"name":"sq_add_sq_ne_zero","declaration":"theorem sq_add_sq_ne_zero {x : ℝ} {y : ℝ} (hy : y ≠ 0) : x ^ 2 + y ^ 2 ≠ 0"}
{"name":"integral_self_div_sq_add_sq","declaration":"theorem integral_self_div_sq_add_sq {x₁ : ℝ} {x₂ : ℝ} {y : ℝ} (hy : y ≠ 0) : ∫ (x : ℝ) in x₁..x₂, x / (x ^ 2 + y ^ 2) = Real.log (x₂ ^ 2 + y ^ 2) / 2 - Real.log (x₁ ^ 2 + y ^ 2) / 2"}
