{"name":"SciLean.explicitSymplecticEuler_eq_implicitSymplecticEulerV1","declaration":"/-- For Hamiltonians in the form `H q p = T p + V q` the `explicitSymplecticEuler` method is identical to `implicitSymplecticEulerV1`\n-/\ntheorem SciLean.explicitSymplecticEuler_eq_implicitSymplecticEulerV1 {R : Type u_1} [RCLike R] {X : Type u_2} [SciLean.SemiInnerProductSpace R X] (T : X → R) (V : X → R) (hT : SciLean.HasAdjDiff R T) (hV : SciLean.HasAdjDiff R V) : (SciLean.explicitSymplecticEuler fun q p => T p + V q) = SciLean.implicitSymplecticEulerV1 fun q p => T p + V q"}
{"name":"SciLean.explicitSymplecticEuler","declaration":"/-- Symplectic Euler integrator\n\nWell behaved integragor for Hamiltonian systems\n\nWarning: This is symplectic integrator if `H q p = T p + V q`.\nIn more complicated cases use `implicitSymplecticEulerV1` or `implicitSymplecticEulerV2`.\n-/\ndef SciLean.explicitSymplecticEuler {R : Type u_1} [RCLike R] {X : Type u_2} [SciLean.SemiInnerProductSpace R X] (H : X → X → R) (Δt : R) (qₙ : X) (pₙ : X) : X × X"}
{"name":"SciLean.crankNicolson","declaration":"def SciLean.crankNicolson {R : Type u_1} [RCLike R] {X : Type u_2} [SciLean.Vec R X] (f : R → X → X) (tₙ : R) (Δt : R) (xₙ : X) : X"}
{"name":"SciLean.heunMethod","declaration":"def SciLean.heunMethod {R : Type u_1} [RCLike R] {X : Type u_2} [SciLean.Vec R X] (f : R → X → X) (tₙ : R) (Δt : R) (xₙ : X) : X"}
{"name":"SciLean.explicitMidpoint","declaration":"def SciLean.explicitMidpoint {R : Type u_1} [RCLike R] {X : Type u_2} [SciLean.Vec R X] (f : R → X → X) (tₙ : R) (Δt : R) (xₙ : X) : X"}
{"name":"SciLean.implicitMidpoint","declaration":"def SciLean.implicitMidpoint {R : Type u_1} [RCLike R] {X : Type u_2} [SciLean.Vec R X] (f : R → X → X) (tₙ : R) (Δt : R) (xₙ : X) : X"}
{"name":"SciLean.rungeKutta4","declaration":"def SciLean.rungeKutta4 {R : Type u_1} [RCLike R] {X : Type u_2} [SciLean.Vec R X] (f : R → X → X) (tₙ : R) (Δt : R) (xₙ : X) : X"}
{"name":"SciLean.forwardEuler","declaration":"def SciLean.forwardEuler {R : Type u_1} [RCLike R] {X : Type u_2} [SciLean.Vec R X] (f : R → X → X) (tₙ : R) (Δt : R) (xₙ : X) : X"}
{"name":"SciLean.implicitSymplecticEulerV2","declaration":"def SciLean.implicitSymplecticEulerV2 {R : Type u_1} [RCLike R] {X : Type u_2} [SciLean.SemiInnerProductSpace R X] (H : X → X → R) (Δt : R) (qₙ : X) (pₙ : X) : X × X"}
{"name":"SciLean.backwardEuler","declaration":"def SciLean.backwardEuler {R : Type u_1} [RCLike R] {X : Type u_2} [SciLean.Vec R X] (f : R → X → X) (tₙ : R) (Δt : R) (xₙ : X) : X"}
{"name":"SciLean.implicitSymplecticEulerV1","declaration":"def SciLean.implicitSymplecticEulerV1 {R : Type u_1} [RCLike R] {X : Type u_2} [SciLean.SemiInnerProductSpace R X] (H : X → X → R) (Δt : R) (qₙ : X) (pₙ : X) : X × X"}
