{"name":"SciLean.Rand.instLawfulRandNormalToMeasurableSpace","declaration":"instance SciLean.Rand.instLawfulRandNormalToMeasurableSpace {R : Type} [SciLean.RealScalar R] [MeasureTheory.MeasureSpace R] (μ : R) (σ : R) : SciLean.Rand.LawfulRand (SciLean.Rand.normal μ σ)"}
{"name":"SciLean.Rand.normal_reparameterize","declaration":"theorem SciLean.Rand.normal_reparameterize {R : Type} [SciLean.RealScalar R] [MeasureTheory.MeasureSpace R] (μ : R) (σ : R) : SciLean.Rand.normal μ σ = (SciLean.Rand.normal 0 1).map fun x => σ • x + μ"}
{"name":"SciLean.Rand.normalFDμ","declaration":"def SciLean.Rand.normalFDμ {R : Type u_1} [SciLean.RealScalar R] {U : Type u_2} [SciLean.SemiHilbert R U] [MeasureTheory.MeasureSpace U] (μ : U) (dμ : U) (σ : R) : 𝒟'(U, R × R)"}
{"name":"SciLean.Rand.normal","declaration":"/-- Normal random variable with mean `μ` and standard deviation `σ`. -/\ndef SciLean.Rand.normal {R : Type} [SciLean.RealScalar R] [MeasureTheory.MeasureSpace R] (μ : R) (σ : R) : SciLean.Rand R"}
{"name":"SciLean.Rand.normalFDμ_score","declaration":"theorem SciLean.Rand.normalFDμ_score {R : Type} [SciLean.RealScalar R] [MeasureTheory.MeasureSpace R] {Y : Type u_2} [SciLean.Vec R Y] {Z : Type u_1} [SciLean.Vec R Z] [Module ℝ Z] (μ : R) (dμ : R) (σ : R) (f : R → Y) (L : (R × R) ⊸[R] Y ⊸[R] Z) : (SciLean.Rand.normalFDμ μ dμ σ).extAction f L =\n  (SciLean.Rand.normal μ σ).𝔼 fun x => (L (1, -(1 / σ ^ 2) * ⟪x - μ, -dμ⟫_R)) (f x)"}
{"name":"SciLean.Rand.normal.map_add_left","declaration":"theorem SciLean.Rand.normal.map_add_left {R : Type} [SciLean.RealScalar R] [MeasureTheory.MeasureSpace R] (μ : R) (σ : R) (θ : R) : ((SciLean.Rand.normal μ σ).map fun x => θ + x) = SciLean.Rand.normal (θ + μ) σ"}
{"name":"SciLean.Rand.normal.pdf","declaration":"theorem SciLean.Rand.normal.pdf {R : Type} [SciLean.RealScalar R] [MeasureTheory.MeasureSpace R] (μ : R) (σ : R) : SciLean.Rand.pdf R (SciLean.Rand.normal μ σ) MeasureTheory.volume = SciLean.gaussian μ σ"}
{"name":"SciLean.Rand.normal.map_sub_right","declaration":"theorem SciLean.Rand.normal.map_sub_right {R : Type} [SciLean.RealScalar R] [MeasureTheory.MeasureSpace R] (μ : R) (σ : R) (θ : R) : ((SciLean.Rand.normal μ σ).map fun x => x - θ) = SciLean.Rand.normal (μ - θ) σ"}
{"name":"SciLean.Rand.boxMuller","declaration":"def SciLean.Rand.boxMuller {R : Type u_1} [SciLean.RealScalar R] (u : R) (v : R) : R × R"}
{"name":"SciLean.Rand.normal.map_add_right","declaration":"theorem SciLean.Rand.normal.map_add_right {R : Type} [SciLean.RealScalar R] [MeasureTheory.MeasureSpace R] (μ : R) (σ : R) (θ : R) : ((SciLean.Rand.normal μ σ).map fun x => x + θ) = SciLean.Rand.normal (μ + θ) σ"}
{"name":"SciLean.Rand.normal.arg_μ.parDistribFwdDeriv","declaration":"theorem SciLean.Rand.normal.arg_μ.parDistribFwdDeriv {R : Type} [SciLean.RealScalar R] [MeasureTheory.MeasureSpace R] {W : Type u_1} [SciLean.Vec R W] (μ : W → R) (σ : R) (hμ : SciLean.CDifferentiable R μ) : (SciLean.parDistribFwdDeriv fun w => ↑(SciLean.Rand.normal (μ w) σ).ℙ) = fun w dw =>\n  let μdμ := ∂> μ w dw;\n  SciLean.Rand.normalFDμ μdμ.1 μdμ.2 σ"}
