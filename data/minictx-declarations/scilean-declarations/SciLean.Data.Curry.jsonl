{"name":"SciLean.FunNArgs.uncurry","declaration":"def SciLean.FunNArgs.uncurry (n : Nat) {F : Sort u_1} {Xs : outParam (Sort u_2)} {Y : outParam (Sort u_3)} [self : SciLean.FunNArgs n F Xs Y] : F → Xs → Y"}
{"name":"SciLean.FunNArgs","declaration":"class SciLean.FunNArgs (n : Nat) (F : Sort u_1) (Xs : outParam (Sort u_2)) (Y : outParam (Sort u_3)) : Sort (max (max (max 1 u_1) u_2) u_3)"}
{"name":"SciLean.UncurryN.uncurry","declaration":"def SciLean.UncurryN.uncurry (n : Nat) {F : Sort u_1} {Xs : outParam (Sort u_2)} {Y : outParam (Sort u_3)} [self : SciLean.UncurryN n F Xs Y] : F → Xs → Y"}
{"name":"SciLean.instCurryNHAddNatInstHAddInstAddNatOfNatProdForAll","declaration":"instance SciLean.instCurryNHAddNatInstHAddInstAddNatOfNatProdForAll {n : Nat} {X : Type u_1} {Xs : Type u_2} {Y : Sort u_3} {F : outParam (Sort u_4)} [c : outParam (SciLean.CurryN n Xs Y F)] : SciLean.CurryN (n + 1) (X × Xs) Y (X → F)"}
{"name":"SciLean.instUncurryNHAddNatInstHAddInstAddNatOfNatForAllProd","declaration":"instance SciLean.instUncurryNHAddNatInstHAddInstAddNatOfNatForAllProd {n : Nat} {X : Type u_1} {Y : Sort u_2} {Xs' : outParam (Type u_3)} {Y' : outParam (Sort u_4)} [c : SciLean.UncurryN n Y Xs' Y'] : SciLean.UncurryN (n + 1) (X → Y) (X × Xs') Y'"}
{"name":"SciLean.instCurryAllHAddNatInstHAddInstAddNatOfNatProdForAll","declaration":"instance SciLean.instCurryAllHAddNatInstHAddInstAddNatOfNatProdForAll {n : Nat} {X : Type u_1} {Xs : Type u_2} {Y : Sort u_3} {F : outParam (Sort u_4)} [c : outParam (SciLean.CurryAll n Xs Y F)] : SciLean.CurryAll (n + 1) (X × Xs) Y (X → F)"}
{"name":"SciLean.CurryAll.mk","declaration":"ctor SciLean.CurryAll.mk {n : Nat} {Xs : Sort u_1} {Y : Sort u_2} {F : outParam (Sort u_3)} (curry : (Xs → Y) → F) : SciLean.CurryAll n Xs Y F"}
{"name":"SciLean.FunNArgs.is_equiv","declaration":"def SciLean.FunNArgs.is_equiv {n : Nat} {F : Sort u_1} {Xs : outParam (Sort u_2)} {Y : outParam (Sort u_3)} [self : SciLean.FunNArgs n F Xs Y] : SciLean.FunNArgs.curry n ∘ SciLean.FunNArgs.uncurry n = id ∧ SciLean.FunNArgs.uncurry n ∘ SciLean.FunNArgs.curry n = id"}
{"name":"SciLean.instUncurryNOfNatNatInstOfNatNatForAll","declaration":"instance SciLean.instUncurryNOfNatNatInstOfNatNatForAll {X : Sort u_1} {Y : Sort u_2} : SciLean.UncurryN 1 (X → Y) X Y"}
{"name":"SciLean.CurryAll","declaration":"class SciLean.CurryAll (n : Nat) (Xs : Sort u_1) (Y : Sort u_2) (F : outParam (Sort u_3)) : Sort (max (max (max 1 u_1) u_2) u_3)"}
{"name":"SciLean.CurryAll.curry","declaration":"def SciLean.CurryAll.curry (n : Nat) {Xs : Sort u_1} {Y : Sort u_2} {F : outParam (Sort u_3)} [self : SciLean.CurryAll n Xs Y F] : (Xs → Y) → F"}
{"name":"SciLean.instCurryNOfNatNatInstOfNatNatForAll","declaration":"instance SciLean.instCurryNOfNatNatInstOfNatNatForAll {X : Sort u_1} {Y : Sort u_2} : SciLean.CurryN 1 X Y (X → Y)"}
{"name":"SciLean.CurryN","declaration":"class SciLean.CurryN (n : Nat) (Xs : Sort u_1) (Y : Sort u_2) (F : outParam (Sort u_3)) : Sort (max (max (max 1 u_1) u_2) u_3)"}
{"name":"SciLean.UncurryAll.mk","declaration":"ctor SciLean.UncurryAll.mk {F : Sort u_1} {Xs : outParam (Sort u_2)} {Y : outParam (Sort u_3)} (uncurry : F → Xs → Y) : SciLean.UncurryAll F Xs Y"}
{"name":"SciLean.curryAll","declaration":"def SciLean.curryAll {Xs : outParam (Sort u_1)} {Y : outParam (Sort u_2)} {F : outParam (Sort u_3)} (n : Nat) (f : Xs → Y) [outParam (SciLean.CurryAll n Xs Y F)] : F"}
{"name":"SciLean.CurryN.curry","declaration":"def SciLean.CurryN.curry (n : Nat) {Xs : Sort u_1} {Y : Sort u_2} {F : outParam (Sort u_3)} [self : SciLean.CurryN n Xs Y F] : (Xs → Y) → F"}
{"name":"SciLean.uncurryN","declaration":"def SciLean.uncurryN {F : Sort u_1} {Xs : outParam (Sort u_2)} {Y : outParam (Sort u_3)} (n : Nat) (f : F) [SciLean.UncurryN n F Xs Y] : Xs → Y"}
{"name":"SciLean.instFunNArgsOfNatNatInstOfNatNatForAll","declaration":"instance SciLean.instFunNArgsOfNatNatInstOfNatNatForAll {X : Sort u_1} {Y : Sort u_2} : SciLean.FunNArgs 1 (X → Y) X Y"}
{"name":"SciLean.curryN","declaration":"def SciLean.curryN {Xs : outParam (Sort u_1)} {Y : outParam (Sort u_2)} {F : outParam (Sort u_3)} (n : Nat) (f : Xs → Y) [outParam (SciLean.CurryN n Xs Y F)] : F"}
{"name":"SciLean.instUncurryAllForAllProd","declaration":"instance SciLean.instUncurryAllForAllProd {X : Type u_1} {Y : Sort u_2} {Xs' : outParam (Type u_3)} {Y' : outParam (Sort u_4)} [c : SciLean.UncurryAll Y Xs' Y'] : SciLean.UncurryAll (X → Y) (X × Xs') Y'"}
{"name":"SciLean.CurryN.mk","declaration":"ctor SciLean.CurryN.mk {n : Nat} {Xs : Sort u_1} {Y : Sort u_2} {F : outParam (Sort u_3)} (curry : (Xs → Y) → F) : SciLean.CurryN n Xs Y F"}
{"name":"SciLean.FunNArgs.curry","declaration":"def SciLean.FunNArgs.curry (n : Nat) {F : Sort u_1} {Xs : outParam (Sort u_2)} {Y : outParam (Sort u_3)} [self : SciLean.FunNArgs n F Xs Y] : (Xs → Y) → F"}
{"name":"SciLean.UncurryAll.uncurry","declaration":"def SciLean.UncurryAll.uncurry {F : Sort u_1} {Xs : outParam (Sort u_2)} {Y : outParam (Sort u_3)} [self : SciLean.UncurryAll F Xs Y] : F → Xs → Y"}
{"name":"SciLean.uncurryAll","declaration":"def SciLean.uncurryAll {F : Sort u_1} {Xs : outParam (Sort u_2)} {Y : outParam (Sort u_3)} (f : F) [SciLean.UncurryAll F Xs Y] : Xs → Y"}
{"name":"SciLean.UncurryAll","declaration":"class SciLean.UncurryAll (F : Sort u_1) (Xs : outParam (Sort u_2)) (Y : outParam (Sort u_3)) : Sort (max (max (max 1 u_1) u_2) u_3)"}
{"name":"SciLean.FunNArgs.mk","declaration":"ctor SciLean.FunNArgs.mk {n : Nat} {F : Sort u_1} {Xs : outParam (Sort u_2)} {Y : outParam (Sort u_3)} (uncurry : F → Xs → Y) (curry : (Xs → Y) → F) (is_equiv : curry ∘ uncurry = id ∧ uncurry ∘ curry = id) : SciLean.FunNArgs n F Xs Y"}
{"name":"SciLean.UncurryN.mk","declaration":"ctor SciLean.UncurryN.mk {n : Nat} {F : Sort u_1} {Xs : outParam (Sort u_2)} {Y : outParam (Sort u_3)} (uncurry : F → Xs → Y) : SciLean.UncurryN n F Xs Y"}
{"name":"SciLean.instCurryAllOfNatNatInstOfNatNatForAll","declaration":"instance SciLean.instCurryAllOfNatNatInstOfNatNatForAll {X : Sort u_1} {Y : Sort u_2} : SciLean.CurryAll 1 X Y (X → Y)"}
{"name":"SciLean.UncurryN","declaration":"class SciLean.UncurryN (n : Nat) (F : Sort u_1) (Xs : outParam (Sort u_2)) (Y : outParam (Sort u_3)) : Sort (max (max (max 1 u_1) u_2) u_3)"}
{"name":"SciLean.instFunNArgsHAddNatInstHAddInstAddNatOfNatForAllProd","declaration":"instance SciLean.instFunNArgsHAddNatInstHAddInstAddNatOfNatForAllProd {n : Nat} {X : Type u_1} {Xs : Type u_2} {Y : Sort u_3} {F : Sort u_4} [fn : SciLean.FunNArgs n F Xs Y] : SciLean.FunNArgs (n + 1) (X → F) (X × Xs) Y"}
{"name":"SciLean.instUncurryAllForAll","declaration":"instance SciLean.instUncurryAllForAll {X : Sort u_1} {Y : Sort u_2} : SciLean.UncurryAll (X → Y) X Y"}
