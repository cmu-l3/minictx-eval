{"name":"Prod.mk.isomorph_rule","declaration":"theorem Prod.mk.isomorph_rule {α : Type u_4} {β : Type u_6} {γ : Type u_5} {α' : outParam (Type u_1)} {β' : outParam (Type u_2)} {γ' : outParam (Type u_3)} (tag : Lean.Name) [SciLean.IsomorphicType tag α α'] [SciLean.IsomorphicType tag β β'] [SciLean.IsomorphicType tag γ γ'] (f : α → β) (g : α → γ) : (SciLean.isomorph tag fun x => (f x, g x)) = fun x' =>\n  let y' := SciLean.isomorph tag f x';\n  let z' := SciLean.isomorph tag g x';\n  (y', z')"}
{"name":"SciLean.isomorph.apply_rule","declaration":"theorem SciLean.isomorph.apply_rule {α : Type u_3} {β : Type u_4} {α' : outParam (Type u_1)} {β' : outParam (Type u_2)} (tag : Lean.Name) [SciLean.IsomorphicType tag α α'] [SciLean.IsomorphicType tag β β'] (x : α) : (SciLean.isomorph tag fun f => f x) = fun f => f ((SciLean.IsomorphicType.equiv tag) x)"}
{"name":"SciLean.isomorph.let_rule","declaration":"theorem SciLean.isomorph.let_rule {α : Type u_3} {β : Type u_5} {γ : Type u_4} {α' : outParam (Type u_1)} {β' : outParam (Type u_6)} {γ' : outParam (Type u_2)} (tag : Lean.Name) [SciLean.IsomorphicType tag α α'] [SciLean.IsomorphicType tag β β'] [SciLean.IsomorphicType tag γ γ'] (f : α → β → γ) (g : α → β) : (SciLean.isomorph tag fun x =>\n    let y := g x;\n    f x y) =\n  fun x' =>\n  let y' := SciLean.isomorph tag g x';\n  SciLean.isomorph tag (fun xy => f xy.1 xy.2) (x', y')"}
{"name":"Prod.fst.isomorph_rule","declaration":"theorem Prod.fst.isomorph_rule {α : Type u_5} {β : Type u_1} {γ : Type u_2} {α' : outParam (Type u_3)} {β' : outParam (Type u_4)} {γ' : outParam (Type u_6)} (tag : Lean.Name) [SciLean.IsomorphicType tag α α'] [SciLean.IsomorphicType tag β β'] [SciLean.IsomorphicType tag γ γ'] (f : α → β × γ) : (SciLean.isomorph tag fun x => (f x).1) = fun x =>\n  let f' := SciLean.isomorph tag f;\n  (f' x).1"}
{"name":"Prod.snd.isomorph_rule","declaration":"theorem Prod.snd.isomorph_rule {α : Type u_5} {β : Type u_1} {γ : Type u_2} {α' : outParam (Type u_3)} {β' : outParam (Type u_4)} {γ' : outParam (Type u_6)} (tag : Lean.Name) [SciLean.IsomorphicType tag α α'] [SciLean.IsomorphicType tag β β'] [SciLean.IsomorphicType tag γ γ'] (f : α → β × γ) : (SciLean.isomorph tag fun x => (f x).1) = fun x =>\n  let f' := SciLean.isomorph tag f;\n  (f' x).1"}
{"name":"SciLean.isomorph.pi_rule","declaration":"theorem SciLean.isomorph.pi_rule {α : Type u_4} {β : Type u_5} {γ : Type u_6} {α' : outParam (Type u_1)} {β' : outParam (Type u_2)} {γ' : outParam (Type u_3)} (tag : Lean.Name) [SciLean.IsomorphicType tag α α'] [SciLean.IsomorphicType tag β β'] [SciLean.IsomorphicType tag γ γ'] (f : α → β → γ) : (SciLean.isomorph tag fun x y => f x y) = fun x' =>\n  SciLean.isomorph tag (f ((SciLean.IsomorphicType.equiv tag).symm x'))"}
{"name":"SciLean.isomorph.id_rule","declaration":"theorem SciLean.isomorph.id_rule {α : Type u_2} {α' : outParam (Type u_1)} (tag : Lean.Name) [SciLean.IsomorphicType tag α α'] : (SciLean.isomorph tag fun x => x) = fun x => x"}
{"name":"SciLean.isomorph.const_rule","declaration":"theorem SciLean.isomorph.const_rule {α : Type u_3} {β : Type u_4} {α' : outParam (Type u_1)} {β' : outParam (Type u_2)} (tag : Lean.Name) [SciLean.IsomorphicType tag α α'] [SciLean.IsomorphicType tag β β'] (y : β) : (SciLean.isomorph tag fun x => y) = fun x => (SciLean.IsomorphicType.equiv tag) y"}
{"name":"SciLean.isomorph.comp_rule","declaration":"theorem SciLean.isomorph.comp_rule {α : Type u_3} {β : Type u_5} {γ : Type u_4} {α' : outParam (Type u_1)} {β' : outParam (Type u_6)} {γ' : outParam (Type u_2)} (tag : Lean.Name) [SciLean.IsomorphicType tag α α'] [SciLean.IsomorphicType tag β β'] [SciLean.IsomorphicType tag γ γ'] (f : β → γ) (g : α → β) : (SciLean.isomorph tag fun x => f (g x)) = fun x => SciLean.isomorph tag f (SciLean.isomorph tag g x)"}
