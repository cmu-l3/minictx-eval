{"name":"Lean.Expr.LiftLets2Config.splitCtors","declaration":"/-- Split bindings of constructors into multiple let bindings.\nFor example `let y := (a,b); ...` will be transformed into `let y₁ := a; let y₂ := b; ...`  -/\ndef Lean.Expr.LiftLets2Config.splitCtors (self : Lean.Expr.LiftLets2Config) : Bool"}
{"name":"Lean.Expr.LiftLets2Config.removeNoFVar","declaration":"/-- Remove binding with no free variables.  -/\ndef Lean.Expr.LiftLets2Config.removeNoFVar (self : Lean.Expr.LiftLets2Config) : Bool"}
{"name":"Lean.Expr.LiftLets2Config.removeOfNat","declaration":"/-- Remove binding of lambda functions.  -/\ndef Lean.Expr.LiftLets2Config.removeOfNat (self : Lean.Expr.LiftLets2Config) : Bool"}
{"name":"Lean.Expr.LiftLets2Config.removeLambda","declaration":"/-- Remove binding of lambda functions.  -/\ndef Lean.Expr.LiftLets2Config.removeLambda (self : Lean.Expr.LiftLets2Config) : Bool"}
{"name":"Lean.Expr.LiftLets2Config","declaration":"/-- Configuration for `Lean.Expr.liftLets` and the `lift_lets` tactic. -/\nstructure Lean.Expr.LiftLets2Config  : Type"}
{"name":"Lean.Expr.liftLets2","declaration":"/-- Take all the `let`s in an expression and move them outwards as far as possible.\nAll top-level `let`s are added to the local context, and then `f` is called with the list\nof local bindings (each an fvar) and the new expression.\n\nLet bindings are merged if they have the same type and value.\n\nUse `e.liftLets mkLetFVars` to get a defeq expression with all `let`s lifted as far as possible. -/\ndef Lean.Expr.liftLets2 {n : Type → Type u_1} [MonadControlT Lean.MetaM n] [Monad n] {α : Type} (e : Lean.Expr) (f : Array Lean.Expr → Lean.Expr → n α) (config : optParam Lean.Expr.LiftLets2Config\n  { proofs := false, merge := true, removeSingleFVar := true, removeNoFVar := true, splitCtors := true,\n    removeLambda := true, removeOfNat := true }) : n α"}
{"name":"Lean.Expr.LiftLets2Config.mk","declaration":"ctor Lean.Expr.LiftLets2Config.mk (proofs : Bool) (merge : Bool) (removeSingleFVar : Bool) (removeNoFVar : Bool) (splitCtors : Bool) (removeLambda : Bool) (removeOfNat : Bool) : Lean.Expr.LiftLets2Config"}
{"name":"Lean.Expr.LiftLets2Config.proofs","declaration":"/-- Whether to lift lets out of proofs. The default is not to. -/\ndef Lean.Expr.LiftLets2Config.proofs (self : Lean.Expr.LiftLets2Config) : Bool"}
{"name":"Lean.Expr.LiftLets2Config.merge","declaration":"/-- Whether to merge let bindings if they have the same type and value.\nThis test is by syntactic equality, not definitional equality.\nThe default is to merge. -/\ndef Lean.Expr.LiftLets2Config.merge (self : Lean.Expr.LiftLets2Config) : Bool"}
{"name":"Lean.Expr.LiftLets2Config.removeSingleFVar","declaration":"/-- Remove fvar binding. Remove let binding  -/\ndef Lean.Expr.LiftLets2Config.removeSingleFVar (self : Lean.Expr.LiftLets2Config) : Bool"}
