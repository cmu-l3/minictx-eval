{"name":"SciLean.odeSolve_fixed_dt","declaration":"theorem SciLean.odeSolve_fixed_dt {R : Type u_1} [RCLike R] {X : Type u_1} [SciLean.Vec R X] {f : R → X → X} (stepper : (R → X → X) → R → R → X → X) (h : SciLean.HasUniqueOdeSolution f ∧ SciLean.IsOdeStepper f (stepper f)) : SciLean.odeSolve f = fun t₀ t x₀ => Filter.limit Filter.atTop fun n => SciLean.odeSolveFixedStep (stepper f) n t₀ t x₀"}
{"name":"SciLean.odeSolveFixedStep","declaration":"def SciLean.odeSolveFixedStep {R : Type u_1} [RCLike R] {X : Type u_1} (stepper : R → R → X → X) (steps : ℕ) (t₁ : R) (t₂ : R) (x₀ : X) : X"}
{"name":"SciLean.IsOdeStepper","declaration":"/-- Can we integrate differential equation `∂ x t = f t (x t)` using `stepper` function?\n\nThe function `stepper t₀ Δt x₀` computes approximation of the solution `x (t₀+Δt)` under initial condition `x t₀ = x₀`\n\nTODO: refine the conditions, we probably want consistency and convergence. Maybe integrability in `f` too? or integrability of `f` should be specified somewhere else?\n-/\nstructure SciLean.IsOdeStepper {R : Type u_1} [RCLike R] {X : Type u_2} [SciLean.Vec R X] (f : R → X → X) (stepper : R → R → X → X) : Prop"}
{"name":"SciLean.IsOdeStepper.consistent","declaration":"def SciLean.IsOdeStepper.consistent {R : Type u_1} [RCLike R] {X : Type u_2} [SciLean.Vec R X] {f : R → X → X} {stepper : R → R → X → X} (self : SciLean.IsOdeStepper f stepper) (t : R) (x : X) : (Filter.limit (nhds 0) fun Δt' => ∂ (Δt:=Δt'), stepper t Δt x) = f t x"}
{"name":"SciLean.IsOdeStepper.mk","declaration":"ctor SciLean.IsOdeStepper.mk {R : Type u_1} [RCLike R] {X : Type u_2} [SciLean.Vec R X] {f : R → X → X} {stepper : R → R → X → X} (consistent : ∀ (t : R) (x : X), (Filter.limit (nhds 0) fun Δt' => ∂ (Δt:=Δt'), stepper t Δt x) = f t x) : SciLean.IsOdeStepper f stepper"}
