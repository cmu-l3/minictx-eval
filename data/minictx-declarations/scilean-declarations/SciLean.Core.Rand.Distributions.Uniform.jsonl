{"name":"SciLean.Rand.integral_as_uniform_E_in_set","declaration":"theorem SciLean.Rand.integral_as_uniform_E_in_set {X : Type} [MeasureTheory.MeasureSpace X] (R : Type u_1) [SciLean.RealScalar R] {Y : Type u_2} [AddCommGroup Y] [SMul R Y] [Module ℝ Y] (f : X → Y) (A : Set X) [SciLean.Rand.UniformRand ↑A] : ∫' x, f x ∂MeasureTheory.volume.restrict A =\n  (SciLean.Rand.uniform ↑A).𝔼 fun x =>\n    let V := ↑(↑↑MeasureTheory.volume Set.univ);\n    V • f ↑x"}
{"name":"SciLean.Rand.uniform","declaration":"def SciLean.Rand.uniform (X : Type) [SciLean.Rand.UniformRand X] : SciLean.Rand X"}
{"name":"SciLean.Rand.UniformRand.mk","declaration":"ctor SciLean.Rand.UniformRand.mk {X : Type} (uniform : SciLean.Rand X) : SciLean.Rand.UniformRand X"}
{"name":"SciLean.Rand.integral_as_uniform_E","declaration":"theorem SciLean.Rand.integral_as_uniform_E {X : Type} [MeasureTheory.MeasureSpace X] (R : Type u_1) [SciLean.RealScalar R] {Y : Type u_2} [AddCommGroup Y] [Module R Y] [Module ℝ Y] (f : X → Y) (μ : MeasureTheory.Measure X) [SciLean.Rand.UniformRand X] : ∫' x, f x ∂μ =\n  (SciLean.Rand.uniform X).𝔼 fun x =>\n    let V := ↑(↑↑MeasureTheory.volume Set.univ);\n    V • f x"}
{"name":"SciLean.Rand.UniformRand","declaration":"class SciLean.Rand.UniformRand (X : Type) : Type"}
{"name":"SciLean.Rand.UniformRand.uniform","declaration":"def SciLean.Rand.UniformRand.uniform {X : Type} [self : SciLean.Rand.UniformRand X] : SciLean.Rand X"}
