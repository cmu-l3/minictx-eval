{"name":"SciLean.ApproxSolution.val","declaration":"def SciLean.ApproxSolution.val {α : Type u_1} [TopologicalSpace α] [Nonempty α] {N : Type} {lN : Filter N} {spec : α → Prop} (a : SciLean.ApproxSolution lN spec) (p : N) : α"}
{"name":"SciLean.ApproxSolution.exact","declaration":"ctor SciLean.ApproxSolution.exact {α : Type u_1} [TopologicalSpace α] [Nonempty α] {spec : α → Prop} (impl : α) (h : spec impl) : SciLean.ApproxSolution ⊤ spec"}
{"name":"SciLean.approx_convergence","declaration":"theorem SciLean.approx_convergence {α : Type u_1} [TopologicalSpace α] [Nonempty α] {N : Type} {lN : Filter N} {spec : α → Prop} (approx : SciLean.ApproxSolution lN spec) : ∃ a, Filter.Tendsto (SciLean.ApproxSolution.val approx) lN (nhds a)"}
{"name":"SciLean.ApproxSolution.approx","declaration":"ctor SciLean.ApproxSolution.approx {α : Type u_1} [TopologicalSpace α] [Nonempty α] {N : Type} {M : Type} {spec : α → Prop} (specₙ : N → α → Prop) (lN : Filter N) (lM : Filter M) (consistent : ∀ (aₙ : N → α), (∀ (n : N), specₙ n (aₙ n)) → ∀ (a : α), (a = Filter.limit lN fun n => aₙ n) → spec a) (convergence : ∀ (a' : N → M → α),\n  (∀ (n : N), specₙ n (Filter.limit lM fun m => a' n m)) →\n    ∃ a,\n      a =\n        Filter.limit (Filter.prod lN lM) fun x =>\n          match x with\n          | (n, m) => a' n m) (impl : (n : N) → SciLean.ApproxSolution lM (specₙ n)) : SciLean.ApproxSolution (Filter.prod lN lM) spec"}
{"name":"SciLean.ApproxSolution","declaration":"inductive SciLean.ApproxSolution {α : Type u_1} [TopologicalSpace α] [Nonempty α] {N : Type} (lN : Filter N) (spec : α → Prop) : Type (max 1 u_1)"}
{"name":"SciLean.approx_consistency","declaration":"theorem SciLean.approx_consistency {α : Type u_1} [TopologicalSpace α] [Nonempty α] {N : Type} {lN : Filter N} [T2Space α] {spec : α → Prop} (approx : SciLean.ApproxSolution lN spec) (a : α) : (a = Filter.limit lN fun n => SciLean.ApproxSolution.val approx n) → spec a"}
{"name":"SciLean.ApproxSolution.limit","declaration":"def SciLean.ApproxSolution.limit {α : Type u_1} [TopologicalSpace α] [Nonempty α] {N : Type} {lN : Filter N} {spec : α → Prop} (a : SciLean.ApproxSolution lN spec) : α"}
