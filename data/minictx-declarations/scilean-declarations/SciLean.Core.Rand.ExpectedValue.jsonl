{"name":"SciLean.Rand.ùîº_deriv_as_distribDeriv","declaration":"theorem SciLean.Rand.ùîº_deriv_as_distribDeriv {R : Type u_1} [SciLean.RealScalar R] {W : Type u_2} [SciLean.Vec R W] {Y : Type u_3} [SciLean.Vec R Y] [Module ‚Ñù Y] {X : Type} [SciLean.Vec R X] [MeasureTheory.MeasureSpace X] (r : W ‚Üí SciLean.Rand X) (f : W ‚Üí X ‚Üí Y) : ‚àÇ w, (r w).ùîº (f w) = fun w dw =>\n  SciLean.Distribution.integrate\n    (SciLean.parDistribDeriv (fun w => ‚Üëfun x => SciLean.Rand.pdf R (r w) MeasureTheory.volume x ‚Ä¢ f w x) w dw)"}
{"name":"SciLean.Rand.ùîº.arg_r.cderiv_rule","declaration":"theorem SciLean.Rand.ùîº.arg_r.cderiv_rule {R : Type u_3} [SciLean.RealScalar R] {W : Type u_1} [SciLean.Vec R W] {X : Type} [MeasurableSpace X] [SciLean.Vec R X] {Y : Type u_2} [SciLean.Vec R Y] [Module ‚Ñù Y] (r : W ‚Üí SciLean.Rand X) (f : X ‚Üí Y) : ‚àÇ w, (r w).ùîº f = fun w dw =>\n  let d := SciLean.parDistribDeriv (fun w => ‚Üë(r w).‚Ñô) w dw;\n  d.extAction f (fun r ‚ä∏[R] fun y ‚ä∏[R] r ‚Ä¢ y)"}
{"name":"SciLean.Rand.ùîº.arg_rf.cderiv_rule'","declaration":"theorem SciLean.Rand.ùîº.arg_rf.cderiv_rule' {R : Type u_1} [SciLean.RealScalar R] {W : Type u_2} [SciLean.Vec R W] {X : Type} [MeasurableSpace X] [SciLean.Vec R X] {Y : Type u_3} [SciLean.Vec R Y] [Module ‚Ñù Y] (r : W ‚Üí SciLean.Rand X) (f : W ‚Üí X ‚Üí Y) (hf : ‚àÄ (x : X), SciLean.CDifferentiable R fun x_1 => f x_1 x) : ‚àÇ w, (r w).ùîº (f w) = fun w dw =>\n  let dr := SciLean.parDistribFwdDeriv (fun w => ‚Üë(r w).‚Ñô) w dw;\n  let df := fun x => ‚àÇ> (x_1:=w;dw), f x_1 x;\n  dr.extAction df (fun rdr ‚ä∏[R] fun ydy ‚ä∏[R] rdr.1 ‚Ä¢ ydy.2 + rdr.2 ‚Ä¢ ydy.1)"}
