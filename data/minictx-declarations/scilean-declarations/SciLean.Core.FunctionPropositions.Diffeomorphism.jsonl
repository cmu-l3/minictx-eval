{"name":"SciLean.Diffeomorphism.bijective","declaration":"def SciLean.Diffeomorphism.bijective {K : Type u_1} [RCLike K] {X : Type u_2} [SciLean.Vec K X] {Y : Type u_3} [SciLean.Vec K Y] {f : X → Y} (self : SciLean.Diffeomorphism K f) : Function.Bijective f"}
{"name":"Function.invFun.arg_a1.cderiv_rule","declaration":"theorem Function.invFun.arg_a1.cderiv_rule (K : Type u_1) [RCLike K] {X : Type u_4} [SciLean.Vec K X] {Y : Type u_2} [SciLean.Vec K Y] {Z : Type u_3} [SciLean.Vec K Z] (f : Y → Z) (g : X → Z) (hf : SciLean.Diffeomorphism K f) (hg : SciLean.CDifferentiable K g) : (SciLean.cderiv K fun x => Function.invFun f (g x)) = fun x dx =>\n  let z := g x;\n  let dz := SciLean.cderiv K g x dx;\n  let y := Function.invFun f z;\n  let dy := Function.invFun (SciLean.cderiv K f y) dz;\n  dy"}
{"name":"Neg.neg.arg_a0.Diffeomorphism_rule","declaration":"theorem Neg.neg.arg_a0.Diffeomorphism_rule (K : Type u_1) [RCLike K] {X : Type u_2} [SciLean.Vec K X] {Y : Type u_3} [SciLean.Vec K Y] (f : X → Y) (hf : SciLean.Diffeomorphism K f) : SciLean.Diffeomorphism K fun x => -f x"}
{"name":"SciLean.Diffeomorphism.mk","declaration":"ctor SciLean.Diffeomorphism.mk {K : Type u_1} [RCLike K] {X : Type u_2} [SciLean.Vec K X] {Y : Type u_3} [SciLean.Vec K Y] {f : X → Y} (bijective : Function.Bijective f) (differentiable : SciLean.CDifferentiable K f) (locally_diffeo : ∀ (x : X), Function.Bijective (SciLean.cderiv K f x)) : SciLean.Diffeomorphism K f"}
{"name":"HSub.hSub.arg_a0.Diffeomorphism_rule","declaration":"theorem HSub.hSub.arg_a0.Diffeomorphism_rule (K : Type u_1) [RCLike K] {X : Type u_2} [SciLean.Vec K X] {Y : Type u_3} [SciLean.Vec K Y] (f : X → Y) (y : Y) (hf : SciLean.Diffeomorphism K f) : SciLean.Diffeomorphism K fun x => f x - y"}
{"name":"HSMul.hSMul.arg_a1.Diffeomorphism_rule","declaration":"def HSMul.hSMul.arg_a1.Diffeomorphism_rule (K : Type u_1) [RCLike K] {X : Type u_2} [SciLean.Vec K X] {Y : Type u_3} [SciLean.Vec K Y] (r : K) (f : X → Y) (hr : r ≠ 0) (hf : SciLean.Diffeomorphism K f) : SciLean.Diffeomorphism K fun x => r • f x"}
{"name":"HMul.hMul.arg_a0.Diffeomorphism_rule","declaration":"def HMul.hMul.arg_a0.Diffeomorphism_rule (K : Type u_1) [RCLike K] {X : Type u_2} [SciLean.Vec K X] (f : X → K) (y : K) (hf : SciLean.Diffeomorphism K f) (hy : y ≠ 0) : SciLean.Diffeomorphism K fun x => f x * y"}
{"name":"SciLean.Diffeomorphism.id_rule","declaration":"theorem SciLean.Diffeomorphism.id_rule (K : Type u_1) [RCLike K] {X : Type u_2} [SciLean.Vec K X] : SciLean.Diffeomorphism K fun x => x"}
{"name":"Function.invFun.arg_f.cderiv_rule'","declaration":"theorem Function.invFun.arg_f.cderiv_rule' (K : Type u_1) [RCLike K] {X : Type u_4} [SciLean.Vec K X] {Y : Type u_2} [SciLean.Vec K Y] {Z : Type u_3} [SciLean.Vec K Z] (f : X → Y → Z) (z : Z) (hf : ∀ (x : X), SciLean.Diffeomorphism K (f x)) (hf' : SciLean.CDifferentiable K fun xy => f xy.1 xy.2) : (SciLean.cderiv K fun x => Function.invFun (f x) z) = fun x dx =>\n  let y := Function.invFun (f x) z;\n  let dfdx_y := SciLean.cderiv K f x dx y;\n  let df'dy := SciLean.cderiv K (Function.invFun (f x)) (f x y) dfdx_y;\n  -df'dy"}
{"name":"Function.invFun.arg_f_a1.cderiv_rule","declaration":"theorem Function.invFun.arg_f_a1.cderiv_rule (K : Type u_1) [RCLike K] {X : Type u_4} [SciLean.Vec K X] {Y : Type u_2} [SciLean.Vec K Y] {Z : Type u_3} [SciLean.Vec K Z] (f : X → Y → Z) (hf : ∀ (x : X), SciLean.Diffeomorphism K (f x)) (hf' : SciLean.CDifferentiable K fun xy => f xy.1 xy.2) : (SciLean.cderiv K fun x z => Function.invFun (f x) z) = fun x dx z =>\n  let y := Function.invFun (f x) z;\n  let dfdx_y := SciLean.cderiv K f x dx y;\n  let df'dy := SciLean.cderiv K (Function.invFun (f x)) (f x y) dfdx_y;\n  -df'dy"}
{"name":"SciLean.Diffeomorphism.comp_rule","declaration":"theorem SciLean.Diffeomorphism.comp_rule (K : Type u_1) [RCLike K] {X : Type u_4} [SciLean.Vec K X] {Y : Type u_2} [SciLean.Vec K Y] {Z : Type u_3} [SciLean.Vec K Z] (f : Y → Z) (g : X → Y) (hf : SciLean.Diffeomorphism K f) (hg : SciLean.Diffeomorphism K g) : SciLean.Diffeomorphism K fun x => f (g x)"}
{"name":"id.arg_a.Diffeomorphism_rule","declaration":"theorem id.arg_a.Diffeomorphism_rule (K : Type u_1) [RCLike K] {X : Type u_2} [SciLean.Vec K X] : SciLean.Diffeomorphism K fun x => id x"}
{"name":"SciLean.Diffeomorphism","declaration":"structure SciLean.Diffeomorphism (K : Type u_1) [RCLike K] {X : Type u_2} [SciLean.Vec K X] {Y : Type u_3} [SciLean.Vec K Y] (f : X → Y) : Prop"}
{"name":"Nat.iterate.arg_a1.Diffeomorphism_rule","declaration":"def Nat.iterate.arg_a1.Diffeomorphism_rule (K : Type u_1) [RCLike K] {X : Type u_2} [SciLean.Vec K X] (n : ℕ) (f : X → X) (hf : SciLean.Diffeomorphism K f) : SciLean.Diffeomorphism K fun x => f^[n] x"}
{"name":"Function.invFun.arg_fa1.CDifferentiable_rule","declaration":"theorem Function.invFun.arg_fa1.CDifferentiable_rule (K : Type u_1) [RCLike K] {X : Type u_4} [SciLean.Vec K X] {Y : Type u_2} [SciLean.Vec K Y] {Z : Type u_3} [SciLean.Vec K Z] {W : Type u_5} [SciLean.Vec K W] (f : X → Y → Z) (g : W → X) (h : W → Z) (hf : ∀ (x : X), SciLean.Diffeomorphism K (f x)) (hf' : SciLean.CDifferentiable K fun xy => f xy.1 xy.2) (hg : SciLean.CDifferentiable K g) (hh : SciLean.CDifferentiable K h) : SciLean.CDifferentiable K fun w => Function.invFun (f (g w)) (h w)"}
{"name":"Function.comp.arg_a0.Diffeomorphism_rule","declaration":"theorem Function.comp.arg_a0.Diffeomorphism_rule (K : Type u_1) [RCLike K] {X : Type u_4} [SciLean.Vec K X] {Y : Type u_2} [SciLean.Vec K Y] {Z : Type u_3} [SciLean.Vec K Z] (f : Y → Z) (g : X → Y) (hf : SciLean.Diffeomorphism K f) (hg : SciLean.Diffeomorphism K g) : SciLean.Diffeomorphism K fun x => (f ∘ g) x"}
{"name":"HAdd.hAdd.arg_a0.Diffeomorphism_rule","declaration":"theorem HAdd.hAdd.arg_a0.Diffeomorphism_rule (K : Type u_1) [RCLike K] {X : Type u_2} [SciLean.Vec K X] {Y : Type u_3} [SciLean.Vec K Y] (f : X → Y) (y : Y) (hf : SciLean.Diffeomorphism K f) : SciLean.Diffeomorphism K fun x => f x + y"}
{"name":"SciLean.Diffeomorphism.differentiable","declaration":"def SciLean.Diffeomorphism.differentiable {K : Type u_1} [RCLike K] {X : Type u_2} [SciLean.Vec K X] {Y : Type u_3} [SciLean.Vec K Y] {f : X → Y} (self : SciLean.Diffeomorphism K f) : SciLean.CDifferentiable K f"}
{"name":"SciLean.Diffeomorphism.locally_diffeo","declaration":"def SciLean.Diffeomorphism.locally_diffeo {K : Type u_1} [RCLike K] {X : Type u_2} [SciLean.Vec K X] {Y : Type u_3} [SciLean.Vec K Y] {f : X → Y} (self : SciLean.Diffeomorphism K f) (x : X) : Function.Bijective (SciLean.cderiv K f x)"}
{"name":"HMul.hMul.arg_a1.Diffeomorphism_rule","declaration":"def HMul.hMul.arg_a1.Diffeomorphism_rule (K : Type u_1) [RCLike K] {X : Type u_2} [SciLean.Vec K X] (y : K) (f : X → K) (hy : y ≠ 0) (hf : SciLean.Diffeomorphism K f) : SciLean.Diffeomorphism K fun x => y * f x"}
{"name":"SciLean.diffeomorphism_to_differentiables","declaration":"theorem SciLean.diffeomorphism_to_differentiables (K : Type u_1) [RCLike K] {X : Type u_2} [SciLean.Vec K X] {Y : Type u_3} [SciLean.Vec K Y] (f : X → Y) (hf : SciLean.Diffeomorphism K f) : SciLean.CDifferentiable K f"}
{"name":"HSub.hSub.arg_a1.Diffeomorphism_rule","declaration":"theorem HSub.hSub.arg_a1.Diffeomorphism_rule (K : Type u_1) [RCLike K] {X : Type u_2} [SciLean.Vec K X] {Y : Type u_3} [SciLean.Vec K Y] (y : Y) (f : X → Y) (hf : SciLean.Diffeomorphism K f) : SciLean.Diffeomorphism K fun x => y - f x"}
{"name":"HAdd.hAdd.arg_a1.Diffeomorphism_rule","declaration":"theorem HAdd.hAdd.arg_a1.Diffeomorphism_rule (K : Type u_1) [RCLike K] {X : Type u_2} [SciLean.Vec K X] {Y : Type u_3} [SciLean.Vec K Y] (y : Y) (f : X → Y) (hf : SciLean.Diffeomorphism K f) : SciLean.Diffeomorphism K fun x => y + f x"}
{"name":"SciLean.SciLean.cderiv.arg_dx.Bijective_rule","declaration":"theorem SciLean.SciLean.cderiv.arg_dx.Bijective_rule (K : Type u_1) [RCLike K] {X : Type u_2} [SciLean.Vec K X] {Y : Type u_3} [SciLean.Vec K Y] (f : X → Y) (x : X) (hf : SciLean.Diffeomorphism K f) : Function.Bijective fun dx => SciLean.cderiv K f x dx"}
{"name":"HDiv.hDiv.arg_a0.Diffeomorphism_rule","declaration":"def HDiv.hDiv.arg_a0.Diffeomorphism_rule (K : Type u_1) [RCLike K] {X : Type u_2} [SciLean.Vec K X] (f : X → K) (r : K) (hf : SciLean.Diffeomorphism K f) (hr : r ≠ 0) : SciLean.Diffeomorphism K fun x => f x / r"}
{"name":"SciLean.diffeomorphism_to_bijective","declaration":"theorem SciLean.diffeomorphism_to_bijective (K : Type u_1) [RCLike K] {X : Type u_2} [SciLean.Vec K X] {Y : Type u_3} [SciLean.Vec K Y] (f : X → Y) (hf : SciLean.Diffeomorphism K f) : Function.Bijective f"}
