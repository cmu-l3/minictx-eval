{"name":"SciLean.Meta.LetNormalize.LetNormalizeConfig.removeNumConst","declaration":"def SciLean.Meta.LetNormalize.LetNormalizeConfig.removeNumConst (self : SciLean.Meta.LetNormalize.LetNormalizeConfig) : Bool"}
{"name":"SciLean.Meta.LetNormalize.LetNormalizeConfig.removeTrivialLet","declaration":"def SciLean.Meta.LetNormalize.LetNormalizeConfig.removeTrivialLet (self : SciLean.Meta.LetNormalize.LetNormalizeConfig) : Bool"}
{"name":"SciLean.Meta.LetNormalize.LetNormalizeConfig.removeNoFVarLet","declaration":"def SciLean.Meta.LetNormalize.LetNormalizeConfig.removeNoFVarLet (self : SciLean.Meta.LetNormalize.LetNormalizeConfig) : Bool"}
{"name":"SciLean.Meta.LetNormalize.convLetNormalize","declaration":"def SciLean.Meta.LetNormalize.convLetNormalize  : Lean.Elab.Tactic.Tactic"}
{"name":"SciLean.Meta.LetNormalize.instBEqLetNormalizeConfig","declaration":"instance SciLean.Meta.LetNormalize.instBEqLetNormalizeConfig  : BEq SciLean.Meta.LetNormalize.LetNormalizeConfig"}
{"name":"SciLean.Meta.LetNormalize.LetNormalizeConfig.pullLetOutLambda","declaration":"def SciLean.Meta.LetNormalize.LetNormalizeConfig.pullLetOutLambda (self : SciLean.Meta.LetNormalize.LetNormalizeConfig) : Bool"}
{"name":"SciLean.Meta.LetNormalize.instReprLetNormalizeConfig","declaration":"instance SciLean.Meta.LetNormalize.instReprLetNormalizeConfig  : Repr SciLean.Meta.LetNormalize.LetNormalizeConfig"}
{"name":"SciLean.Meta.LetNormalize.isProjectionOfFVar","declaration":"/-- Is `e` in the form `p₁ (...(pₙ x))` where `pᵢ` are projections and `x` free variable?\n-/\ndef SciLean.Meta.LetNormalize.isProjectionOfFVar (e : Lean.Expr) : Lean.MetaM Bool"}
{"name":"SciLean.Meta.LetNormalize.let_normalize","declaration":"def SciLean.Meta.LetNormalize.let_normalize  : Lean.ParserDescr"}
{"name":"SciLean.Meta.LetNormalize.tacticLet_normalize","declaration":"def SciLean.Meta.LetNormalize.tacticLet_normalize  : Lean.ParserDescr"}
{"name":"SciLean.Meta.LetNormalize.LetNormalizeConfig.reduceProjections","declaration":"def SciLean.Meta.LetNormalize.LetNormalizeConfig.reduceProjections (self : SciLean.Meta.LetNormalize.LetNormalizeConfig) : Bool"}
{"name":"SciLean.Meta.LetNormalize.LetNormalizeConfig","declaration":"structure SciLean.Meta.LetNormalize.LetNormalizeConfig  : Type"}
{"name":"SciLean.Meta.LetNormalize.letNormalize","declaration":"/-- Normalizes let bindings in an expression\n\nTwo main normalizations are:\n\n1. nested let bindings`\n```\nlet x :=\n  let y := a + b\n  f y\ng x\n==>\nlet y := a + b\nlet x := f y\ng x\n```\n\n2. let bindings in application\n```\n(let x := 10; add x) (let y := 5; y + 1)\n==>\nlet x := 10\nlet y := 5\nadd x (y + 1)\n```\n\nAdditional optional normalizations:\n\nremove trivial let\n```\nlet y := x\ny\n==>\nx\n```\n\nremove no fvar let\n```\nlet x := 10\nx\n==>\n10\n```\n\nremove lambda let\n```\nlet f := fun x => x + x\nf 1\n==>\n1 + 1\n```\n\nsplit structure constuctors\n```\nlet z := (f x, g y)\nz\n==>\nlet z₁ := f x\nlet z₂ := g y\n==>\n(z₁, z₂)\n```\n-/\nopaque SciLean.Meta.LetNormalize.letNormalize (e : Lean.Expr) (config : SciLean.Meta.LetNormalize.LetNormalizeConfig) : Lean.MetaM Lean.Expr"}
{"name":"SciLean.Meta.LetNormalize.LetNormalizeConfig.mk","declaration":"ctor SciLean.Meta.LetNormalize.LetNormalizeConfig.mk (removeTrivialLet : Bool) (removeNoFVarLet : Bool) (removeLambdaLet : Bool) (removeFVarProjLet : Bool) (pullLetOutLambda : Bool) (splitStructureConstuctors : Bool) (reduceProjections : Bool) (removeNumConst : Bool) : SciLean.Meta.LetNormalize.LetNormalizeConfig"}
{"name":"SciLean.Meta.LetNormalize.elabLetNormalizeConfig","declaration":"def SciLean.Meta.LetNormalize.elabLetNormalizeConfig  : Lean.Syntax → Lean.Elab.TermElabM SciLean.Meta.LetNormalize.LetNormalizeConfig"}
{"name":"SciLean.Meta.LetNormalize.instInhabitedLetNormalizeConfig","declaration":"instance SciLean.Meta.LetNormalize.instInhabitedLetNormalizeConfig  : Inhabited SciLean.Meta.LetNormalize.LetNormalizeConfig"}
{"name":"SciLean.Meta.LetNormalize.config","declaration":"def SciLean.Meta.LetNormalize.config  : Lean.ParserDescr"}
{"name":"SciLean.Meta.LetNormalize.LetNormalizeConfig.removeFVarProjLet","declaration":"def SciLean.Meta.LetNormalize.LetNormalizeConfig.removeFVarProjLet (self : SciLean.Meta.LetNormalize.LetNormalizeConfig) : Bool"}
{"name":"SciLean.Meta.LetNormalize.LetNormalizeConfig.splitStructureConstuctors","declaration":"def SciLean.Meta.LetNormalize.LetNormalizeConfig.splitStructureConstuctors (self : SciLean.Meta.LetNormalize.LetNormalizeConfig) : Bool"}
{"name":"SciLean.Meta.LetNormalize.LetNormalizeConfig.removeLambdaLet","declaration":"def SciLean.Meta.LetNormalize.LetNormalizeConfig.removeLambdaLet (self : SciLean.Meta.LetNormalize.LetNormalizeConfig) : Bool"}
{"name":"SciLean.Meta.LetNormalize.tacticLet_normalize_","declaration":"def SciLean.Meta.LetNormalize.tacticLet_normalize_  : Lean.ParserDescr"}
