{"name":"SciLean.FwdFDeriv.HDiv.hDiv.arg_a0a1.fwdFDeriv_rule_at","declaration":"theorem SciLean.FwdFDeriv.HDiv.hDiv.arg_a0a1.fwdFDeriv_rule_at {K : Type u_1} [RCLike K] {X : Type u_2} [NormedAddCommGroup X] [NormedSpace K X] (x : X) (f : X → K) (g : X → K) (hf : DifferentiableAt K f x) (hg : DifferentiableAt K g x) (hx : g x ≠ 0) : SciLean.fwdFDeriv K (fun x => f x / g x) x = fun dx =>\n  let ydy := SciLean.fwdFDeriv K f x dx;\n  let zdz := SciLean.fwdFDeriv K g x dx;\n  (ydy.1 / zdz.1, (ydy.2 * zdz.1 - ydy.1 * zdz.2) / zdz.1 ^ 2)"}
{"name":"SciLean.FwdFDeriv.ite.arg_te.fwdFDeriv_rule","declaration":"theorem SciLean.FwdFDeriv.ite.arg_te.fwdFDeriv_rule {K : Type u_3} [RCLike K] {X : Type u_1} [NormedAddCommGroup X] [NormedSpace K X] {Y : Type u_2} [NormedAddCommGroup Y] [NormedSpace K Y] (c : Prop) [dec : Decidable c] (t : X → Y) (e : X → Y) : (SciLean.fwdFDeriv K fun x => if c then t x else e x) = fun y =>\n  if c then SciLean.fwdFDeriv K t y else SciLean.fwdFDeriv K e y"}
{"name":"SciLean.FwdFDeriv.HSub.hSub.arg_a0a1.fwdFDeriv_rule_at","declaration":"theorem SciLean.FwdFDeriv.HSub.hSub.arg_a0a1.fwdFDeriv_rule_at {K : Type u_3} [RCLike K] {X : Type u_2} [NormedAddCommGroup X] [NormedSpace K X] {Y : Type u_1} [NormedAddCommGroup Y] [NormedSpace K Y] (x : X) (f : X → Y) (g : X → Y) (hf : DifferentiableAt K f x) (hg : DifferentiableAt K g x) : SciLean.fwdFDeriv K (fun x => f x - g x) x = fun dx => SciLean.fwdFDeriv K f x dx - SciLean.fwdFDeriv K g x dx"}
{"name":"SciLean.FwdFDeriv.id_rule","declaration":"theorem SciLean.FwdFDeriv.id_rule {K : Type u_2} [RCLike K] {X : Type u_1} [NormedAddCommGroup X] [NormedSpace K X] : (SciLean.fwdFDeriv K fun x => x) = fun x dx => (x, dx)"}
{"name":"SciLean.FwdFDeriv.HMul.hMul.arg_a0a1.fwdFDeriv_rule_at","declaration":"theorem SciLean.FwdFDeriv.HMul.hMul.arg_a0a1.fwdFDeriv_rule_at {K : Type u_1} [RCLike K] {X : Type u_2} [NormedAddCommGroup X] [NormedSpace K X] (x : X) (f : X → K) (g : X → K) (hf : DifferentiableAt K f x) (hg : DifferentiableAt K g x) : SciLean.fwdFDeriv K (fun x => f x * g x) x = fun dx =>\n  let ydy := SciLean.fwdFDeriv K f x dx;\n  let zdz := SciLean.fwdFDeriv K g x dx;\n  (ydy.1 * zdz.1, zdz.2 * ydy.1 + ydy.2 * zdz.1)"}
{"name":"SciLean.FwdFDeriv.Prod.fst.arg_self.fwdFDeriv_rule_at","declaration":"theorem SciLean.FwdFDeriv.Prod.fst.arg_self.fwdFDeriv_rule_at {K : Type u_4} [RCLike K] {X : Type u_3} [NormedAddCommGroup X] [NormedSpace K X] {Y : Type u_1} [NormedAddCommGroup Y] [NormedSpace K Y] {Z : Type u_2} [NormedAddCommGroup Z] [NormedSpace K Z] (x : X) (f : X → Y × Z) (hf : DifferentiableAt K f x) : SciLean.fwdFDeriv K (fun x => (f x).1) x = fun dx =>\n  let yzdyz := SciLean.fwdFDeriv K f x dx;\n  (yzdyz.1.1, yzdyz.2.1)"}
{"name":"SciLean.FwdFDeriv.HPow.hPow.arg_a0.fwdFDeriv_rule_at","declaration":"def SciLean.FwdFDeriv.HPow.hPow.arg_a0.fwdFDeriv_rule_at {K : Type u_1} [RCLike K] {X : Type u_2} [NormedAddCommGroup X] [NormedSpace K X] (n : ℕ) (x : X) (f : X → K) (hf : DifferentiableAt K f x) : SciLean.fwdFDeriv K (fun x => f x ^ n) x = fun dx =>\n  let ydy := SciLean.fwdFDeriv K f x dx;\n  (ydy.1 ^ n, ↑n * ydy.2 * ydy.1 ^ (n - 1))"}
{"name":"SciLean.FwdFDeriv.const_rule","declaration":"theorem SciLean.FwdFDeriv.const_rule {K : Type u_3} [RCLike K] {X : Type u_1} [NormedAddCommGroup X] [NormedSpace K X] {Y : Type u_2} [NormedAddCommGroup Y] [NormedSpace K Y] (y : Y) : (SciLean.fwdFDeriv K fun x => y) = fun x dx => (y, 0)"}
{"name":"SciLean.FwdFDeriv.pi_rule_at","declaration":"theorem SciLean.FwdFDeriv.pi_rule_at {K : Type u_3} [RCLike K] {X : Type u_2} [NormedAddCommGroup X] [NormedSpace K X] {ι : Type u_4} [Fintype ι] {E : ι → Type u_1} [(j : ι) → NormedAddCommGroup (E j)] [(j : ι) → NormedSpace K (E j)] (x : X) (f : X → (i : ι) → E i) (hf : ∀ (i : ι), DifferentiableAt K (fun x => f x i) x) : SciLean.fwdFDeriv K (fun x i => f x i) x = fun dx =>\n  (fun i => f x i, fun i => (SciLean.fwdFDeriv K (fun x => f x i) x dx).2)"}
{"name":"SciLean.FwdFDeriv.Prod.mk.arg_fstsnd.fwdFDeriv_rule_at","declaration":"theorem SciLean.FwdFDeriv.Prod.mk.arg_fstsnd.fwdFDeriv_rule_at {K : Type u_3} [RCLike K] {X : Type u_2} [NormedAddCommGroup X] [NormedSpace K X] {Y : Type u_1} [NormedAddCommGroup Y] [NormedSpace K Y] {Z : Type u_4} [NormedAddCommGroup Z] [NormedSpace K Z] (x : X) (g : X → Y) (hg : DifferentiableAt K g x) (f : X → Z) (hf : DifferentiableAt K f x) : SciLean.fwdFDeriv K (fun x => (g x, f x)) x = fun dx =>\n  let ydy := SciLean.fwdFDeriv K g x dx;\n  let zdz := SciLean.fwdFDeriv K f x dx;\n  ((ydy.1, zdz.1), ydy.2, zdz.2)"}
{"name":"SciLean.FwdFDeriv.HAdd.hAdd.arg_a0a1.fwdFDeriv_rule_at","declaration":"theorem SciLean.FwdFDeriv.HAdd.hAdd.arg_a0a1.fwdFDeriv_rule_at {K : Type u_3} [RCLike K] {X : Type u_2} [NormedAddCommGroup X] [NormedSpace K X] {Y : Type u_1} [NormedAddCommGroup Y] [NormedSpace K Y] (x : X) (f : X → Y) (g : X → Y) (hf : DifferentiableAt K f x) (hg : DifferentiableAt K g x) : SciLean.fwdFDeriv K (fun x => f x + g x) x = fun dx => SciLean.fwdFDeriv K f x dx + SciLean.fwdFDeriv K g x dx"}
{"name":"SciLean.FwdFDeriv.let_rule_at","declaration":"theorem SciLean.FwdFDeriv.let_rule_at {K : Type u_4} [RCLike K] {X : Type u_2} [NormedAddCommGroup X] [NormedSpace K X] {Y : Type u_3} [NormedAddCommGroup Y] [NormedSpace K Y] {Z : Type u_1} [NormedAddCommGroup Z] [NormedSpace K Z] (x : X) (f : X → Y → Z) (g : X → Y) (hf : DifferentiableAt K (fun xy => f xy.1 xy.2) (x, g x)) (hg : DifferentiableAt K g x) : SciLean.fwdFDeriv K\n    (fun x =>\n      let y := g x;\n      f x y)\n    x =\n  fun dx =>\n  let ydy := SciLean.fwdFDeriv K g x dx;\n  let zdz := SciLean.fwdFDeriv K (fun xy => f xy.1 xy.2) (x, ydy.1) (dx, ydy.2);\n  zdz"}
{"name":"SciLean.FwdFDeriv.comp_rule_at","declaration":"theorem SciLean.FwdFDeriv.comp_rule_at {K : Type u_3} [RCLike K] {X : Type u_4} [NormedAddCommGroup X] [NormedSpace K X] {Y : Type u_2} [NormedAddCommGroup Y] [NormedSpace K Y] {Z : Type u_1} [NormedAddCommGroup Z] [NormedSpace K Z] (x : X) (f : Y → Z) (g : X → Y) (hf : DifferentiableAt K f (g x)) (hg : DifferentiableAt K g x) : SciLean.fwdFDeriv K (fun x => f (g x)) x = fun dx =>\n  let ydy := SciLean.fwdFDeriv K g x dx;\n  let zdz := SciLean.fwdFDeriv K f ydy.1 ydy.2;\n  zdz"}
{"name":"SciLean.FwdFDeriv.Neg.neg.arg_a0.fwdFDeriv_rule","declaration":"theorem SciLean.FwdFDeriv.Neg.neg.arg_a0.fwdFDeriv_rule {K : Type u_3} [RCLike K] {X : Type u_1} [NormedAddCommGroup X] [NormedSpace K X] {Y : Type u_2} [NormedAddCommGroup Y] [NormedSpace K Y] (x : X) (f : X → Y) : SciLean.fwdFDeriv K (fun x => -f x) x = fun dx => -SciLean.fwdFDeriv K f x dx"}
{"name":"SciLean.FwdFDeriv.dite.arg_te.fwdFDeriv_rule","declaration":"theorem SciLean.FwdFDeriv.dite.arg_te.fwdFDeriv_rule {K : Type u_3} [RCLike K] {X : Type u_1} [NormedAddCommGroup X] [NormedSpace K X] {Y : Type u_2} [NormedAddCommGroup Y] [NormedSpace K Y] (c : Prop) [dec : Decidable c] (t : c → X → Y) (e : ¬c → X → Y) : (SciLean.fwdFDeriv K fun x => if x_1 : c then t x_1 x else e x_1 x) = fun y =>\n  if p : c then SciLean.fwdFDeriv K (t p) y else SciLean.fwdFDeriv K (e p) y"}
{"name":"SciLean.FwdFDeriv.apply_rule","declaration":"theorem SciLean.FwdFDeriv.apply_rule {K : Type u_3} [RCLike K] {ι : Type u_1} [Fintype ι] {E : ι → Type u_2} [(j : ι) → NormedAddCommGroup (E j)] [(j : ι) → NormedSpace K (E j)] (i : ι) : (SciLean.fwdFDeriv K fun x => x i) = fun x dx => (x i, dx i)"}
{"name":"SciLean.FwdFDeriv.Prod.snd.arg_self.fwdFDeriv_rule_at","declaration":"theorem SciLean.FwdFDeriv.Prod.snd.arg_self.fwdFDeriv_rule_at {K : Type u_4} [RCLike K] {X : Type u_3} [NormedAddCommGroup X] [NormedSpace K X] {Y : Type u_1} [NormedAddCommGroup Y] [NormedSpace K Y] {Z : Type u_2} [NormedAddCommGroup Z] [NormedSpace K Z] (x : X) (f : X → Y × Z) (hf : DifferentiableAt K f x) : SciLean.fwdFDeriv K (fun x => (f x).2) x = fun dx =>\n  let yzdyz := SciLean.fwdFDeriv K f x dx;\n  (yzdyz.1.2, yzdyz.2.2)"}
{"name":"SciLean.fwdFDeriv","declaration":"def SciLean.fwdFDeriv (K : Type u_1) [RCLike K] {X : Type u_2} [NormedAddCommGroup X] [NormedSpace K X] {Y : Type u_3} [NormedAddCommGroup Y] [NormedSpace K Y] (f : X → Y) (x : X) (dx : X) : Y × Y"}
{"name":"SciLean.FwdFDeriv.FinType.sum.arg_f.fwdFDeriv_rule_at","declaration":"theorem SciLean.FwdFDeriv.FinType.sum.arg_f.fwdFDeriv_rule_at {K : Type u_3} [RCLike K] {X : Type u_2} [NormedAddCommGroup X] [NormedSpace K X] {Y : Type u_1} [NormedAddCommGroup Y] [NormedSpace K Y] {ι : Type u_4} [Fintype ι] (x : X) (f : X → ι → Y) (hf : ∀ (i : ι), DifferentiableAt K (fun x => f x i) x) : SciLean.fwdFDeriv K (fun x => Finset.sum Finset.univ fun i => f x i) x = fun dx =>\n  let ydy := fun i => SciLean.fwdFDeriv K (fun x => f x i) x dx;\n  Finset.sum Finset.univ fun i => ydy i"}
{"name":"SciLean.FwdFDeriv.HSMul.hSMul.arg_a0a1.fwdFDeriv_rule_at","declaration":"theorem SciLean.FwdFDeriv.HSMul.hSMul.arg_a0a1.fwdFDeriv_rule_at {K : Type u_1} [RCLike K] {X : Type u_2} [NormedAddCommGroup X] [NormedSpace K X] {Y : Type u_3} [NormedAddCommGroup Y] [NormedSpace K Y] (x : X) (f : X → K) (g : X → Y) (hf : DifferentiableAt K f x) (hg : DifferentiableAt K g x) : SciLean.fwdFDeriv K (fun x => f x • g x) x = fun dx =>\n  let ydy := SciLean.fwdFDeriv K f x dx;\n  let zdz := SciLean.fwdFDeriv K g x dx;\n  (ydy.1 • zdz.1, ydy.1 • zdz.2 + ydy.2 • zdz.1)"}
