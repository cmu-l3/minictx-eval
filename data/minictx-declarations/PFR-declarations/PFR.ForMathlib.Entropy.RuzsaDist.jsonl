{"name":"ent_of_diff_le","declaration":"/-- The **improved entropic Ruzsa triangle inequality**. -/\ntheorem ent_of_diff_le {Ω : Type u_1} {G : Type u_5} [mΩ : MeasurableSpace Ω] {μ : MeasureTheory.Measure Ω} [hG : MeasurableSpace G] [MeasurableSingletonClass G] [AddCommGroup G] [MeasurableSub₂ G] [Countable G] (X : Ω → G) (Y : Ω → G) (Z : Ω → G) (hX : Measurable X) (hY : Measurable Y) (hZ : Measurable Z) (h : ProbabilityTheory.IndepFun (⟨X, Y⟩) Z μ) [MeasureTheory.IsProbabilityMeasure μ] [FiniteRange X] [FiniteRange Y] [FiniteRange Z] : H[X - Y ; μ] ≤ H[X - Z ; μ] + H[Z - Y ; μ] - H[Z ; μ]"}
{"name":"condRuzsaDist'_eq_sum","declaration":"/-- Explicit formula for conditional Ruzsa distance $d[X ; Y|W]$. -/\ntheorem condRuzsaDist'_eq_sum {Ω : Type u_1} {Ω' : Type u_2} {G : Type u_5} {T : Type u_6} [mΩ : MeasurableSpace Ω] [mΩ' : MeasurableSpace Ω'] [hG : MeasurableSpace G] [MeasurableSingletonClass G] [AddCommGroup G] [Countable G] [Countable T] [MeasurableSpace T] [MeasurableSingletonClass T] {X : Ω → G} {Y : Ω' → G} {W : Ω' → T} (hY : Measurable Y) (hW : Measurable W) (μ : MeasureTheory.Measure Ω) (μ' : MeasureTheory.Measure Ω') [MeasureTheory.IsFiniteMeasure μ'] [FiniteRange W] : d[X ; μ # Y | W ; μ'] =\n  Finset.sum (FiniteRange.toFinset W) fun w =>\n    (↑↑μ' (W ⁻¹' {w})).toReal * d[X ; μ # Y ; ProbabilityTheory.cond μ' (W ⁻¹' {w})]"}
{"name":"«termD[_|_#_|_]».delab","declaration":"/-- Pretty printer defined by `notation3` command. -/\ndef «termD[_|_#_|_]».delab  : Lean.PrettyPrinter.Delaborator.Delab"}
{"name":"condRuzsaDist'_of_copy","declaration":"theorem condRuzsaDist'_of_copy {Ω : Type u_1} {Ω' : Type u_2} {Ω'' : Type u_3} {Ω''' : Type u_4} {G : Type u_5} {T : Type u_6} [mΩ : MeasurableSpace Ω] {μ : MeasureTheory.Measure Ω} [mΩ' : MeasurableSpace Ω'] {μ' : MeasureTheory.Measure Ω'} [mΩ'' : MeasurableSpace Ω''] {μ'' : MeasureTheory.Measure Ω''} [mΩ''' : MeasurableSpace Ω'''] {μ''' : MeasureTheory.Measure Ω'''} [hG : MeasurableSpace G] [MeasurableSingletonClass G] [AddCommGroup G] [Countable G] [Countable T] [MeasurableSpace T] [MeasurableSingletonClass T] (X : Ω → G) {Y : Ω' → G} (hY : Measurable Y) {W : Ω' → T} (hW : Measurable W) (X' : Ω'' → G) {Y' : Ω''' → G} (hY' : Measurable Y') {W' : Ω''' → T} (hW' : Measurable W') [MeasureTheory.IsFiniteMeasure μ'] [MeasureTheory.IsFiniteMeasure μ'''] (h1 : ProbabilityTheory.IdentDistrib X X' μ μ'') (h2 : ProbabilityTheory.IdentDistrib (⟨Y, W⟩) (⟨Y', W'⟩) μ' μ''') [FiniteRange W] [FiniteRange W'] : d[X ; μ # Y | W ; μ'] = d[X' ; μ'' # Y' | W' ; μ''']"}
{"name":"condRuzsaDist_def","declaration":"theorem condRuzsaDist_def {S : Type u_7} {Ω : Type u_1} {Ω' : Type u_2} {G : Type u_5} {T : Type u_6} [mΩ : MeasurableSpace Ω] [mΩ' : MeasurableSpace Ω'] [hG : MeasurableSpace G] [MeasurableSingletonClass G] [AddCommGroup G] [Countable G] [MeasurableSpace S] [MeasurableSpace T] (X : Ω → G) (Z : Ω → S) (Y : Ω' → G) (W : Ω' → T) (μ : MeasureTheory.Measure Ω) [MeasureTheory.IsFiniteMeasure μ] (μ' : MeasureTheory.Measure Ω') [MeasureTheory.IsFiniteMeasure μ'] : d[X | Z ; μ # Y | W ; μ'] =\n  dk[ProbabilityTheory.condDistrib X Z μ ; MeasureTheory.Measure.map Z μ # ProbabilityTheory.condDistrib Y W μ' ;\n    MeasureTheory.Measure.map W μ']"}
{"name":"continuous_rdist_restrict_probabilityMeasure","declaration":"/-- Ruzsa distance depends continuously on the measure. -/\ntheorem continuous_rdist_restrict_probabilityMeasure {G : Type u_5} [hG : MeasurableSpace G] [AddCommGroup G] [Countable G] [Fintype G] [TopologicalSpace G] [DiscreteTopology G] [BorelSpace G] : Continuous fun μ => d[id ; ↑μ.1 # id ; ↑μ.2]"}
{"name":"«termD[_;_#_|_;_]».delab","declaration":"/-- Pretty printer defined by `notation3` command. -/\ndef «termD[_;_#_|_;_]».delab  : Lean.PrettyPrinter.Delaborator.Delab"}
{"name":"condRuzsaDist_le'_prod","declaration":"theorem condRuzsaDist_le'_prod {Ω : Type u_1} {Ω' : Type u_2} {G : Type u_5} {T : Type u_6} [mΩ : MeasurableSpace Ω] (μ : MeasureTheory.Measure Ω) [mΩ' : MeasurableSpace Ω'] (μ' : MeasureTheory.Measure Ω') [hG : MeasurableSpace G] [MeasurableSingletonClass G] [AddCommGroup G] [MeasurableSub₂ G] [Countable G] [Countable T] [Nonempty T] [MeasurableSpace T] [MeasurableSingletonClass T] {X : Ω → G} {Y : Ω' → G} {W : Ω' → T} {Z : Ω' → T} [MeasureTheory.IsProbabilityMeasure μ] [MeasureTheory.IsProbabilityMeasure μ'] (hX : Measurable X) (hY : Measurable Y) (hW : Measurable W) (hZ : Measurable Z) [FiniteRange X] [FiniteRange Y] [FiniteRange W] [FiniteRange Z] : d[X ; μ # Y | ⟨W, Z⟩ ; μ'] ≤ d[X ; μ # Y | Z ; μ'] + I[Y : W|Z;μ'] / 2"}
{"name":"rdist_add_const'","declaration":"/-- A variant of `rdist_add_const` where one adds constants to both variables. -/\ntheorem rdist_add_const' {Ω : Type u_1} {Ω' : Type u_2} {G : Type u_5} [mΩ : MeasurableSpace Ω] {μ : MeasureTheory.Measure Ω} [mΩ' : MeasurableSpace Ω'] {μ' : MeasureTheory.Measure Ω'} [hG : MeasurableSpace G] [MeasurableSingletonClass G] [AddCommGroup G] [MeasurableSub₂ G] [MeasurableAdd₂ G] [Countable G] {X : Ω → G} {Y : Ω' → G} [FiniteRange X] [FiniteRange Y] [MeasureTheory.IsProbabilityMeasure μ] [MeasureTheory.IsProbabilityMeasure μ'] (c : G) (c' : G) (hX : Measurable X) (hY : Measurable Y) : d[X + fun x => c ; μ # Y + fun x => c' ; μ'] = d[X ; μ # Y ; μ']"}
{"name":"condRuzsaDist_symm","declaration":"/-- $$ d[X|Z; Y|W] = d[Y|W; X|Z]$$-/\ntheorem condRuzsaDist_symm {S : Type u_7} {Ω : Type u_1} {Ω' : Type u_2} {G : Type u_5} {T : Type u_6} [mΩ : MeasurableSpace Ω] {μ : MeasureTheory.Measure Ω} [mΩ' : MeasurableSpace Ω'] {μ' : MeasureTheory.Measure Ω'} [hG : MeasurableSpace G] [MeasurableSingletonClass G] [AddCommGroup G] [MeasurableSub₂ G] [Countable G] [Countable S] [Nonempty S] [MeasurableSpace S] [Countable T] [MeasurableSpace T] [MeasurableSingletonClass S] [MeasurableSingletonClass T] {X : Ω → G} {Z : Ω → S} {Y : Ω' → G} {W : Ω' → T} (hZ : Measurable Z) (hW : Measurable W) [MeasureTheory.IsProbabilityMeasure μ] [MeasureTheory.IsProbabilityMeasure μ'] [FiniteRange Z] [FiniteRange W] : d[X | Z ; μ # Y | W ; μ'] = d[Y | W ; μ' # X | Z ; μ]"}
{"name":"entropy_sub_entropy_eq_condRuzsaDist_add","declaration":"theorem entropy_sub_entropy_eq_condRuzsaDist_add {Ω : Type u_1} {Ω' : Type u_2} {G : Type u_5} [mΩ : MeasurableSpace Ω] (μ : MeasureTheory.Measure Ω) [mΩ' : MeasurableSpace Ω'] {μ' : MeasureTheory.Measure Ω'} [hG : MeasurableSpace G] [MeasurableSingletonClass G] [AddCommGroup G] [MeasurableSub₂ G] [MeasurableAdd₂ G] [Countable G] [ElementaryAddCommGroup G 2] [MeasureTheory.IsProbabilityMeasure μ] [MeasureTheory.IsProbabilityMeasure μ'] {X : Ω → G} {Y : Ω' → G} {Z : Ω' → G} (hX : Measurable X) (hY : Measurable Y) (hZ : Measurable Z) (h : ProbabilityTheory.IndepFun Y Z μ') [FiniteRange X] [FiniteRange Z] [FiniteRange Y] : H[Y + Z ; μ'] - H[Y ; μ'] = d[Y ; μ' # Z ; μ'] + H[Z ; μ'] / 2 - H[Y ; μ'] / 2"}
{"name":"condRuzsaDist_diff_le''","declaration":"theorem condRuzsaDist_diff_le'' {Ω : Type u_1} {Ω' : Type u_2} {G : Type u_5} [mΩ : MeasurableSpace Ω] (μ : MeasureTheory.Measure Ω) [mΩ' : MeasurableSpace Ω'] {μ' : MeasureTheory.Measure Ω'} [hG : MeasurableSpace G] [MeasurableSingletonClass G] [AddCommGroup G] [MeasurableSub₂ G] [MeasurableAdd₂ G] [Countable G] [MeasureTheory.IsProbabilityMeasure μ] [MeasureTheory.IsProbabilityMeasure μ'] {X : Ω → G} {Y : Ω' → G} {Z : Ω' → G} (hX : Measurable X) (hY : Measurable Y) (hZ : Measurable Z) (h : ProbabilityTheory.IndepFun Y Z μ') [FiniteRange X] [FiniteRange Z] [FiniteRange Y] : d[X ; μ # Y | Y + Z ; μ'] - d[X ; μ # Y ; μ'] ≤ (H[Y + Z ; μ'] - H[Z ; μ']) / 2"}
{"name":"condRuszaDist_zero_left","declaration":"theorem condRuszaDist_zero_left {S : Type u_7} {Ω : Type u_1} {Ω' : Type u_2} {G : Type u_5} {T : Type u_6} [mΩ : MeasurableSpace Ω] [mΩ' : MeasurableSpace Ω'] [hG : MeasurableSpace G] [MeasurableSingletonClass G] [AddCommGroup G] [Countable G] [MeasurableSpace S] [MeasurableSpace T] (X : Ω → G) (Z : Ω → S) (Y : Ω' → G) (W : Ω' → T) (μ' : MeasureTheory.Measure Ω') [MeasureTheory.IsFiniteMeasure μ'] : d[X | Z ; 0 # Y | W ; μ'] = 0"}
{"name":"ent_of_proj_le","declaration":"/-- If $G$ is an additive group and $X$ is a $G$-valued random variable and\n$H\\leq G$ is a finite subgroup then, with $\\pi:G\\to G/H$ the natural homomorphism we have\n(where $U_H$ is uniform on $H$) $\\mathbb{H}(\\pi(X))\\leq 2d[X;U_H].$ -/\ntheorem ent_of_proj_le {Ω : Type u_1} {Ω' : Type u_2} {G : Type u_5} [mΩ : MeasurableSpace Ω] {μ : MeasureTheory.Measure Ω} [mΩ' : MeasurableSpace Ω'] {μ' : MeasureTheory.Measure Ω'} [hG : MeasurableSpace G] [MeasurableSingletonClass G] [AddCommGroup G] [MeasurableSub₂ G] [Countable G] {X : Ω → G} {UH : Ω' → G} [FiniteRange X] [FiniteRange UH] [MeasureTheory.IsProbabilityMeasure μ] [MeasureTheory.IsProbabilityMeasure μ'] (hX : Measurable X) (hU : Measurable UH) {H : AddSubgroup G} [Finite ↥H] (hunif : ProbabilityTheory.IsUniform (↑H) UH μ') : H[⇑(QuotientAddGroup.mk' H) ∘ X ; μ] ≤ 2 * d[X ; μ # UH ; μ']"}
{"name":"ProbabilityTheory.IndepFun.rdist_eq","declaration":"/-- If $X, Y$ are independent $G$-random variables then\n$$ d[X ; Y] := H[X - Y] - H[X]/2 - H[Y]/2$$-/\ntheorem ProbabilityTheory.IndepFun.rdist_eq {Ω : Type u_1} {G : Type u_5} [mΩ : MeasurableSpace Ω] {μ : MeasureTheory.Measure Ω} [hG : MeasurableSpace G] [AddCommGroup G] [MeasurableSub₂ G] {X : Ω → G} [MeasureTheory.IsFiniteMeasure μ] {Y : Ω → G} (h : ProbabilityTheory.IndepFun X Y μ) (hX : Measurable X) (hY : Measurable Y) : d[X ; μ # Y ; μ] = H[X - Y ; μ] - H[X ; μ] / 2 - H[Y ; μ] / 2"}
{"name":"kaimanovich_vershik'","declaration":"/-- A version of the **Kaimanovich-Vershik inequality** with some variables negated. -/\ntheorem kaimanovich_vershik' {Ω : Type u_1} {G : Type u_5} [mΩ : MeasurableSpace Ω] {μ : MeasureTheory.Measure Ω} [hG : MeasurableSpace G] [MeasurableSingletonClass G] [AddCommGroup G] [MeasurableAdd₂ G] [Countable G] {X : Ω → G} {Y : Ω → G} {Z : Ω → G} (h : ProbabilityTheory.iIndepFun (fun x => hG) ![X, Y, Z] μ) (hX : Measurable X) (hY : Measurable Y) (hZ : Measurable Z) [MeasureTheory.IsProbabilityMeasure μ] [FiniteRange X] [FiniteRange Z] [FiniteRange Y] : H[X - (Y + Z) ; μ] - H[X - Y ; μ] ≤ H[Y + Z ; μ] - H[Y ; μ]"}
{"name":"comparison_of_ruzsa_distances","declaration":"theorem comparison_of_ruzsa_distances {Ω : Type u_1} {Ω' : Type u_2} {G : Type u_5} [mΩ : MeasurableSpace Ω] (μ : MeasureTheory.Measure Ω) [mΩ' : MeasurableSpace Ω'] {μ' : MeasureTheory.Measure Ω'} [hG : MeasurableSpace G] [MeasurableSingletonClass G] [AddCommGroup G] [MeasurableSub₂ G] [MeasurableAdd₂ G] [Countable G] [MeasureTheory.IsProbabilityMeasure μ] [MeasureTheory.IsProbabilityMeasure μ'] {X : Ω → G} {Y : Ω' → G} {Z : Ω' → G} (hX : Measurable X) (hY : Measurable Y) (hZ : Measurable Z) (h : ProbabilityTheory.IndepFun Y Z μ') [FiniteRange X] [FiniteRange Z] [FiniteRange Y] : d[X ; μ # Y + Z ; μ'] - d[X ; μ # Y ; μ'] ≤ (H[Y + Z ; μ'] - H[Y ; μ']) / 2 ∧\n  (ElementaryAddCommGroup G 2 → H[Y + Z ; μ'] - H[Y ; μ'] = d[Y ; μ' # Z ; μ'] + H[Z ; μ'] / 2 - H[Y ; μ'] / 2)"}
{"name":"«termD[_|_;_#_|_;_]».delab","declaration":"/-- Pretty printer defined by `notation3` command. -/\ndef «termD[_|_;_#_|_;_]».delab  : Lean.PrettyPrinter.Delaborator.Delab"}
{"name":"ent_bsg","declaration":"/-- The **entropic Balog-Szemerédi-Gowers inequality**. Let $A, B$ be $G$-valued random variables on\n$\\Omega$, and set $Z := A+B$. Then\n$$\\sum_{z} P[Z=z] d[(A | Z = z) ; (B | Z = z)] \\leq 3 I[A :B] + 2 H[Z] - H[A] - H[B]. $$\nTODO: remove the hypothesis of `Fintype G` from here and from `condIndep_copies'` -/\ntheorem ent_bsg {Ω : Type u_1} {G : Type u_5} [mΩ : MeasurableSpace Ω] {μ : MeasureTheory.Measure Ω} [hG : MeasurableSpace G] [MeasurableSingletonClass G] [AddCommGroup G] [MeasurableSub₂ G] [MeasurableAdd₂ G] [Countable G] [MeasureTheory.IsProbabilityMeasure μ] {A : Ω → G} {B : Ω → G} (hA : Measurable A) (hB : Measurable B) [Fintype G] : ∫ (x : G),\n    (fun z => d[A ; ProbabilityTheory.cond μ ((A + B) ⁻¹' {z}) # B ; ProbabilityTheory.cond μ ((A + B) ⁻¹' {z})])\n      x ∂MeasureTheory.Measure.map (A + B) μ ≤\n  3 * I[A : B ; μ] + 2 * H[A + B ; μ] - H[A ; μ] - H[B ; μ]"}
{"name":"rdist_zero_eq_half_ent","declaration":"/-- $$ d[X ; 0] = H[X] / 2 $$ -/\ntheorem rdist_zero_eq_half_ent {Ω : Type u_1} {Ω' : Type u_2} {G : Type u_5} [mΩ : MeasurableSpace Ω] {μ : MeasureTheory.Measure Ω} [mΩ' : MeasurableSpace Ω'] {μ' : MeasureTheory.Measure Ω'} [hG : MeasurableSpace G] [MeasurableSingletonClass G] [AddCommGroup G] [Countable G] {X : Ω → G} [MeasureTheory.IsFiniteMeasure μ] [MeasureTheory.IsProbabilityMeasure μ'] : d[X ; μ # fun x => 0 ; μ'] = H[X ; μ] / 2"}
{"name":"condRuzsaDist_of_const","declaration":"/-- Conditioning by a constant does not affect Ruzsa distance. -/\ntheorem condRuzsaDist_of_const {S : Type u_7} {Ω : Type u_1} {Ω' : Type u_2} {G : Type u_5} {T : Type u_6} [mΩ : MeasurableSpace Ω] {μ : MeasureTheory.Measure Ω} [mΩ' : MeasurableSpace Ω'] {μ' : MeasureTheory.Measure Ω'} [hG : MeasurableSpace G] [MeasurableSingletonClass G] [AddCommGroup G] [Countable G] [Countable S] [MeasurableSpace S] [Countable T] [MeasurableSpace T] [MeasurableSingletonClass S] [MeasurableSingletonClass T] {X : Ω → G} (hX : Measurable X) (Y : Ω' → G) (W : Ω' → T) (c : S) [MeasureTheory.IsProbabilityMeasure μ] [MeasureTheory.IsProbabilityMeasure μ'] [FiniteRange W] : d[X | fun x => c ; μ # Y | W ; μ'] = d[X ; μ # Y | W ; μ']"}
{"name":"«termD[_;_#_;_]»","declaration":"/-- The Ruzsa distance `rdist X Y` or $d[X ;Y]$ between two random variables is defined as\n$H[X'- Y'] - H[X']/2 - H[Y']/2$, where $X', Y'$ are independent copies of $X, Y$. -/\ndef «termD[_;_#_;_]»  : Lean.ParserDescr"}
{"name":"condRuzsaDist'_of_inj_map'","declaration":"theorem condRuzsaDist'_of_inj_map' {Ω : Type u_1} {Ω'' : Type u_3} {G : Type u_5} [mΩ : MeasurableSpace Ω] {μ : MeasureTheory.Measure Ω} [mΩ'' : MeasurableSpace Ω''] {μ'' : MeasureTheory.Measure Ω''} [hG : MeasurableSpace G] [MeasurableSingletonClass G] [AddCommGroup G] [MeasurableSub₂ G] [MeasurableAdd₂ G] [Countable G] [elem : ElementaryAddCommGroup G 2] [MeasureTheory.IsProbabilityMeasure μ] [MeasureTheory.IsProbabilityMeasure μ''] {A : Ω'' → G} {B : Ω → G} {C : Ω → G} (hA : Measurable A) (hB : Measurable B) (hC : Measurable C) [FiniteRange A] [FiniteRange B] [FiniteRange C] : d[A ; μ'' # B | B + C ; μ] = d[A ; μ'' # C | B + C ; μ]"}
{"name":"rdist_add_const","declaration":"/-- Adding a constant to a random variable does not change the Rusza distance. -/\ntheorem rdist_add_const {Ω : Type u_1} {Ω' : Type u_2} {G : Type u_5} [mΩ : MeasurableSpace Ω] {μ : MeasureTheory.Measure Ω} [mΩ' : MeasurableSpace Ω'] {μ' : MeasureTheory.Measure Ω'} [hG : MeasurableSpace G] [MeasurableSingletonClass G] [AddCommGroup G] [MeasurableSub₂ G] [Countable G] {X : Ω → G} {Y : Ω' → G} [FiniteRange X] [FiniteRange Y] {c : G} [MeasureTheory.IsProbabilityMeasure μ] [MeasureTheory.IsProbabilityMeasure μ'] (hX : Measurable X) (hY : Measurable Y) : d[X ; μ # Y + fun x => c ; μ'] = d[X ; μ # Y ; μ']"}
{"name":"diff_ent_le_rdist","declaration":"/-- $$|H[X] - H[Y]| \\leq 2 d[X ; Y]$$ -/\ntheorem diff_ent_le_rdist {Ω : Type u_1} {Ω' : Type u_2} {G : Type u_5} [mΩ : MeasurableSpace Ω] {μ : MeasureTheory.Measure Ω} [mΩ' : MeasurableSpace Ω'] {μ' : MeasureTheory.Measure Ω'} [hG : MeasurableSpace G] [MeasurableSingletonClass G] [AddCommGroup G] [MeasurableSub₂ G] [Countable G] {X : Ω → G} {Y : Ω' → G} [FiniteRange X] [FiniteRange Y] [MeasureTheory.IsProbabilityMeasure μ] [MeasureTheory.IsProbabilityMeasure μ'] (hX : Measurable X) (hY : Measurable Y) : |H[X ; μ] - H[Y ; μ']| ≤ 2 * d[X ; μ # Y ; μ']"}
{"name":"«termD[_#_|_]»","declaration":"/-- The conditional Ruzsa distance `d[X ; Y|W]`. -/\ndef «termD[_#_|_]»  : Lean.ParserDescr"}
{"name":"condRuzsaDist_eq_sum","declaration":"/-- Explicit formula for conditional Ruzsa distance $d[X|Z; Y|W]$. -/\ntheorem condRuzsaDist_eq_sum {S : Type u_7} {Ω : Type u_1} {Ω' : Type u_2} {G : Type u_5} {T : Type u_6} [mΩ : MeasurableSpace Ω] [mΩ' : MeasurableSpace Ω'] [hG : MeasurableSpace G] [MeasurableSingletonClass G] [AddCommGroup G] [Countable G] [Countable S] [MeasurableSpace S] [Countable T] [MeasurableSpace T] [MeasurableSingletonClass S] [MeasurableSingletonClass T] {X : Ω → G} {Z : Ω → S} {Y : Ω' → G} {W : Ω' → T} (hX : Measurable X) (hZ : Measurable Z) (hY : Measurable Y) (hW : Measurable W) (μ : MeasureTheory.Measure Ω) [MeasureTheory.IsFiniteMeasure μ] (μ' : MeasureTheory.Measure Ω') [MeasureTheory.IsFiniteMeasure μ'] [FiniteRange Z] [FiniteRange W] : d[X | Z ; μ # Y | W ; μ'] =\n  Finset.sum (FiniteRange.toFinset Z) fun z =>\n    Finset.sum (FiniteRange.toFinset W) fun w =>\n      (↑↑μ (Z ⁻¹' {z})).toReal * (↑↑μ' (W ⁻¹' {w})).toReal *\n        d[X ; ProbabilityTheory.cond μ (Z ⁻¹' {z}) # Y ; ProbabilityTheory.cond μ' (W ⁻¹' {w})]"}
{"name":"condRuzsaDist'_of_indep","declaration":"/-- Formula for conditional Ruzsa distance for independent sets of variables. -/\ntheorem condRuzsaDist'_of_indep {Ω : Type u_1} {G : Type u_5} {T : Type u_6} [mΩ : MeasurableSpace Ω] [hG : MeasurableSpace G] [MeasurableSingletonClass G] [AddCommGroup G] [MeasurableSub₂ G] [Countable G] [Countable T] [MeasurableSpace T] [MeasurableSingletonClass T] {X : Ω → G} {Y : Ω → G} {W : Ω → T} (hX : Measurable X) (hY : Measurable Y) (hW : Measurable W) (μ : MeasureTheory.Measure Ω) [MeasureTheory.IsProbabilityMeasure μ] (h : ProbabilityTheory.IndepFun X (⟨Y, W⟩) μ) [FiniteRange W] : d[X ; μ # Y | W ; μ] = H[X - Y | W ; μ] - H[X ; μ] / 2 - H[Y | W ; μ] / 2"}
{"name":"condRuzsaDist'_eq_integral","declaration":"/-- Explicit formula for conditional Ruzsa distance $d[X ; Y|W]$, in integral form. -/\ntheorem condRuzsaDist'_eq_integral {Ω : Type u_1} {Ω' : Type u_2} {G : Type u_5} {T : Type u_6} [mΩ : MeasurableSpace Ω] [mΩ' : MeasurableSpace Ω'] [hG : MeasurableSpace G] [MeasurableSingletonClass G] [AddCommGroup G] [Countable G] [Countable T] [MeasurableSpace T] [MeasurableSingletonClass T] (X : Ω → G) {Y : Ω' → G} {W : Ω' → T} (hY : Measurable Y) (hW : Measurable W) (μ : MeasureTheory.Measure Ω) (μ' : MeasureTheory.Measure Ω') [MeasureTheory.IsFiniteMeasure μ'] [FiniteRange W] : d[X ; μ # Y | W ; μ'] =\n  ∫ (x : T), (fun w => d[X ; μ # Y ; ProbabilityTheory.cond μ' (W ⁻¹' {w})]) x ∂MeasureTheory.Measure.map W μ'"}
{"name":"rdist_nonneg","declaration":"/-- $$ d[X ; Y] \\geq 0$$ -/\ntheorem rdist_nonneg {Ω : Type u_1} {Ω' : Type u_2} {G : Type u_5} [mΩ : MeasurableSpace Ω] {μ : MeasureTheory.Measure Ω} [mΩ' : MeasurableSpace Ω'] {μ' : MeasureTheory.Measure Ω'} [hG : MeasurableSpace G] [MeasurableSingletonClass G] [AddCommGroup G] [MeasurableSub₂ G] [Countable G] {X : Ω → G} {Y : Ω' → G} [FiniteRange X] [FiniteRange Y] [MeasureTheory.IsProbabilityMeasure μ] [MeasureTheory.IsProbabilityMeasure μ'] (hX : Measurable X) (hY : Measurable Y) : 0 ≤ d[X ; μ # Y ; μ']"}
{"name":"ProbabilityTheory.IdentDistrib.rdist_eq","declaration":"/-- If $X', Y'$ are copies of $X, Y$ respectively then $d[X' ; Y']=d[X ; Y]$. -/\ntheorem ProbabilityTheory.IdentDistrib.rdist_eq {Ω : Type u_1} {Ω' : Type u_2} {Ω'' : Type u_3} {Ω''' : Type u_4} {G : Type u_5} [mΩ : MeasurableSpace Ω] {μ : MeasureTheory.Measure Ω} [mΩ' : MeasurableSpace Ω'] {μ' : MeasureTheory.Measure Ω'} [mΩ'' : MeasurableSpace Ω''] {μ'' : MeasureTheory.Measure Ω''} [mΩ''' : MeasurableSpace Ω'''] {μ''' : MeasureTheory.Measure Ω'''} [hG : MeasurableSpace G] [AddCommGroup G] {X : Ω → G} {Y : Ω' → G} {X' : Ω'' → G} {Y' : Ω''' → G} (hX : ProbabilityTheory.IdentDistrib X X' μ μ'') (hY : ProbabilityTheory.IdentDistrib Y Y' μ' μ''') : d[X ; μ # Y ; μ'] = d[X' ; μ'' # Y' ; μ''']"}
{"name":"condRuzsaDist_comp_right","declaration":"theorem condRuzsaDist_comp_right {Ω : Type u_1} {Ω' : Type u_2} {G : Type u_5} {T : Type u_6} [mΩ : MeasurableSpace Ω] (μ : MeasureTheory.Measure Ω) [mΩ' : MeasurableSpace Ω'] (μ' : MeasureTheory.Measure Ω') [hG : MeasurableSpace G] [MeasurableSingletonClass G] [AddCommGroup G] [Countable G] [Countable T] [Nonempty T] [MeasurableSpace T] [MeasurableSingletonClass T] {T' : Type u_7} [Fintype T] [Fintype T'] [MeasurableSpace T'] [MeasurableSingletonClass T'] [MeasureTheory.IsFiniteMeasure μ'] (X : Ω → G) (Y : Ω' → G) (W : Ω' → T) (e : T → T') (hY : Measurable Y) (hW : Measurable W) (he : Measurable e) (h'e : Function.Injective e) : d[X ; μ # Y | e ∘ W ; μ'] = d[X ; μ # Y | W ; μ']"}
{"name":"diff_ent_le_rdist'","declaration":"/-- $$H[X - Y] - H[X] \\leq 2d[X ; Y]$$ -/\ntheorem diff_ent_le_rdist' {Ω : Type u_1} {G : Type u_5} [mΩ : MeasurableSpace Ω] {μ : MeasureTheory.Measure Ω} [hG : MeasurableSpace G] [MeasurableSingletonClass G] [AddCommGroup G] [MeasurableSub₂ G] [Countable G] {X : Ω → G} [FiniteRange X] [MeasureTheory.IsProbabilityMeasure μ] {Y : Ω → G} (hX : Measurable X) (hY : Measurable Y) (h : ProbabilityTheory.IndepFun X Y μ) [FiniteRange Y] : H[X - Y ; μ] - H[X ; μ] ≤ 2 * d[X ; μ # Y ; μ]"}
{"name":"«termD[_|_#_|_]»","declaration":"/-- The conditional Ruzsa distance `d[X|Z ; Y|W]`. -/\ndef «termD[_|_#_|_]»  : Lean.ParserDescr"}
{"name":"condRuzsaDist_le'","declaration":"theorem condRuzsaDist_le' {Ω : Type u_1} {Ω' : Type u_2} {G : Type u_5} {T : Type u_6} [mΩ : MeasurableSpace Ω] (μ : MeasureTheory.Measure Ω) [mΩ' : MeasurableSpace Ω'] (μ' : MeasureTheory.Measure Ω') [hG : MeasurableSpace G] [MeasurableSingletonClass G] [AddCommGroup G] [MeasurableSub₂ G] [Countable G] [Countable T] [Nonempty T] [MeasurableSpace T] [MeasurableSingletonClass T] {X : Ω → G} {Y : Ω' → G} {W : Ω' → T} [MeasureTheory.IsProbabilityMeasure μ] [MeasureTheory.IsProbabilityMeasure μ'] (hX : Measurable X) (hY : Measurable Y) (hW : Measurable W) [FiniteRange X] [FiniteRange Y] [FiniteRange W] : d[X ; μ # Y | W ; μ'] ≤ d[X ; μ # Y ; μ'] + I[Y : W ; μ'] / 2"}
{"name":"condRuszaDist_zero_right","declaration":"theorem condRuszaDist_zero_right {S : Type u_7} {Ω : Type u_1} {Ω' : Type u_2} {G : Type u_5} {T : Type u_6} [mΩ : MeasurableSpace Ω] [mΩ' : MeasurableSpace Ω'] [hG : MeasurableSpace G] [MeasurableSingletonClass G] [AddCommGroup G] [Countable G] [MeasurableSpace S] [MeasurableSpace T] (X : Ω → G) (Z : Ω → S) (Y : Ω' → G) (W : Ω' → T) (μ : MeasureTheory.Measure Ω) [MeasureTheory.IsFiniteMeasure μ] : d[X | Z ; μ # Y | W ; 0] = 0"}
{"name":"condRuzsaDist_eq_sum'","declaration":"/-- Explicit formula for conditional Ruzsa distance $d[X|Z; Y|W]$ in a fintype. -/\ntheorem condRuzsaDist_eq_sum' {S : Type u_7} {Ω : Type u_1} {Ω' : Type u_2} {G : Type u_5} {T : Type u_6} [mΩ : MeasurableSpace Ω] [mΩ' : MeasurableSpace Ω'] [hG : MeasurableSpace G] [MeasurableSingletonClass G] [AddCommGroup G] [Countable G] [Countable S] [MeasurableSpace S] [Countable T] [MeasurableSpace T] [MeasurableSingletonClass S] [MeasurableSingletonClass T] {X : Ω → G} {Z : Ω → S} {Y : Ω' → G} {W : Ω' → T} (hX : Measurable X) (hZ : Measurable Z) (hY : Measurable Y) (hW : Measurable W) (μ : MeasureTheory.Measure Ω) [MeasureTheory.IsFiniteMeasure μ] (μ' : MeasureTheory.Measure Ω') [MeasureTheory.IsFiniteMeasure μ'] [Fintype S] [Fintype T] : d[X | Z ; μ # Y | W ; μ'] =\n  Finset.sum Finset.univ fun z =>\n    Finset.sum Finset.univ fun w =>\n      (↑↑μ (Z ⁻¹' {z})).toReal * (↑↑μ' (W ⁻¹' {w})).toReal *\n        d[X ; ProbabilityTheory.cond μ (Z ⁻¹' {z}) # Y ; ProbabilityTheory.cond μ' (W ⁻¹' {w})]"}
{"name":"continuous_entropy_restrict_probabilityMeasure","declaration":"theorem continuous_entropy_restrict_probabilityMeasure {G : Type u_5} [hG : MeasurableSpace G] [Fintype G] [TopologicalSpace G] [DiscreteTopology G] [BorelSpace G] : Continuous fun μ => H[id ; ↑μ]"}
{"name":"condRuzsaDist'_of_inj_map","declaration":"theorem condRuzsaDist'_of_inj_map {Ω : Type u_1} {G : Type u_5} [mΩ : MeasurableSpace Ω] {μ : MeasureTheory.Measure Ω} [hG : MeasurableSpace G] [MeasurableSingletonClass G] [AddCommGroup G] [MeasurableSub₂ G] [MeasurableAdd₂ G] [Countable G] [MeasureTheory.IsProbabilityMeasure μ] [elem : ElementaryAddCommGroup G 2] {X : Ω → G} {B : Ω → G} {C : Ω → G} (hX : Measurable X) (hB : Measurable B) (hC : Measurable C) (h_indep : ProbabilityTheory.IndepFun X (⟨B, C⟩) μ) [FiniteRange X] [FiniteRange B] [FiniteRange C] : d[X ; μ # B | B + C ; μ] = d[X ; μ # C | B + C ; μ]"}
{"name":"rdist_def","declaration":"/-- Explicit formula for the Ruzsa distance. -/\ntheorem rdist_def {Ω : Type u_1} {Ω' : Type u_2} {G : Type u_5} [mΩ : MeasurableSpace Ω] [mΩ' : MeasurableSpace Ω'] [hG : MeasurableSpace G] [AddCommGroup G] (X : Ω → G) (Y : Ω' → G) (μ : MeasureTheory.Measure Ω) (μ' : MeasureTheory.Measure Ω') : d[X ; μ # Y ; μ'] =\n  H[fun x => x.1 - x.2 ; MeasureTheory.Measure.prod (MeasureTheory.Measure.map X μ) (MeasureTheory.Measure.map Y μ')] -\n      H[X ; μ] / 2 -\n    H[Y ; μ'] / 2"}
{"name":"condRuzsaDist'","declaration":"/-- The conditional Ruzsa distance `d[X ; Y|W]`. -/\ndef condRuzsaDist' {Ω : Type u_1} {Ω' : Type u_2} {G : Type u_5} {T : Type u_6} [mΩ : MeasurableSpace Ω] [mΩ' : MeasurableSpace Ω'] [hG : MeasurableSpace G] [MeasurableSingletonClass G] [AddCommGroup G] [Countable G] [MeasurableSpace T] (X : Ω → G) (Y : Ω' → G) (W : Ω' → T) (μ : autoParam (MeasureTheory.Measure Ω) _auto✝) (μ' : autoParam (MeasureTheory.Measure Ω') _auto✝) [MeasureTheory.IsFiniteMeasure μ'] : ℝ"}
{"name":"condRuzsaDist_diff_ofsum_le","declaration":"theorem condRuzsaDist_diff_ofsum_le {Ω : Type u_1} {Ω' : Type u_2} {G : Type u_5} [mΩ : MeasurableSpace Ω] (μ : MeasureTheory.Measure Ω) [mΩ' : MeasurableSpace Ω'] {μ' : MeasureTheory.Measure Ω'} [hG : MeasurableSpace G] [MeasurableSingletonClass G] [AddCommGroup G] [MeasurableSub₂ G] [MeasurableAdd₂ G] [Countable G] [MeasureTheory.IsProbabilityMeasure μ] [MeasureTheory.IsProbabilityMeasure μ'] {X : Ω → G} {Y : Ω' → G} {Z : Ω' → G} {Z' : Ω' → G} (hX : Measurable X) (hY : Measurable Y) (hZ : Measurable Z) (hZ' : Measurable Z') (h : ProbabilityTheory.iIndepFun (fun x => hG) ![Y, Z, Z'] μ') [FiniteRange X] [FiniteRange Z] [FiniteRange Y] [FiniteRange Z'] : d[X ; μ # Y + Z | Y + Z + Z' ; μ'] - d[X ; μ # Y ; μ'] ≤\n  (H[Y + Z + Z' ; μ'] + H[Y + Z ; μ'] - H[Y ; μ'] - H[Z' ; μ']) / 2"}
{"name":"rdist_symm","declaration":"/-- $$ d[X ; Y] = d[Y ; X]$$ -/\ntheorem rdist_symm {Ω : Type u_1} {Ω' : Type u_2} {G : Type u_5} [mΩ : MeasurableSpace Ω] {μ : MeasureTheory.Measure Ω} [mΩ' : MeasurableSpace Ω'] {μ' : MeasureTheory.Measure Ω'} [hG : MeasurableSpace G] [MeasurableSingletonClass G] [AddCommGroup G] [MeasurableSub₂ G] [Countable G] {X : Ω → G} {Y : Ω' → G} [MeasureTheory.IsFiniteMeasure μ] [MeasureTheory.IsFiniteMeasure μ'] : d[X ; μ # Y ; μ'] = d[Y ; μ' # X ; μ]"}
{"name":"rdist_of_inj","declaration":"/-- Applying an injective homomorphism does not affect Ruzsa distance. -/\ntheorem rdist_of_inj {Ω : Type u_1} {Ω' : Type u_2} {G : Type u_5} [mΩ : MeasurableSpace Ω] {μ : MeasureTheory.Measure Ω} [mΩ' : MeasurableSpace Ω'] {μ' : MeasureTheory.Measure Ω'} [hG : MeasurableSpace G] [MeasurableSingletonClass G] [AddCommGroup G] [Countable G] {X : Ω → G} {Y : Ω' → G} {H : Type u_7} [hH : MeasurableSpace H] [MeasurableSingletonClass H] [AddCommGroup H] [MeasurableSub₂ H] [MeasurableAdd₂ H] [Countable H] (hX : Measurable X) (hY : Measurable Y) (φ : G →+ H) (hφ : Function.Injective ⇑φ) [MeasureTheory.IsProbabilityMeasure μ] [MeasureTheory.IsProbabilityMeasure μ'] : d[⇑φ ∘ X ; μ # ⇑φ ∘ Y ; μ'] = d[X ; μ # Y ; μ']"}
{"name":"condRuzsaDist'_eq_sum'","declaration":"/-- Alternate formula for conditional Ruzsa distance $d[X ; Y|W]$ when T is a Fintype. -/\ntheorem condRuzsaDist'_eq_sum' {Ω : Type u_1} {Ω' : Type u_2} {G : Type u_5} {T : Type u_6} [mΩ : MeasurableSpace Ω] [mΩ' : MeasurableSpace Ω'] [hG : MeasurableSpace G] [MeasurableSingletonClass G] [AddCommGroup G] [Countable G] [Countable T] [MeasurableSpace T] [MeasurableSingletonClass T] {X : Ω → G} {Y : Ω' → G} {W : Ω' → T} (hY : Measurable Y) (hW : Measurable W) (μ : MeasureTheory.Measure Ω) (μ' : MeasureTheory.Measure Ω') [MeasureTheory.IsFiniteMeasure μ'] [Fintype T] : d[X ; μ # Y | W ; μ'] =\n  Finset.sum Finset.univ fun w => (↑↑μ' (W ⁻¹' {w})).toReal * d[X ; μ # Y ; ProbabilityTheory.cond μ' (W ⁻¹' {w})]"}
{"name":"condRuzsaDist_diff_le'","declaration":"theorem condRuzsaDist_diff_le' {Ω : Type u_1} {Ω' : Type u_2} {G : Type u_5} [mΩ : MeasurableSpace Ω] (μ : MeasureTheory.Measure Ω) [mΩ' : MeasurableSpace Ω'] {μ' : MeasureTheory.Measure Ω'} [hG : MeasurableSpace G] [MeasurableSingletonClass G] [AddCommGroup G] [MeasurableSub₂ G] [MeasurableAdd₂ G] [Countable G] [ElementaryAddCommGroup G 2] [MeasureTheory.IsProbabilityMeasure μ] [MeasureTheory.IsProbabilityMeasure μ'] {X : Ω → G} {Y : Ω' → G} {Z : Ω' → G} (hX : Measurable X) (hY : Measurable Y) (hZ : Measurable Z) (h : ProbabilityTheory.IndepFun Y Z μ') [FiniteRange X] [FiniteRange Z] [FiniteRange Y] : d[X ; μ # Y + Z ; μ'] - d[X ; μ # Y ; μ'] ≤ d[Y ; μ' # Z ; μ'] / 2 + H[Z ; μ'] / 4 - H[Y ; μ'] / 4"}
{"name":"condRuzsaDist_of_indep","declaration":"/-- If $(X,Z)$ and $(Y,W)$ are independent, then\n$$ d[X | Z ; Y | W] = H[X'- Y'|Z', W'] - H[X'|Z']/2 - H[Y'|W']/2$$\n-/\ntheorem condRuzsaDist_of_indep {S : Type u_7} {Ω : Type u_1} {G : Type u_5} {T : Type u_6} [mΩ : MeasurableSpace Ω] [hG : MeasurableSpace G] [MeasurableSingletonClass G] [AddCommGroup G] [MeasurableSub₂ G] [Countable G] [Countable S] [MeasurableSpace S] [Countable T] [MeasurableSpace T] [MeasurableSingletonClass S] [MeasurableSingletonClass T] {X : Ω → G} {Z : Ω → S} {Y : Ω → G} {W : Ω → T} (hX : Measurable X) (hZ : Measurable Z) (hY : Measurable Y) (hW : Measurable W) (μ : MeasureTheory.Measure Ω) [MeasureTheory.IsProbabilityMeasure μ] (h : ProbabilityTheory.IndepFun (⟨X, Z⟩) (⟨Y, W⟩) μ) [FiniteRange Z] [FiniteRange W] : d[X | Z ; μ # Y | W ; μ] = H[X - Y | ⟨Z, W⟩ ; μ] - H[X | Z ; μ] / 2 - H[Y | W ; μ] / 2"}
{"name":"kaimanovich_vershik","declaration":"/-- The **Kaimanovich-Vershik inequality**. $$H[X + Y + Z] - H[X + Y] \\leq H[Y+ Z] - H[Y]$$ -/\ntheorem kaimanovich_vershik {Ω : Type u_1} {G : Type u_5} [mΩ : MeasurableSpace Ω] {μ : MeasureTheory.Measure Ω} [hG : MeasurableSpace G] [MeasurableSingletonClass G] [AddCommGroup G] [MeasurableAdd₂ G] [Countable G] {X : Ω → G} {Y : Ω → G} {Z : Ω → G} (h : ProbabilityTheory.iIndepFun (fun x => hG) ![X, Y, Z] μ) (hX : Measurable X) (hY : Measurable Y) (hZ : Measurable Z) [MeasureTheory.IsProbabilityMeasure μ] [FiniteRange X] [FiniteRange Z] [FiniteRange Y] : H[X + Y + Z ; μ] - H[X + Y ; μ] ≤ H[Y + Z ; μ] - H[Y ; μ]"}
{"name":"condRuzsaDist_diff_le","declaration":"/-- Let $X, Y, Z$ be random variables taking values in some abelian group, and with $Y, Z$\nindependent. Then we have\n$$d[X ; Y + Z] -d[X ; Y] \\leq \\tfrac{1}{2} (H[Y+ Z] - H[Y])$$\n$$= \\tfrac{1}{2} d[Y ; Z] + \\tfrac{1}{4} H[Z] - \\tfrac{1}{4} H[Y]$$\nand\n$$d[X ; Y|Y+ Z] - d[X ; Y] \\leq \\tfrac{1}{2} \\bigl(H[Y+ Z] - H[Z]\\bigr)$$\n$$= \\tfrac{1}{2} d[Y ; Z] + \\tfrac{1}{4} H[Y] - \\tfrac{1}{4} H[Z]$$\n-/\ntheorem condRuzsaDist_diff_le {Ω : Type u_1} {Ω' : Type u_2} {G : Type u_5} [mΩ : MeasurableSpace Ω] (μ : MeasureTheory.Measure Ω) [mΩ' : MeasurableSpace Ω'] {μ' : MeasureTheory.Measure Ω'} [hG : MeasurableSpace G] [MeasurableSingletonClass G] [AddCommGroup G] [MeasurableSub₂ G] [MeasurableAdd₂ G] [Countable G] [MeasureTheory.IsProbabilityMeasure μ] [MeasureTheory.IsProbabilityMeasure μ'] {X : Ω → G} {Y : Ω' → G} {Z : Ω' → G} (hX : Measurable X) (hY : Measurable Y) (hZ : Measurable Z) (h : ProbabilityTheory.IndepFun Y Z μ') [FiniteRange X] [FiniteRange Z] [FiniteRange Y] : d[X ; μ # Y + Z ; μ'] - d[X ; μ # Y ; μ'] ≤ (H[Y + Z ; μ'] - H[Y ; μ']) / 2"}
{"name":"«termD[_#_|_]».delab","declaration":"/-- Pretty printer defined by `notation3` command. -/\ndef «termD[_#_|_]».delab  : Lean.PrettyPrinter.Delaborator.Delab"}
{"name":"condRuzsaDist'_zero_right","declaration":"theorem condRuzsaDist'_zero_right {Ω : Type u_1} {Ω' : Type u_2} {G : Type u_5} {T : Type u_6} [mΩ : MeasurableSpace Ω] [mΩ' : MeasurableSpace Ω'] [hG : MeasurableSpace G] [MeasurableSingletonClass G] [AddCommGroup G] [Countable G] [MeasurableSpace T] (X : Ω → G) (Y : Ω' → G) (W : Ω' → T) (μ : MeasureTheory.Measure Ω) : d[X ; μ # Y | W ; 0] = 0"}
{"name":"continuous_measureEntropy_probabilityMeasure","declaration":"/-- Entropy depends continuously on the measure. -/\ntheorem continuous_measureEntropy_probabilityMeasure {Ω : Type u_7} [Fintype Ω] [TopologicalSpace Ω] [DiscreteTopology Ω] [MeasurableSpace Ω] [OpensMeasurableSpace Ω] : Continuous fun μ => Hm[↑μ]"}
{"name":"«termD[_|_;_#_|_;_]»","declaration":"/-- The conditional Ruzsa distance `d[X|Z ; Y|W]`. -/\ndef «termD[_|_;_#_|_;_]»  : Lean.ParserDescr"}
{"name":"condRuzsaDist","declaration":"/-- The conditional Ruzsa distance `d[X|Z ; Y|W]`. -/\ndef condRuzsaDist {S : Type u_7} {Ω : Type u_1} {Ω' : Type u_2} {G : Type u_5} {T : Type u_6} [mΩ : MeasurableSpace Ω] [mΩ' : MeasurableSpace Ω'] [hG : MeasurableSpace G] [MeasurableSingletonClass G] [AddCommGroup G] [Countable G] [MeasurableSpace S] [MeasurableSpace T] (X : Ω → G) (Z : Ω → S) (Y : Ω' → G) (W : Ω' → T) (μ : autoParam (MeasureTheory.Measure Ω) _auto✝) [MeasureTheory.IsFiniteMeasure μ] (μ' : autoParam (MeasureTheory.Measure Ω') _auto✝) [MeasureTheory.IsFiniteMeasure μ'] : ℝ"}
{"name":"condRuzsaDist'_prod_eq_sum'","declaration":"/-- Version of `condRuzsaDist'_prod_eq_sum` when `W` has finite codomain. -/\ntheorem condRuzsaDist'_prod_eq_sum' {Ω : Type u_1} {Ω' : Type u_2} {G : Type u_5} {T : Type u_6} [mΩ : MeasurableSpace Ω] [mΩ' : MeasurableSpace Ω'] [hG : MeasurableSpace G] [MeasurableSingletonClass G] [AddCommGroup G] [Countable G] [Countable T] [MeasurableSpace T] [MeasurableSingletonClass T] {X : Ω → G} {Y : Ω' → G} {W : Ω' → T} {W' : Ω' → T} (μ : MeasureTheory.Measure Ω) (μ' : MeasureTheory.Measure Ω') (hY : Measurable Y) (hW' : Measurable W') (hW : Measurable W) [MeasureTheory.IsFiniteMeasure μ'] [Fintype T] : d[X ; μ # Y | ⟨W', W⟩ ; μ'] =\n  Finset.sum Finset.univ fun w => (↑↑μ' (W ⁻¹' {w})).toReal * d[X ; μ # Y | W' ; ProbabilityTheory.cond μ' (W ⁻¹' {w})]"}
{"name":"rdist_eq_rdistm","declaration":"/-- Ruzsa distance of random variables equals Ruzsa distance of the kernels. -/\ntheorem rdist_eq_rdistm {Ω : Type u_1} {Ω' : Type u_2} {G : Type u_5} [mΩ : MeasurableSpace Ω] {μ : MeasureTheory.Measure Ω} [mΩ' : MeasurableSpace Ω'] {μ' : MeasureTheory.Measure Ω'} [hG : MeasurableSpace G] [AddCommGroup G] {X : Ω → G} {Y : Ω' → G} : d[X ; μ # Y ; μ'] = ProbabilityTheory.kernel.rdistm (MeasureTheory.Measure.map X μ) (MeasureTheory.Measure.map Y μ')"}
{"name":"rdist_triangle","declaration":"/-- The **entropic Ruzsa triangle inequality** -/\ntheorem rdist_triangle {Ω : Type u_1} {Ω' : Type u_2} {Ω'' : Type u_3} {G : Type u_5} [mΩ : MeasurableSpace Ω] {μ : MeasureTheory.Measure Ω} [mΩ' : MeasurableSpace Ω'] {μ' : MeasureTheory.Measure Ω'} [mΩ'' : MeasurableSpace Ω''] {μ'' : MeasureTheory.Measure Ω''} [hG : MeasurableSpace G] [MeasurableSingletonClass G] [AddCommGroup G] [MeasurableSub₂ G] [Countable G] {X : Ω → G} {Y : Ω' → G} {Z : Ω'' → G} (hX : Measurable X) (hY : Measurable Y) (hZ : Measurable Z) [hμ : MeasureTheory.IsProbabilityMeasure μ] [hμ' : MeasureTheory.IsProbabilityMeasure μ'] [hμ'' : MeasureTheory.IsProbabilityMeasure μ''] [FiniteRange X] [FiniteRange Y] [FiniteRange Z] : d[X ; μ # Z ; μ''] ≤ d[X ; μ # Y ; μ'] + d[Y ; μ' # Z ; μ'']"}
{"name":"«termD[_;_#_;_]».delab","declaration":"/-- Pretty printer defined by `notation3` command. -/\ndef «termD[_;_#_;_]».delab  : Lean.PrettyPrinter.Delaborator.Delab"}
{"name":"condRuzsaDist_nonneg","declaration":"theorem condRuzsaDist_nonneg {S : Type u_7} {Ω : Type u_1} {Ω' : Type u_2} {G : Type u_5} {T : Type u_6} [mΩ : MeasurableSpace Ω] {μ : MeasureTheory.Measure Ω} [mΩ' : MeasurableSpace Ω'] {μ' : MeasureTheory.Measure Ω'} [hG : MeasurableSpace G] [MeasurableSingletonClass G] [AddCommGroup G] [MeasurableSub₂ G] [Countable G] [Countable S] [Nonempty S] [MeasurableSpace S] [Countable T] [Nonempty T] [MeasurableSpace T] [MeasurableSingletonClass S] [MeasurableSingletonClass T] {X : Ω → G} (hX : Measurable X) [FiniteRange X] {Z : Ω → S} (hZ : Measurable Z) [FiniteRange Z] {Y : Ω' → G} (hY : Measurable Y) [FiniteRange Y] {W : Ω' → T} (hW : Measurable W) [FiniteRange W] [MeasureTheory.IsProbabilityMeasure μ] [MeasureTheory.IsProbabilityMeasure μ'] : 0 ≤ d[X | Z ; μ # Y | W ; μ']"}
{"name":"condRuszaDist_prod_eq_of_indepFun","declaration":"theorem condRuszaDist_prod_eq_of_indepFun {Ω : Type u_1} {Ω' : Type u_2} {G : Type u_5} {T : Type u_6} [mΩ : MeasurableSpace Ω] [mΩ' : MeasurableSpace Ω'] [hG : MeasurableSpace G] [MeasurableSingletonClass G] [AddCommGroup G] [Countable G] [Countable T] [MeasurableSpace T] [MeasurableSingletonClass T] {μ : MeasureTheory.Measure Ω} {μ' : MeasureTheory.Measure Ω'} {X : Ω → G} {Y : Ω' → G} {W : Ω' → T} {W' : Ω' → T} (hX : Measurable X) (hY : Measurable Y) (hW : Measurable W) (hW' : Measurable W') (h : ProbabilityTheory.IndepFun (⟨Y, W⟩) W' μ') [MeasureTheory.IsProbabilityMeasure μ'] [Fintype T] : d[X ; μ # Y | ⟨W, W'⟩ ; μ'] = d[X ; μ # Y | W ; μ']"}
{"name":"«termD[_#_]»","declaration":"/-- The Ruzsa distance `rdist X Y` or $d[X ;Y]$ between two random variables is defined as\n$H[X'- Y'] - H[X']/2 - H[Y']/2$, where $X', Y'$ are independent copies of $X, Y$. -/\ndef «termD[_#_]»  : Lean.ParserDescr"}
{"name":"condRuzsaDist'_prod_eq_sum","declaration":"theorem condRuzsaDist'_prod_eq_sum {Ω : Type u_1} {Ω' : Type u_2} {G : Type u_5} {T : Type u_6} [mΩ : MeasurableSpace Ω] [mΩ' : MeasurableSpace Ω'] [hG : MeasurableSpace G] [MeasurableSingletonClass G] [AddCommGroup G] [Countable G] [Countable T] [MeasurableSpace T] [MeasurableSingletonClass T] {X : Ω → G} {Y : Ω' → G} {W : Ω' → T} {W' : Ω' → T} (μ : MeasureTheory.Measure Ω) (μ' : MeasureTheory.Measure Ω') (hY : Measurable Y) (hW' : Measurable W') (hW : Measurable W) [MeasureTheory.IsFiniteMeasure μ'] [FiniteRange W] [FiniteRange W'] : d[X ; μ # Y | ⟨W', W⟩ ; μ'] =\n  Finset.sum (FiniteRange.toFinset W) fun w =>\n    (↑↑μ' (W ⁻¹' {w})).toReal * d[X ; μ # Y | W' ; ProbabilityTheory.cond μ' (W ⁻¹' {w})]"}
{"name":"condRuzsaDist'_def","declaration":"/-- Conditional Ruzsa distance equals Ruzsa distance of associated kernels. -/\ntheorem condRuzsaDist'_def {Ω : Type u_1} {Ω' : Type u_2} {G : Type u_5} {T : Type u_6} [mΩ : MeasurableSpace Ω] [mΩ' : MeasurableSpace Ω'] [hG : MeasurableSpace G] [MeasurableSingletonClass G] [AddCommGroup G] [Countable G] [MeasurableSpace T] (X : Ω → G) (Y : Ω' → G) (W : Ω' → T) (μ : MeasureTheory.Measure Ω) (μ' : MeasureTheory.Measure Ω') [MeasureTheory.IsFiniteMeasure μ'] : d[X ; μ # Y | W ; μ'] =\n  dk[ProbabilityTheory.kernel.const Unit (MeasureTheory.Measure.map X μ) ; MeasureTheory.Measure.dirac () #\n    ProbabilityTheory.condDistrib Y W μ' ; MeasureTheory.Measure.map W μ']"}
{"name":"rdist_le_avg_ent","declaration":"/-- $d[X;Y] ≤ H[X]/2 + H[Y]/2$. -/\ntheorem rdist_le_avg_ent {Ω : Type u_1} {Ω' : Type u_2} {G : Type u_5} [mΩ : MeasurableSpace Ω] [mΩ' : MeasurableSpace Ω'] [hG : MeasurableSpace G] [MeasurableSingletonClass G] [AddCommGroup G] [MeasurableSub₂ G] [Countable G] {X : Ω → G} {Y : Ω' → G} [FiniteRange X] [FiniteRange Y] (hX : Measurable X) (hY : Measurable Y) (μ : autoParam (MeasureTheory.Measure Ω) _auto✝) (μ' : autoParam (MeasureTheory.Measure Ω') _auto✝) [MeasureTheory.IsProbabilityMeasure μ] [MeasureTheory.IsProbabilityMeasure μ'] : d[X ; μ # Y ; μ'] ≤ (H[X ; μ] + H[Y ; μ']) / 2"}
{"name":"condRuzsaDist_diff_le'''","declaration":"theorem condRuzsaDist_diff_le''' {Ω : Type u_1} {Ω' : Type u_2} {G : Type u_5} [mΩ : MeasurableSpace Ω] (μ : MeasureTheory.Measure Ω) [mΩ' : MeasurableSpace Ω'] {μ' : MeasureTheory.Measure Ω'} [hG : MeasurableSpace G] [MeasurableSingletonClass G] [AddCommGroup G] [MeasurableSub₂ G] [MeasurableAdd₂ G] [Countable G] [ElementaryAddCommGroup G 2] [MeasureTheory.IsProbabilityMeasure μ] [MeasureTheory.IsProbabilityMeasure μ'] {X : Ω → G} {Y : Ω' → G} {Z : Ω' → G} (hX : Measurable X) (hY : Measurable Y) (hZ : Measurable Z) (h : ProbabilityTheory.IndepFun Y Z μ') [FiniteRange X] [FiniteRange Z] [FiniteRange Y] : d[X ; μ # Y | Y + Z ; μ'] - d[X ; μ # Y ; μ'] ≤ d[Y ; μ' # Z ; μ'] / 2 + H[Y ; μ'] / 4 - H[Z ; μ'] / 4"}
{"name":"condRuzsaDist_le","declaration":"/-- Suppose that $(X, Z)$ and $(Y, W)$ are random variables, where $X, Y$ take values in an abelian\ngroup. Then $$d[X | Z ; Y | W] \\leq d[X ; Y] + \\tfrac{1}{2} I[X : Z] + \\tfrac{1}{2} I[Y : W]$$ -/\ntheorem condRuzsaDist_le {S : Type u_7} {Ω : Type u_1} {Ω' : Type u_2} {G : Type u_5} {T : Type u_6} [mΩ : MeasurableSpace Ω] (μ : MeasureTheory.Measure Ω) [mΩ' : MeasurableSpace Ω'] (μ' : MeasureTheory.Measure Ω') [hG : MeasurableSpace G] [MeasurableSingletonClass G] [AddCommGroup G] [MeasurableSub₂ G] [Countable G] [Countable S] [MeasurableSpace S] [Countable T] [Nonempty T] [MeasurableSpace T] [MeasurableSingletonClass S] [MeasurableSingletonClass T] {X : Ω → G} {Z : Ω → S} {Y : Ω' → G} {W : Ω' → T} [MeasureTheory.IsProbabilityMeasure μ] [MeasureTheory.IsProbabilityMeasure μ'] [Nonempty S] (hX : Measurable X) (hZ : Measurable Z) (hY : Measurable Y) (hW : Measurable W) [FiniteRange X] [FiniteRange Z] [FiniteRange Y] [FiniteRange W] : d[X | Z ; μ # Y | W ; μ'] ≤ d[X ; μ # Y ; μ'] + I[X : Z ; μ] / 2 + I[Y : W ; μ'] / 2"}
{"name":"continuous_rdist_restrict_probabilityMeasure₁'","declaration":"/-- Ruzsa distance depends continuously on the second measure. -/\ntheorem continuous_rdist_restrict_probabilityMeasure₁' {Ω : Type u_1} {G : Type u_5} [mΩ : MeasurableSpace Ω] [hG : MeasurableSpace G] [AddCommGroup G] [Countable G] [Fintype G] [TopologicalSpace G] [DiscreteTopology G] [BorelSpace G] (X : Ω → G) (P : autoParam (MeasureTheory.Measure Ω) _auto✝) [MeasureTheory.IsProbabilityMeasure P] (X_mble : Measurable X) : Continuous fun μ => d[X ; P # id ; ↑μ]"}
{"name":"«termD[_;_#_|_;_]»","declaration":"/-- The conditional Ruzsa distance `d[X ; Y|W]`. -/\ndef «termD[_;_#_|_;_]»  : Lean.ParserDescr"}
{"name":"condRuzsaDist_of_inj_map","declaration":"theorem condRuzsaDist_of_inj_map {Ω : Type u_1} {G : Type u_5} [mΩ : MeasurableSpace Ω] {μ : MeasureTheory.Measure Ω} [hG : MeasurableSpace G] [MeasurableSingletonClass G] [AddCommGroup G] [MeasurableSub₂ G] [Countable G] {G' : Type u_7} [Countable G'] [AddCommGroup G'] [MeasurableSpace G'] [MeasurableSingletonClass G'] [MeasureTheory.IsProbabilityMeasure μ] (Y : Fin 4 → Ω → G) (h_indep : ProbabilityTheory.IndepFun (⟨Y 0, Y 2⟩) (⟨Y 1, Y 3⟩) μ) (h_meas : ∀ (i : Fin 4), Measurable (Y i)) (π : G × G →+ G') (hπ : ∀ (h : G), Function.Injective fun g => π (g, h)) [FiniteRange (Y 2)] [FiniteRange (Y 3)] : d[⇑π ∘ ⟨Y 0, Y 2⟩ | Y 2 ; μ # ⇑π ∘ ⟨Y 1, Y 3⟩ | Y 3 ; μ] = d[Y 0 | Y 2 ; μ # Y 1 | Y 3 ; μ]"}
{"name":"condRuzsaDist_of_copy","declaration":"/-- The conditional Ruzsa distance is unchanged if the sets of random variables are replaced with\ncopies. -/\ntheorem condRuzsaDist_of_copy {S : Type u_7} {Ω : Type u_1} {Ω' : Type u_2} {Ω'' : Type u_3} {Ω''' : Type u_4} {G : Type u_5} {T : Type u_6} [mΩ : MeasurableSpace Ω] {μ : MeasureTheory.Measure Ω} [mΩ' : MeasurableSpace Ω'] {μ' : MeasureTheory.Measure Ω'} [mΩ'' : MeasurableSpace Ω''] {μ'' : MeasureTheory.Measure Ω''} [mΩ''' : MeasurableSpace Ω'''] {μ''' : MeasureTheory.Measure Ω'''} [hG : MeasurableSpace G] [MeasurableSingletonClass G] [AddCommGroup G] [Countable G] [Countable S] [MeasurableSpace S] [Countable T] [MeasurableSpace T] [MeasurableSingletonClass S] [MeasurableSingletonClass T] {X : Ω → G} (hX : Measurable X) {Z : Ω → S} (hZ : Measurable Z) {Y : Ω' → G} (hY : Measurable Y) {W : Ω' → T} (hW : Measurable W) {X' : Ω'' → G} (hX' : Measurable X') {Z' : Ω'' → S} (hZ' : Measurable Z') {Y' : Ω''' → G} (hY' : Measurable Y') {W' : Ω''' → T} (hW' : Measurable W') [MeasureTheory.IsFiniteMeasure μ] [MeasureTheory.IsFiniteMeasure μ'] [MeasureTheory.IsFiniteMeasure μ''] [MeasureTheory.IsFiniteMeasure μ'''] (h1 : ProbabilityTheory.IdentDistrib (⟨X, Z⟩) (⟨X', Z'⟩) μ μ'') (h2 : ProbabilityTheory.IdentDistrib (⟨Y, W⟩) (⟨Y', W'⟩) μ' μ''') [FiniteRange Z] [FiniteRange W] [FiniteRange Z'] [FiniteRange W'] : d[X | Z ; μ # Y | W ; μ'] = d[X' | Z' ; μ'' # Y' | W' ; μ''']"}
{"name":"rdist_eq_rdist_id_map","declaration":"/-- Ruzsa distance between random variables equals Ruzsa distance between their distributions.-/\ntheorem rdist_eq_rdist_id_map {Ω : Type u_1} {Ω' : Type u_2} {G : Type u_5} [mΩ : MeasurableSpace Ω] {μ : MeasureTheory.Measure Ω} [mΩ' : MeasurableSpace Ω'] {μ' : MeasureTheory.Measure Ω'} [hG : MeasurableSpace G] [AddCommGroup G] {X : Ω → G} {Y : Ω' → G} : d[X ; μ # Y ; μ'] = d[id ; MeasureTheory.Measure.map X μ # id ; MeasureTheory.Measure.map Y μ']"}
{"name":"continuous_rdist_restrict_probabilityMeasure₁","declaration":"theorem continuous_rdist_restrict_probabilityMeasure₁ {Ω : Type u_1} {G : Type u_5} [mΩ : MeasurableSpace Ω] [hG : MeasurableSpace G] [AddCommGroup G] [Countable G] [Fintype G] [TopologicalSpace G] [DiscreteTopology G] [BorelSpace G] (X : Ω → G) (P : autoParam (MeasureTheory.Measure Ω) _auto✝) [MeasureTheory.IsProbabilityMeasure P] (X_mble : Measurable X) : Continuous fun μ => d[id ; MeasureTheory.Measure.map X P # id ; ↑μ]"}
{"name":"«termD[_#_]».delab","declaration":"/-- Pretty printer defined by `notation3` command. -/\ndef «termD[_#_]».delab  : Lean.PrettyPrinter.Delaborator.Delab"}
{"name":"rdist","declaration":"/-- The Ruzsa distance `rdist X Y` or $d[X ;Y]$ between two random variables is defined as\n$H[X'- Y'] - H[X']/2 - H[Y']/2$, where $X', Y'$ are independent copies of $X, Y$. -/\ndef rdist {Ω : Type u_1} {Ω' : Type u_2} {G : Type u_5} [mΩ : MeasurableSpace Ω] [mΩ' : MeasurableSpace Ω'] [hG : MeasurableSpace G] [AddCommGroup G] (X : Ω → G) (Y : Ω' → G) (μ : autoParam (MeasureTheory.Measure Ω) _auto✝) (μ' : autoParam (MeasureTheory.Measure Ω') _auto✝) : ℝ"}
{"name":"diff_ent_le_rdist''","declaration":"/-- $$H[X - Y] - H[Y] \\leq 2d[X ; Y]$$ -/\ntheorem diff_ent_le_rdist'' {Ω : Type u_1} {G : Type u_5} [mΩ : MeasurableSpace Ω] {μ : MeasureTheory.Measure Ω} [hG : MeasurableSpace G] [MeasurableSingletonClass G] [AddCommGroup G] [MeasurableSub₂ G] [Countable G] {X : Ω → G} [FiniteRange X] [MeasureTheory.IsProbabilityMeasure μ] {Y : Ω → G} (hX : Measurable X) (hY : Measurable Y) (h : ProbabilityTheory.IndepFun X Y μ) [FiniteRange Y] : H[X - Y ; μ] - H[Y ; μ] ≤ 2 * d[X ; μ # Y ; μ]"}
