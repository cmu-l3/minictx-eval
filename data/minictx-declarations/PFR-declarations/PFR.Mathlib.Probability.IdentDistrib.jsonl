{"name":"ProbabilityTheory.identDistrib_map","declaration":"/-- A random variable is identically distributed to its pullbacks. -/\ntheorem ProbabilityTheory.identDistrib_map {Ω : Type u_5} {α : Type u_7} {β : Type u_9} {mΩ : MeasurableSpace Ω} [MeasurableSpace α] [MeasurableSpace β] {X : Ω → α} (hX : Measurable X) {f : α → β} (hf : Measurable f) (μ : MeasureTheory.Measure Ω) : ProbabilityTheory.IdentDistrib f (f ∘ X) (MeasureTheory.Measure.map X μ) μ"}
{"name":"ProbabilityTheory.identDistrib_of_finiteRange","declaration":"/-- If `X` has identical distribution to `X₀`, and `X₀` has finite range, then `X` is almost everywhere equivalent to a random variable of finite range. -/\ntheorem ProbabilityTheory.identDistrib_of_finiteRange {Ω : Type u_11} {Ω₀ : Type u_12} {S : Type u_13} [MeasurableSpace Ω] [MeasurableSpace Ω₀] [MeasurableSpace S] [MeasurableSingletonClass S] [hS : Nonempty S] {μ : MeasureTheory.Measure Ω} {μ₀ : MeasureTheory.Measure Ω₀} {X₀ : Ω₀ → S} [FiniteRange X₀] {X : Ω → S} (hX : Measurable X) (hi : ProbabilityTheory.IdentDistrib X₀ X μ₀ μ) : ∃ X', Measurable X' ∧ FiniteRange X' ∧ X' =ᶠ[MeasureTheory.Measure.ae μ] X"}
{"name":"ProbabilityTheory.IdentDistrib.snd_id","declaration":"/-- The second projection in a product space with measure `μ.prod ν` is distributed like `ν`. -/\ntheorem ProbabilityTheory.IdentDistrib.snd_id {α : Type u_1} {β : Type u_2} [MeasurableSpace α] [MeasurableSpace β] {μ : MeasureTheory.Measure α} {ν : MeasureTheory.Measure β} [MeasureTheory.IsProbabilityMeasure μ] [MeasureTheory.IsProbabilityMeasure ν] : ProbabilityTheory.IdentDistrib Prod.snd id (MeasureTheory.Measure.prod μ ν) ν"}
{"name":"ProbabilityTheory.identDistrib_ulift_self","declaration":"theorem ProbabilityTheory.identDistrib_ulift_self {Ω : Type u_5} {α : Type u_7} {mΩ : MeasurableSpace Ω} {μ : MeasureTheory.Measure Ω} [MeasurableSpace α] {X : Ω → α} (hX : Measurable X) : ProbabilityTheory.IdentDistrib X (X ∘ ULift.down) μ (MeasureTheory.Measure.comap ULift.down μ)"}
{"name":"ProbabilityTheory.independent_copies4_nondep","declaration":"/-- A version with exactly 4 random variables that have the same codomain.\nIt's unfortunately incredibly painful to prove this from the general case. -/\ntheorem ProbabilityTheory.independent_copies4_nondep {α : Type u} [mS : MeasurableSpace α] {Ω₁ : Type u_1} {Ω₂ : Type u_2} {Ω₃ : Type u_3} {Ω₄ : Type u_4} [mΩ₁ : MeasurableSpace Ω₁] [mΩ₂ : MeasurableSpace Ω₂] [mΩ₃ : MeasurableSpace Ω₃] [mΩ₄ : MeasurableSpace Ω₄] {X₁ : Ω₁ → α} {X₂ : Ω₂ → α} {X₃ : Ω₃ → α} {X₄ : Ω₄ → α} (hX₁ : Measurable X₁) (hX₂ : Measurable X₂) (hX₃ : Measurable X₃) (hX₄ : Measurable X₄) (μ₁ : MeasureTheory.Measure Ω₁) (μ₂ : MeasureTheory.Measure Ω₂) (μ₃ : MeasureTheory.Measure Ω₃) (μ₄ : MeasureTheory.Measure Ω₄) [hμ₁ : MeasureTheory.IsProbabilityMeasure μ₁] [hμ₂ : MeasureTheory.IsProbabilityMeasure μ₂] [hμ₃ : MeasureTheory.IsProbabilityMeasure μ₃] [hμ₄ : MeasureTheory.IsProbabilityMeasure μ₄] : ∃ A mA μA X₁' X₂' X₃' X₄',\n  MeasureTheory.IsProbabilityMeasure μA ∧\n    ProbabilityTheory.iIndepFun (fun x => mS) ![X₁', X₂', X₃', X₄'] μA ∧\n      Measurable X₁' ∧\n        Measurable X₂' ∧\n          Measurable X₃' ∧\n            Measurable X₄' ∧\n              ProbabilityTheory.IdentDistrib X₁' X₁ μA μ₁ ∧\n                ProbabilityTheory.IdentDistrib X₂' X₂ μA μ₂ ∧\n                  ProbabilityTheory.IdentDistrib X₃' X₃ μA μ₃ ∧ ProbabilityTheory.IdentDistrib X₄' X₄ μA μ₄"}
{"name":"ProbabilityTheory.identDistrib_comp_snd","declaration":"/-- A random variable is identically distributed to its lift to a product space (in the second factor). -/\ntheorem ProbabilityTheory.identDistrib_comp_snd {Ω : Type u_5} {Ω' : Type u_6} {α : Type u_7} {mΩ : MeasurableSpace Ω} {mΩ' : MeasurableSpace Ω'} [MeasurableSpace α] {X : Ω → α} (hX : Measurable X) (μ : MeasureTheory.Measure Ω) (μ' : MeasureTheory.Measure Ω') [MeasureTheory.SigmaFinite μ] [MeasureTheory.IsProbabilityMeasure μ'] : ProbabilityTheory.IdentDistrib (X ∘ Prod.snd) X (MeasureTheory.Measure.prod μ' μ) μ"}
{"name":"ProbabilityTheory.identDistrib_comp_left","declaration":"/-- A function is identically distributed to itself composed with a measurable embedding of conull\nrange. -/\ntheorem ProbabilityTheory.identDistrib_comp_left {α : Type u_1} {γ : Type u_3} {δ : Type u_4} [MeasurableSpace α] [MeasurableSpace γ] [MeasurableSpace δ] {μ : MeasureTheory.Measure α} {f : α → γ} {i : δ → α} (hi : MeasurableEmbedding i) (hi' : ∀ᵐ (a : α) ∂μ, a ∈ Set.range i) (hf : Measurable f) : ProbabilityTheory.IdentDistrib (f ∘ i) f (MeasureTheory.Measure.comap i μ) μ"}
{"name":"ProbabilityTheory.independent_copies_finiteRange","declaration":"/-- A version of `independent_copies` that guarantees that the copies have `FiniteRange` if the original variables do. -/\ntheorem ProbabilityTheory.independent_copies_finiteRange {Ω : Type u_5} {Ω' : Type u_6} {α : Type u_7} {β : Type u_9} {mΩ : MeasurableSpace Ω} {mΩ' : MeasurableSpace Ω'} [MeasurableSpace α] [MeasurableSpace β] {X : Ω → α} {Y : Ω' → β} (hX : Measurable X) (hY : Measurable Y) [FiniteRange X] [FiniteRange Y] [MeasurableSingletonClass α] [Nonempty α] [MeasurableSingletonClass β] [Nonempty β] (μ : MeasureTheory.Measure Ω) (μ' : MeasureTheory.Measure Ω') [MeasureTheory.IsProbabilityMeasure μ] [MeasureTheory.IsProbabilityMeasure μ'] : ∃ ν X' Y',\n  MeasureTheory.IsProbabilityMeasure ν ∧\n    Measurable X' ∧\n      Measurable Y' ∧\n        ProbabilityTheory.IndepFun X' Y' ν ∧\n          ProbabilityTheory.IdentDistrib X' X ν μ ∧\n            ProbabilityTheory.IdentDistrib Y' Y ν μ' ∧ FiniteRange X' ∧ FiniteRange Y'"}
{"name":"ProbabilityTheory.IdentDistrib.cond","declaration":"theorem ProbabilityTheory.IdentDistrib.cond {α : Type u_1} {β : Type u_2} {γ : Type u_3} [MeasurableSpace α] [MeasurableSpace β] [MeasurableSpace γ] {μ : MeasureTheory.Measure α} {ν : MeasureTheory.Measure β} {f : α → γ} {f' : α → γ} {g : β → γ} {g' : β → γ} {s : Set γ} (hs : MeasurableSet s) (hf' : Measurable f') (hg' : Measurable g') (hfg : ProbabilityTheory.IdentDistrib (fun a => (f a, f' a)) (fun b => (g b, g' b)) μ ν) : ProbabilityTheory.IdentDistrib f g (ProbabilityTheory.cond μ (f' ⁻¹' s)) (ProbabilityTheory.cond ν (g' ⁻¹' s))"}
{"name":"ProbabilityTheory.independent_copies","declaration":"/-- For $X, Y$ random variables, one can find independent copies $X', Y'$ of $X, Y$. -/\ntheorem ProbabilityTheory.independent_copies {Ω : Type u_5} {Ω' : Type u_6} {α : Type u_7} {β : Type u_9} {mΩ : MeasurableSpace Ω} {mΩ' : MeasurableSpace Ω'} [MeasurableSpace α] [MeasurableSpace β] {X : Ω → α} {Y : Ω' → β} (hX : Measurable X) (hY : Measurable Y) (μ : MeasureTheory.Measure Ω) (μ' : MeasureTheory.Measure Ω') [MeasureTheory.IsProbabilityMeasure μ] [MeasureTheory.IsProbabilityMeasure μ'] : ∃ ν X' Y',\n  MeasureTheory.IsProbabilityMeasure ν ∧\n    Measurable X' ∧\n      Measurable Y' ∧\n        ProbabilityTheory.IndepFun X' Y' ν ∧\n          ProbabilityTheory.IdentDistrib X' X ν μ ∧ ProbabilityTheory.IdentDistrib Y' Y ν μ'"}
{"name":"ProbabilityTheory.independent_copies3_nondep_finiteRange","declaration":"/-- A version of `independent_copies3_nondep` that guarantees that the copies have `FiniteRange` if the original variables do. -/\ntheorem ProbabilityTheory.independent_copies3_nondep_finiteRange {α : Type u} [mS : MeasurableSpace α] [MeasurableSingletonClass α] [Nonempty α] {Ω₁ : Type u_1} {Ω₂ : Type u_2} {Ω₃ : Type u_3} [MeasurableSpace Ω₁] [MeasurableSpace Ω₂] [MeasurableSpace Ω₃] {X₁ : Ω₁ → α} {X₂ : Ω₂ → α} {X₃ : Ω₃ → α} (hX₁ : Measurable X₁) (hX₂ : Measurable X₂) (hX₃ : Measurable X₃) [FiniteRange X₁] [FiniteRange X₂] [FiniteRange X₃] (μ₁ : MeasureTheory.Measure Ω₁) (μ₂ : MeasureTheory.Measure Ω₂) (μ₃ : MeasureTheory.Measure Ω₃) [hμ₁ : MeasureTheory.IsProbabilityMeasure μ₁] [hμ₂ : MeasureTheory.IsProbabilityMeasure μ₂] [hμ₃ : MeasureTheory.IsProbabilityMeasure μ₃] : ∃ A mA μA X₁' X₂' X₃',\n  MeasureTheory.IsProbabilityMeasure μA ∧\n    ProbabilityTheory.iIndepFun (fun x => mS) ![X₁', X₂', X₃'] μA ∧\n      Measurable X₁' ∧\n        Measurable X₂' ∧\n          Measurable X₃' ∧\n            ProbabilityTheory.IdentDistrib X₁' X₁ μA μ₁ ∧\n              ProbabilityTheory.IdentDistrib X₂' X₂ μA μ₂ ∧\n                ProbabilityTheory.IdentDistrib X₃' X₃ μA μ₃ ∧ FiniteRange X₁' ∧ FiniteRange X₂' ∧ FiniteRange X₃'"}
{"name":"ProbabilityTheory.IdentDistrib.mul","declaration":"theorem ProbabilityTheory.IdentDistrib.mul {Ω : Type u_5} {Ω' : Type u_6} {β : Type u_9} {mΩ : MeasurableSpace Ω} {mΩ' : MeasurableSpace Ω'} {mβ : MeasurableSpace β} {μ : MeasureTheory.Measure Ω} {ν : MeasureTheory.Measure Ω'} {f : Ω → β} {g : Ω → β} {f' : Ω' → β} {g' : Ω' → β} [Mul β] [MeasurableMul₂ β] [MeasureTheory.IsFiniteMeasure μ] [MeasureTheory.IsFiniteMeasure ν] (hff' : ProbabilityTheory.IdentDistrib f f' μ ν) (hgg' : ProbabilityTheory.IdentDistrib g g' μ ν) (h : ProbabilityTheory.IndepFun f g μ) (h' : ProbabilityTheory.IndepFun f' g' ν) : ProbabilityTheory.IdentDistrib (f * g) (f' * g') μ ν"}
{"name":"ProbabilityTheory.independent_copies'","declaration":"/-- Let $X_i : \\Omega_i \\to S_i$ be random variables for $i=1,\\dots,k$.\nThen there exist jointly independent random variables $X'_i : \\Omega' \\to S_i$ for $i=1,\\dots,k$\nsuch that each $X'_i$ is a copy of $X_i$. -/\ntheorem ProbabilityTheory.independent_copies' {I : Type u} [Fintype I] {α : I → Type u'} [mS : (i : I) → MeasurableSpace (α i)] {Ω : I → Type v} [mΩ : (i : I) → MeasurableSpace (Ω i)] (X : (i : I) → Ω i → α i) (hX : ∀ (i : I), Measurable (X i)) (μ : (i : I) → MeasureTheory.Measure (Ω i)) [∀ (i : I), MeasureTheory.IsProbabilityMeasure (μ i)] : ∃ A mA μA X',\n  MeasureTheory.IsProbabilityMeasure μA ∧\n    ProbabilityTheory.iIndepFun mS X' μA ∧\n      ∀ (i : I), Measurable (X' i) ∧ ProbabilityTheory.IdentDistrib (X' i) (X i) μA (μ i)"}
{"name":"ProbabilityTheory.identDistrib_id_left","declaration":"theorem ProbabilityTheory.identDistrib_id_left {α : Type u_1} {β : Type u_2} [MeasurableSpace α] [MeasurableSpace β] {μ : MeasureTheory.Measure α} {X : α → β} (hX : AEMeasurable X μ) : ProbabilityTheory.IdentDistrib id X (MeasureTheory.Measure.map X μ) μ"}
{"name":"ProbabilityTheory.IdentDistrib.add","declaration":"theorem ProbabilityTheory.IdentDistrib.add {Ω : Type u_5} {Ω' : Type u_6} {β : Type u_9} {mΩ : MeasurableSpace Ω} {mΩ' : MeasurableSpace Ω'} {mβ : MeasurableSpace β} {μ : MeasureTheory.Measure Ω} {ν : MeasureTheory.Measure Ω'} {f : Ω → β} {g : Ω → β} {f' : Ω' → β} {g' : Ω' → β} [Add β] [MeasurableAdd₂ β] [MeasureTheory.IsFiniteMeasure μ] [MeasureTheory.IsFiniteMeasure ν] (hff' : ProbabilityTheory.IdentDistrib f f' μ ν) (hgg' : ProbabilityTheory.IdentDistrib g g' μ ν) (h : ProbabilityTheory.IndepFun f g μ) (h' : ProbabilityTheory.IndepFun f' g' ν) : ProbabilityTheory.IdentDistrib (f + g) (f' + g') μ ν"}
{"name":"ProbabilityTheory.identDistrib_of_sum","declaration":"/-- To show identical distribution of two random variables on a mixture of probability measures, it suffices to do so on each non-trivial component. -/\ntheorem ProbabilityTheory.identDistrib_of_sum {Ω : Type u_5} {Ω' : Type u_6} {α : Type u_7} {mΩ : MeasurableSpace Ω} {mΩ' : MeasurableSpace Ω'} [MeasurableSpace α] {T : Type u_11} {X : Ω → α} {Y : Ω' → α} [Fintype T] {μ : T → MeasureTheory.Measure Ω} {μ' : T → MeasureTheory.Measure Ω'} {w : T → ENNReal} (hX : Measurable X) (hY : Measurable Y) (h_ident : ∀ (y : T), w y ≠ 0 → ProbabilityTheory.IdentDistrib X Y (μ y) (μ' y)) : ProbabilityTheory.IdentDistrib X Y (Finset.sum Finset.univ fun y => w y • μ y)\n  (Finset.sum Finset.univ fun y => w y • μ' y)"}
{"name":"ProbabilityTheory.identDistrib_id","declaration":"theorem ProbabilityTheory.identDistrib_id {α : Type u_1} [MeasurableSpace α] {μ : MeasureTheory.Measure α} {ν : MeasureTheory.Measure α} : ProbabilityTheory.IdentDistrib id id μ ν ↔ μ = ν"}
{"name":"ProbabilityTheory.independent_copies3_nondep","declaration":"/-- A version with exactly 3 random variables that have the same codomain.\nIt's unfortunately incredibly painful to prove this from the general case. -/\ntheorem ProbabilityTheory.independent_copies3_nondep {α : Type u} [mS : MeasurableSpace α] {Ω₁ : Type u_1} {Ω₂ : Type u_2} {Ω₃ : Type u_3} [MeasurableSpace Ω₁] [MeasurableSpace Ω₂] [MeasurableSpace Ω₃] {X₁ : Ω₁ → α} {X₂ : Ω₂ → α} {X₃ : Ω₃ → α} (hX₁ : Measurable X₁) (hX₂ : Measurable X₂) (hX₃ : Measurable X₃) (μ₁ : MeasureTheory.Measure Ω₁) (μ₂ : MeasureTheory.Measure Ω₂) (μ₃ : MeasureTheory.Measure Ω₃) [hμ₁ : MeasureTheory.IsProbabilityMeasure μ₁] [hμ₂ : MeasureTheory.IsProbabilityMeasure μ₂] [hμ₃ : MeasureTheory.IsProbabilityMeasure μ₃] : ∃ A mA μA X₁' X₂' X₃',\n  MeasureTheory.IsProbabilityMeasure μA ∧\n    ProbabilityTheory.iIndepFun (fun x => mS) ![X₁', X₂', X₃'] μA ∧\n      Measurable X₁' ∧\n        Measurable X₂' ∧\n          Measurable X₃' ∧\n            ProbabilityTheory.IdentDistrib X₁' X₁ μA μ₁ ∧\n              ProbabilityTheory.IdentDistrib X₂' X₂ μA μ₂ ∧ ProbabilityTheory.IdentDistrib X₃' X₃ μA μ₃"}
{"name":"ProbabilityTheory.independent_copies4_nondep_finiteRange","declaration":"/-- A version of `independent_copies4_nondep` that guarantees that the copies have `FiniteRange` if the original variables do. -/\ntheorem ProbabilityTheory.independent_copies4_nondep_finiteRange {α : Type u} [mS : MeasurableSpace α] [MeasurableSingletonClass α] [Nonempty α] {Ω₁ : Type u_1} {Ω₂ : Type u_2} {Ω₃ : Type u_3} {Ω₄ : Type u_4} [MeasurableSpace Ω₁] [MeasurableSpace Ω₂] [MeasurableSpace Ω₃] [MeasurableSpace Ω₄] {X₁ : Ω₁ → α} {X₂ : Ω₂ → α} {X₃ : Ω₃ → α} {X₄ : Ω₄ → α} (hX₁ : Measurable X₁) (hX₂ : Measurable X₂) (hX₃ : Measurable X₃) (hX₄ : Measurable X₄) [FiniteRange X₁] [FiniteRange X₂] [FiniteRange X₃] [FiniteRange X₄] (μ₁ : MeasureTheory.Measure Ω₁) (μ₂ : MeasureTheory.Measure Ω₂) (μ₃ : MeasureTheory.Measure Ω₃) (μ₄ : MeasureTheory.Measure Ω₄) [hμ₁ : MeasureTheory.IsProbabilityMeasure μ₁] [hμ₂ : MeasureTheory.IsProbabilityMeasure μ₂] [hμ₃ : MeasureTheory.IsProbabilityMeasure μ₃] [hμ₄ : MeasureTheory.IsProbabilityMeasure μ₄] : ∃ A mA μA X₁' X₂' X₃' X₄',\n  MeasureTheory.IsProbabilityMeasure μA ∧\n    ProbabilityTheory.iIndepFun (fun x => mS) ![X₁', X₂', X₃', X₄'] μA ∧\n      Measurable X₁' ∧\n        Measurable X₂' ∧\n          Measurable X₃' ∧\n            Measurable X₄' ∧\n              ProbabilityTheory.IdentDistrib X₁' X₁ μA μ₁ ∧\n                ProbabilityTheory.IdentDistrib X₂' X₂ μA μ₂ ∧\n                  ProbabilityTheory.IdentDistrib X₃' X₃ μA μ₃ ∧\n                    ProbabilityTheory.IdentDistrib X₄' X₄ μA μ₄ ∧\n                      FiniteRange X₁' ∧ FiniteRange X₂' ∧ FiniteRange X₃' ∧ FiniteRange X₄'"}
{"name":"ProbabilityTheory.identDistrib_id_right","declaration":"theorem ProbabilityTheory.identDistrib_id_right {α : Type u_1} {β : Type u_2} [MeasurableSpace α] [MeasurableSpace β] {μ : MeasureTheory.Measure α} {X : α → β} (hX : AEMeasurable X μ) : ProbabilityTheory.IdentDistrib X id μ (MeasureTheory.Measure.map X μ)"}
{"name":"ProbabilityTheory.IdentDistrib.comp_left","declaration":"/-- Composing identically distributed functions with a measurable embedding of conull range\ngives identically distributed functions. -/\ntheorem ProbabilityTheory.IdentDistrib.comp_left {α : Type u_1} {β : Type u_2} {γ : Type u_3} {δ : Type u_4} [MeasurableSpace α] [MeasurableSpace β] [MeasurableSpace γ] [MeasurableSpace δ] {μ : MeasureTheory.Measure α} {ν : MeasureTheory.Measure β} {f : α → γ} {g : β → γ} {i : δ → α} (hi : MeasurableEmbedding i) (hi' : ∀ᵐ (a : α) ∂μ, a ∈ Set.range i) (hf : Measurable f) (hfg : ProbabilityTheory.IdentDistrib f g μ ν) : ProbabilityTheory.IdentDistrib (f ∘ i) g (MeasureTheory.Measure.comap i μ) ν"}
{"name":"ProbabilityTheory.identDistrib_comp_fst","declaration":"/-- A random variable is identically distributed to its lift to a product space (in the first factor). -/\ntheorem ProbabilityTheory.identDistrib_comp_fst {Ω : Type u_5} {Ω' : Type u_6} {α : Type u_7} {mΩ : MeasurableSpace Ω} {mΩ' : MeasurableSpace Ω'} [MeasurableSpace α] {X : Ω → α} (hX : Measurable X) (μ : MeasureTheory.Measure Ω) (μ' : MeasureTheory.Measure Ω') [MeasureTheory.IsProbabilityMeasure μ'] : ProbabilityTheory.IdentDistrib (X ∘ Prod.fst) X (MeasureTheory.Measure.prod μ μ') μ"}
{"name":"ProbabilityTheory.independent_copies_two","declaration":"/-- For $X, Y$ random variables, one can find independent copies $X', Y'$ of $X, Y$. Version\nformulated in spaces with a canonical measures. -/\ntheorem ProbabilityTheory.independent_copies_two {α : Type u_7} {β : Type u_9} [MeasurableSpace α] [MeasurableSpace β] {Ω : Type u} {Ω' : Type v} [MeasureTheory.MeasureSpace Ω] [MeasureTheory.MeasureSpace Ω'] [MeasureTheory.IsProbabilityMeasure MeasureTheory.volume] [MeasureTheory.IsProbabilityMeasure MeasureTheory.volume] {X : Ω → α} {Y : Ω' → β} (hX : Measurable X) (hY : Measurable Y) : ∃ Ω'' m'' X' Y',\n  MeasureTheory.IsProbabilityMeasure MeasureTheory.volume ∧\n    Measurable X' ∧\n      Measurable Y' ∧\n        ProbabilityTheory.IndepFun X' Y' MeasureTheory.volume ∧\n          ProbabilityTheory.IdentDistrib X' X MeasureTheory.volume MeasureTheory.volume ∧\n            ProbabilityTheory.IdentDistrib Y' Y MeasureTheory.volume MeasureTheory.volume"}
{"name":"ProbabilityTheory.identDistrib_iff","declaration":"theorem ProbabilityTheory.identDistrib_iff {α : Type u_1} {β : Type u_2} {γ : Type u_3} [MeasurableSpace α] [MeasurableSpace β] [MeasurableSpace γ] (f : α → γ) (g : β → γ) (μ : autoParam (MeasureTheory.Measure α) _auto✝) (ν : autoParam (MeasureTheory.Measure β) _auto✝) : ProbabilityTheory.IdentDistrib f g μ ν ↔\n  AEMeasurable f μ ∧ AEMeasurable g ν ∧ MeasureTheory.Measure.map f μ = MeasureTheory.Measure.map g ν"}
{"name":"ProbabilityTheory.IdentDistrib.comp_right","declaration":"/-- Composing identically distributed functions with a measurable embedding of conull range\ngives identically distributed functions. -/\ntheorem ProbabilityTheory.IdentDistrib.comp_right {α : Type u_1} {β : Type u_2} {γ : Type u_3} {δ : Type u_4} [MeasurableSpace α] [MeasurableSpace β] [MeasurableSpace γ] [MeasurableSpace δ] {μ : MeasureTheory.Measure α} {ν : MeasureTheory.Measure β} {f : α → γ} {g : β → γ} {i : δ → β} (hi : MeasurableEmbedding i) (hi' : ∀ᵐ (a : β) ∂ν, a ∈ Set.range i) (hg : Measurable g) (hfg : ProbabilityTheory.IdentDistrib f g μ ν) : ProbabilityTheory.IdentDistrib f (g ∘ i) μ (MeasureTheory.Measure.comap i ν)"}
{"name":"ProbabilityTheory.IdentDistrib.prod_mk","declaration":"theorem ProbabilityTheory.IdentDistrib.prod_mk {Ω : Type u_5} {Ω' : Type u_6} {β : Type u_9} {mΩ : MeasurableSpace Ω} {mΩ' : MeasurableSpace Ω'} {mβ : MeasurableSpace β} {μ : MeasureTheory.Measure Ω} {ν : MeasureTheory.Measure Ω'} {f : Ω → β} {g : Ω → β} {f' : Ω' → β} {g' : Ω' → β} [MeasureTheory.IsFiniteMeasure μ] [MeasureTheory.IsFiniteMeasure ν] (hff' : ProbabilityTheory.IdentDistrib f f' μ ν) (hgg' : ProbabilityTheory.IdentDistrib g g' μ ν) (h : ProbabilityTheory.IndepFun f g μ) (h' : ProbabilityTheory.IndepFun f' g' ν) : ProbabilityTheory.IdentDistrib (fun x => (f x, g x)) (fun x => (f' x, g' x)) μ ν"}
{"name":"ProbabilityTheory.identDistrib_comp_right","declaration":"/-- A function is identically distributed to itself composed with a measurable embedding of conull\nrange. -/\ntheorem ProbabilityTheory.identDistrib_comp_right {α : Type u_1} {γ : Type u_3} {δ : Type u_4} [MeasurableSpace α] [MeasurableSpace γ] [MeasurableSpace δ] {μ : MeasureTheory.Measure α} {f : α → γ} {i : δ → α} (hi : MeasurableEmbedding i) (hi' : ∀ᵐ (a : α) ∂μ, a ∈ Set.range i) (hf : Measurable f) : ProbabilityTheory.IdentDistrib f (f ∘ i) μ (MeasureTheory.Measure.comap i μ)"}
{"name":"ProbabilityTheory.IdentDistrib.fst_id","declaration":"/-- The first projection in a product space with measure `μ.prod ν` is distributed like `μ`. -/\ntheorem ProbabilityTheory.IdentDistrib.fst_id {α : Type u_1} {β : Type u_2} [MeasurableSpace α] [MeasurableSpace β] {μ : MeasureTheory.Measure α} {ν : MeasureTheory.Measure β} [MeasureTheory.IsProbabilityMeasure ν] : ProbabilityTheory.IdentDistrib Prod.fst id (MeasureTheory.Measure.prod μ ν) μ"}
