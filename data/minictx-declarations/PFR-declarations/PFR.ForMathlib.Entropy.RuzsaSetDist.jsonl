{"name":"MeasureTheory.Measure.discreteUniform_apply","declaration":"/-- The usual formula for the discrete uniform measure applied to an arbitrary set. -/\ntheorem MeasureTheory.Measure.discreteUniform_apply {S : Type u_1} [MeasurableSpace S] (H : Set S) [MeasurableSingletonClass S] [Finite ↑H] (A : Set S) : ↑↑(MeasureTheory.Measure.discreteUniform H) A = ↑(Nat.card ↑(A ∩ H)) / ↑(Nat.card ↑H)"}
{"name":"ProbabilityTheory.rdist_set_eq_rdist","declaration":"/-- Relating Ruzsa distance between sets to Ruzsa distance between random variables -/\ntheorem ProbabilityTheory.rdist_set_eq_rdist {G : Type u_1} [Countable G] [MeasurableSpace G] [MeasurableSingletonClass G] [AddCommGroup G] {A : Set G} {B : Set G} [Finite ↑A] [Finite ↑B] [Nonempty ↑A] [Nonempty ↑B] {Ω : Type u_2} {Ω' : Type u_3} [mΩ : MeasureTheory.MeasureSpace Ω] [mΩ' : MeasureTheory.MeasureSpace Ω'] {μ : MeasureTheory.Measure Ω} {μ' : MeasureTheory.Measure Ω'} (hμ : MeasureTheory.IsProbabilityMeasure μ) (hμ' : MeasureTheory.IsProbabilityMeasure μ') {UA : Ω → G} {UB : Ω' → G} (hUA : ProbabilityTheory.IsUniform A UA μ) (hUB : ProbabilityTheory.IsUniform B UB μ') (hUA_mes : Measurable UA) (hUB_mes : Measurable UB) : dᵤ[A # B] = d[UA ; μ # UB ; μ']"}
{"name":"ProbabilityTheory.rdist_set_nonneg","declaration":"/-- Ruzsa distance between sets is nonnegative. -/\ntheorem ProbabilityTheory.rdist_set_nonneg {G : Type u_1} [Countable G] [MeasurableSpace G] [MeasurableSingletonClass G] [AddCommGroup G] (A : Set G) (B : Set G) [Finite ↑A] [Finite ↑B] [Nonempty ↑A] [Nonempty ↑B] : 0 ≤ dᵤ[A # B]"}
{"name":"MeasureTheory.Measure.map_discreteUniform_of_inj","declaration":"/-- injective map of discrete uniform is discrete uniform -/\ntheorem MeasureTheory.Measure.map_discreteUniform_of_inj {S : Type u_1} [MeasurableSpace S] (H : Set S) [MeasurableSingletonClass S] [Finite ↑H] {T : Type u_2} [MeasurableSpace T] [MeasurableSingletonClass T] {f : S → T} (hmes : Measurable f) (hf : Function.Injective f) : MeasureTheory.Measure.map f (MeasureTheory.Measure.discreteUniform H) = MeasureTheory.Measure.discreteUniform (f '' H)"}
{"name":"ProbabilityTheory.rdist_set_le","declaration":"/-- Ruzsa distance between sets is controlled by the doubling constant. -/\ntheorem ProbabilityTheory.rdist_set_le {G : Type u_1} [Countable G] [MeasurableSpace G] [MeasurableSingletonClass G] [AddCommGroup G] (A : Set G) (B : Set G) [Finite ↑A] [Finite ↑B] (hA : Set.Nonempty A) (hB : Set.Nonempty B) : dᵤ[A # B] ≤ Real.log ↑(Nat.card ↑(A - B)) - Real.log ↑(Nat.card ↑A) / 2 - Real.log ↑(Nat.card ↑B) / 2"}
{"name":"MeasureTheory.Measure.isUniform_iff_uniform_dist","declaration":"/-- A random variable is uniform iff its distribution is. -/\ntheorem MeasureTheory.Measure.isUniform_iff_uniform_dist {S : Type u_1} [MeasurableSpace S] (H : Set S) [MeasurableSingletonClass S] [Finite ↑H] [Nonempty ↑H] {Ω : Type u_2} [mΩ : MeasurableSpace Ω] {μ : MeasureTheory.Measure Ω} [Countable S] (hμ : MeasureTheory.IsProbabilityMeasure μ) {U : Ω → S} (hU : Measurable U) : ProbabilityTheory.IsUniform H U μ ↔ MeasureTheory.Measure.map U μ = MeasureTheory.Measure.discreteUniform H"}
{"name":"ProbabilityTheory.«termDᵤ[_#_]»","declaration":"def ProbabilityTheory.«termDᵤ[_#_]»  : Lean.ParserDescr"}
{"name":"ProbabilityTheory.«termDᵤ[_#_]».delab","declaration":"/-- Pretty printer defined by `notation3` command. -/\ndef ProbabilityTheory.«termDᵤ[_#_]».delab  : Lean.PrettyPrinter.Delaborator.Delab"}
{"name":"ProbabilityTheory.rdist_set_add_const","declaration":"/-- Ruzsa distance between sets is translation invariant. -/\ntheorem ProbabilityTheory.rdist_set_add_const {G : Type u_1} [Countable G] [MeasurableSpace G] [MeasurableSingletonClass G] [AddCommGroup G] (A : Set G) (B : Set G) [Finite ↑A] [Finite ↑B] [Nonempty ↑A] [Nonempty ↑B] (c : G) (c' : G) : dᵤ[A + {c} # B + {c'}] = dᵤ[A # B]"}
{"name":"ProbabilityTheory.rdist_set_triangle","declaration":"/-- Ruzsa distance between sets obeys the triangle inequality. -/\ntheorem ProbabilityTheory.rdist_set_triangle {G : Type u_1} [Countable G] [MeasurableSpace G] [MeasurableSingletonClass G] [AddCommGroup G] (A : Set G) (B : Set G) (C : Set G) [Finite ↑A] [Finite ↑B] [Finite ↑C] [Nonempty ↑A] [Nonempty ↑B] [Nonempty ↑C] : dᵤ[A # C] ≤ dᵤ[A # B] + dᵤ[B # C]"}
{"name":"MeasureTheory.Measure.discreteUniform_apply'","declaration":"/-- Variant of `discreteUniform_apply' using real-valued measures. -/\ntheorem MeasureTheory.Measure.discreteUniform_apply' {S : Type u_1} [MeasurableSpace S] (H : Set S) [MeasurableSingletonClass S] [Finite ↑H] (A : Set S) : (MeasureTheory.Measure.discreteUniform H).real A = ↑(Nat.card ↑(A ∩ H)) / ↑(Nat.card ↑H)"}
{"name":"MeasureTheory.Measure.discreteUniform.isProbabilityMeasure","declaration":"instance MeasureTheory.Measure.discreteUniform.isProbabilityMeasure {S : Type u_1} [MeasurableSpace S] (H : Set S) [MeasurableSingletonClass S] [Finite ↑H] [Nonempty ↑H] : MeasureTheory.IsProbabilityMeasure (MeasureTheory.Measure.discreteUniform H)"}
{"name":"MeasureTheory.Measure.discreteUniform","declaration":"/-- In practice one would also impose the conditions `MeasurableSingletonClass S`, `Finite H` and `Nonempty H` before attempting to use this definition. -/\ndef MeasureTheory.Measure.discreteUniform {S : Type u_1} [MeasurableSpace S] (H : Set S) : MeasureTheory.Measure S"}
{"name":"ProbabilityTheory.rdist_set_of_inj","declaration":"/-- Ruzsa distance between sets is preserved by injective homomorphisms. -/\ntheorem ProbabilityTheory.rdist_set_of_inj {G : Type u_1} [Countable G] [MeasurableSpace G] [MeasurableSingletonClass G] [AddCommGroup G] (A : Set G) (B : Set G) [Finite ↑A] [Finite ↑B] [Nonempty ↑A] [Nonempty ↑B] {H : Type u_2} [hH : MeasurableSpace H] [MeasurableSingletonClass H] [AddCommGroup H] [Countable H] {φ : G →+ H} (hφ : Function.Injective ⇑φ) : dᵤ[⇑φ '' A # ⇑φ '' B] = dᵤ[A # B]"}
{"name":"ProbabilityTheory.rdist_set_symm","declaration":"/-- Ruzsa distance between sets is symmetric. -/\ntheorem ProbabilityTheory.rdist_set_symm {G : Type u_1} [Countable G] [MeasurableSpace G] [MeasurableSingletonClass G] [AddCommGroup G] (A : Set G) (B : Set G) [Finite ↑A] [Finite ↑B] [Nonempty ↑A] [Nonempty ↑B] : dᵤ[A # B] = dᵤ[B # A]"}
{"name":"MeasureTheory.Measure.discreteUniform_of_infinite","declaration":"/-- The uniform distribution on an infinite set vanishes by definition. -/\ntheorem MeasureTheory.Measure.discreteUniform_of_infinite {S : Type u_1} [MeasurableSpace S] (H : Set S) (h : Set.Infinite H) : MeasureTheory.Measure.discreteUniform H = 0"}
{"name":"ProbabilityTheory.entropy_of_discreteUniform","declaration":"/-- The entropy of a uniform measure is the log of the cardinality of its support. -/\ntheorem ProbabilityTheory.entropy_of_discreteUniform {S : Type u_1} [MeasurableSpace S] (H : Set S) [MeasurableSingletonClass S] [Finite ↑H] [Nonempty ↑H] : Hm[MeasureTheory.Measure.discreteUniform H] = Real.log ↑(Nat.card ↑H)"}
{"name":"ProbabilityTheory.rdist_set","declaration":"/-- The Ruzsa distance between two subsets `A`, `B` of a group `G` is defined to be the Ruzsa distance between their uniform probability distributions.  Is only intended for use when `A`, `B` are finite and non-empty. -/\ndef ProbabilityTheory.rdist_set {G : Type u_1} [MeasurableSpace G] [AddCommGroup G] (A : Set G) (B : Set G) : ℝ"}
