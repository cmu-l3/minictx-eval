{"name":"SMCharges.L","declaration":"/-- The `L` charges as a map `Fin n → ℚ`. -/\ndef SMCharges.L {n : ℕ} : ACCSystemCharges.Charges (SMCharges n) →ₗ[ℚ] ACCSystemCharges.Charges (SMSpecies n)"}
{"name":"SMACCs.quadBiLin_toFun_apply","declaration":"theorem SMACCs.quadBiLin_toFun_apply {n : ℕ} (S : ACCSystemCharges.Charges (SMCharges n)) (T : ACCSystemCharges.Charges (SMCharges n)) : (SMACCs.quadBiLin S) T =\n  Finset.sum Finset.univ fun x =>\n    S (finProdFinEquiv (0, x)) * T (finProdFinEquiv (0, x)) +\n            -(2 * (S (finProdFinEquiv (1, x)) * T (finProdFinEquiv (1, x)))) +\n          S (finProdFinEquiv (2, x)) * T (finProdFinEquiv (2, x)) +\n        -(S (finProdFinEquiv (3, x)) * T (finProdFinEquiv (3, x))) +\n      S (finProdFinEquiv (4, x)) * T (finProdFinEquiv (4, x))"}
{"name":"SMSpecies_numberCharges","declaration":"theorem SMSpecies_numberCharges (n : ℕ) : (SMSpecies n).numberCharges = n"}
{"name":"SMCharges.E","declaration":"/-- The `E` charges as a map `Fin n → ℚ`. -/\ndef SMCharges.E {n : ℕ} : ACCSystemCharges.Charges (SMCharges n) →ₗ[ℚ] ACCSystemCharges.Charges (SMSpecies n)"}
{"name":"SMCharges","declaration":"/-- Associate to each (including RHN) SM fermion a set of charges-/\ndef SMCharges (n : ℕ) : ACCSystemCharges"}
{"name":"SMCharges.Q","declaration":"/-- The `Q` charges as a map `Fin n → ℚ`. -/\ndef SMCharges.Q {n : ℕ} : ACCSystemCharges.Charges (SMCharges n) →ₗ[ℚ] ACCSystemCharges.Charges (SMSpecies n)"}
{"name":"SMCharges.charges_eq_toSpecies_eq","declaration":"theorem SMCharges.charges_eq_toSpecies_eq {n : ℕ} (S : ACCSystemCharges.Charges (SMCharges n)) (T : ACCSystemCharges.Charges (SMCharges n)) : S = T ↔ ∀ (i : Fin 5), (SMCharges.toSpecies i) S = (SMCharges.toSpecies i) T"}
{"name":"SMACCs.accCube_ext","declaration":"/-- Extensionality lemma for `accCube`. -/\ntheorem SMACCs.accCube_ext {n : ℕ} {S : ACCSystemCharges.Charges (SMCharges n)} {T : ACCSystemCharges.Charges (SMCharges n)} (h : ∀ (j : Fin 5),\n  (Finset.sum Finset.univ fun i => ((fun a => a ^ 3) ∘ (SMCharges.toSpecies j) S) i) =\n    Finset.sum Finset.univ fun i => ((fun a => a ^ 3) ∘ (SMCharges.toSpecies j) T) i) : SMACCs.accCube S = SMACCs.accCube T"}
{"name":"SMACCs.cubeTriLin_toFun_apply_apply","declaration":"theorem SMACCs.cubeTriLin_toFun_apply_apply {n : ℕ} (S : ACCSystemCharges.Charges (SMCharges n)) (S : ACCSystemCharges.Charges (SMCharges n)) (T : ACCSystemCharges.Charges (SMCharges n)) : ((SMACCs.cubeTriLin S✝) S) T =\n  Finset.sum Finset.univ fun i =>\n    6 * (S✝ (finProdFinEquiv (0, i)) * S (finProdFinEquiv (0, i)) * T (finProdFinEquiv (0, i))) +\n            3 * (S✝ (finProdFinEquiv (1, i)) * S (finProdFinEquiv (1, i)) * T (finProdFinEquiv (1, i))) +\n          3 * (S✝ (finProdFinEquiv (2, i)) * S (finProdFinEquiv (2, i)) * T (finProdFinEquiv (2, i))) +\n        2 * (S✝ (finProdFinEquiv (3, i)) * S (finProdFinEquiv (3, i)) * T (finProdFinEquiv (3, i))) +\n      S✝ (finProdFinEquiv (4, i)) * S (finProdFinEquiv (4, i)) * T (finProdFinEquiv (4, i))"}
{"name":"SMACCs.accGrav_ext","declaration":"/-- Extensionality lemma for `accGrav`. -/\ntheorem SMACCs.accGrav_ext {n : ℕ} {S : ACCSystemCharges.Charges (SMCharges n)} {T : ACCSystemCharges.Charges (SMCharges n)} (hj : ∀ (j : Fin 5),\n  (Finset.sum Finset.univ fun i => (SMCharges.toSpecies j) S i) =\n    Finset.sum Finset.univ fun i => (SMCharges.toSpecies j) T i) : SMACCs.accGrav S = SMACCs.accGrav T"}
{"name":"SMACCs.accYY","declaration":"/-- The `Y²` anomaly equation. -/\ndef SMACCs.accYY {n : ℕ} : ACCSystemCharges.Charges (SMCharges n) →ₗ[ℚ] ℚ"}
{"name":"SMACCs.accSU3","declaration":"/-- The `SU(3)` anomaly equations. -/\ndef SMACCs.accSU3 {n : ℕ} : ACCSystemCharges.Charges (SMCharges n) →ₗ[ℚ] ℚ"}
{"name":"SMCharges.toSpecies","declaration":"/-- For a given `i ∈ Fin 5`, the projection of a charge onto that species. -/\ndef SMCharges.toSpecies {n : ℕ} (i : Fin 5) : ACCSystemCharges.Charges (SMCharges n) →ₗ[ℚ] ACCSystemCharges.Charges (SMSpecies n)"}
{"name":"SMCharges_numberCharges","declaration":"theorem SMCharges_numberCharges (n : ℕ) : (SMCharges n).numberCharges = 5 * n"}
{"name":"SMCharges.D","declaration":"/-- The `D` charges as a map `Fin n → ℚ`. -/\ndef SMCharges.D {n : ℕ} : ACCSystemCharges.Charges (SMCharges n) →ₗ[ℚ] ACCSystemCharges.Charges (SMSpecies n)"}
{"name":"SMACCs.accYY_ext","declaration":"/-- Extensionality lemma for `accYY`. -/\ntheorem SMACCs.accYY_ext {n : ℕ} {S : ACCSystemCharges.Charges (SMCharges n)} {T : ACCSystemCharges.Charges (SMCharges n)} (hj : ∀ (j : Fin 5),\n  (Finset.sum Finset.univ fun i => (SMCharges.toSpecies j) S i) =\n    Finset.sum Finset.univ fun i => (SMCharges.toSpecies j) T i) : SMACCs.accYY S = SMACCs.accYY T"}
{"name":"SMCharges.toSpeciesEquiv_symm_apply","declaration":"theorem SMCharges.toSpeciesEquiv_symm_apply {n : ℕ} : ∀ (a : Fin 5 → Fin n → ℚ) (a_1 : Fin (5 * n)), SMCharges.toSpeciesEquiv.symm a a_1 = a (Fin.divNat a_1) (Fin.modNat a_1)"}
{"name":"SMACCs.accSU2_ext","declaration":"/-- Extensionality lemma for `accSU2`. -/\ntheorem SMACCs.accSU2_ext {n : ℕ} {S : ACCSystemCharges.Charges (SMCharges n)} {T : ACCSystemCharges.Charges (SMCharges n)} (hj : ∀ (j : Fin 5),\n  (Finset.sum Finset.univ fun i => (SMCharges.toSpecies j) S i) =\n    Finset.sum Finset.univ fun i => (SMCharges.toSpecies j) T i) : SMACCs.accSU2 S = SMACCs.accSU2 T"}
{"name":"SMACCs.cubeTriLin","declaration":"/-- The trilinear function defining the cubic. -/\ndef SMACCs.cubeTriLin {n : ℕ} : TriLinearSymm (ACCSystemCharges.Charges (SMCharges n))"}
{"name":"SMACCs.accGrav","declaration":"/-- The gravitational anomaly equation. -/\ndef SMACCs.accGrav {n : ℕ} : ACCSystemCharges.Charges (SMCharges n) →ₗ[ℚ] ℚ"}
{"name":"SMACCs.quadBiLin","declaration":"/-- The quadratic bilinear map. -/\ndef SMACCs.quadBiLin {n : ℕ} : BiLinearSymm (ACCSystemCharges.Charges (SMCharges n))"}
{"name":"SMACCs.accQuad_ext","declaration":"/-- Extensionality lemma for `accQuad`. -/\ntheorem SMACCs.accQuad_ext {n : ℕ} {S : ACCSystemCharges.Charges (SMCharges n)} {T : ACCSystemCharges.Charges (SMCharges n)} (h : ∀ (j : Fin 5),\n  (Finset.sum Finset.univ fun i => ((fun a => a ^ 2) ∘ (SMCharges.toSpecies j) S) i) =\n    Finset.sum Finset.univ fun i => ((fun a => a ^ 2) ∘ (SMCharges.toSpecies j) T) i) : SMACCs.accQuad S = SMACCs.accQuad T"}
{"name":"SMACCs.accQuad","declaration":"/-- The quadratic anomaly cancellation condition. -/\ndef SMACCs.accQuad {n : ℕ} : HomogeneousQuadratic (ACCSystemCharges.Charges (SMCharges n))"}
{"name":"SMACCs.accSU3_ext","declaration":"/-- Extensionality lemma for `accSU3`. -/\ntheorem SMACCs.accSU3_ext {n : ℕ} {S : ACCSystemCharges.Charges (SMCharges n)} {T : ACCSystemCharges.Charges (SMCharges n)} (hj : ∀ (j : Fin 5),\n  (Finset.sum Finset.univ fun i => (SMCharges.toSpecies j) S i) =\n    Finset.sum Finset.univ fun i => (SMCharges.toSpecies j) T i) : SMACCs.accSU3 S = SMACCs.accSU3 T"}
{"name":"SMCharges.toSpeciesEquiv","declaration":"/-- An equivalence between the set `(SMCharges n).charges` and the set\n`(Fin 5 → Fin n → ℚ)`. -/\ndef SMCharges.toSpeciesEquiv {n : ℕ} : ACCSystemCharges.Charges (SMCharges n) ≃ (Fin 5 → Fin n → ℚ)"}
{"name":"SMCharges.U","declaration":"/-- The `U` charges as a map `Fin n → ℚ`. -/\ndef SMCharges.U {n : ℕ} : ACCSystemCharges.Charges (SMCharges n) →ₗ[ℚ] ACCSystemCharges.Charges (SMSpecies n)"}
{"name":"SMSpecies","declaration":"/-- The vector space associated with a single species of fermions. -/\ndef SMSpecies (n : ℕ) : ACCSystemCharges"}
{"name":"SMCharges.toSpeciesEquiv_apply","declaration":"theorem SMCharges.toSpeciesEquiv_apply {n : ℕ} : ∀ (a : Fin (5 * n) → ℚ) (a_1 : Fin 5) (a_2 : Fin n), SMCharges.toSpeciesEquiv a a_1 a_2 = a (finProdFinEquiv (a_1, a_2))"}
{"name":"SMACCs.accSU2","declaration":"/-- The `SU(2)` anomaly equation. -/\ndef SMACCs.accSU2 {n : ℕ} : ACCSystemCharges.Charges (SMCharges n) →ₗ[ℚ] ℚ"}
{"name":"SMACCs.accCube","declaration":"/-- The cubic acc. -/\ndef SMACCs.accCube {n : ℕ} : HomogeneousCubic (ACCSystemCharges.Charges (SMCharges n))"}
{"name":"SMCharges.toSpecies_apply","declaration":"theorem SMCharges.toSpecies_apply {n : ℕ} (i : Fin 5) (S : ACCSystemCharges.Charges (SMCharges n)) : ∀ (a : Fin (SMSpecies n).numberCharges), (SMCharges.toSpecies i) S a = S (finProdFinEquiv (i, a))"}
{"name":"SMCharges.toSMSpecies_toSpecies_inv","declaration":"theorem SMCharges.toSMSpecies_toSpecies_inv {n : ℕ} (i : Fin 5) (f : Fin 5 → Fin n → ℚ) : (SMCharges.toSpecies i) (SMCharges.toSpeciesEquiv.symm f) = f i"}
