{"name":"SMRHN.PlusU1.QuadSol.toQuadInv_fst","declaration":"theorem SMRHN.PlusU1.QuadSol.toQuadInv_fst {n : ℕ} (C : ACCSystemQuad.QuadSols (SMRHN.PlusU1 n).toACCSystemQuad) (S : ACCSystemQuad.QuadSols (SMRHN.PlusU1 n).toACCSystemQuad) : (SMRHN.PlusU1.QuadSol.toQuadInv C S).1 = S.toLinSols"}
{"name":"SMRHN.PlusU1.QuadSol.special_on_quad","declaration":"theorem SMRHN.PlusU1.QuadSol.special_on_quad {n : ℕ} (C : ACCSystemQuad.QuadSols (SMRHN.PlusU1 n).toACCSystemQuad) (S : ACCSystemQuad.QuadSols (SMRHN.PlusU1 n).toACCSystemQuad) (h1 : SMRHN.PlusU1.QuadSol.α₁ C S.toLinSols = 0) : SMRHN.PlusU1.QuadSol.specialToQuad C S.toLinSols 1 0 h1 ⋯ = S"}
{"name":"SMRHN.PlusU1.QuadSol.toQuadInv_generic","declaration":"theorem SMRHN.PlusU1.QuadSol.toQuadInv_generic {n : ℕ} (C : ACCSystemQuad.QuadSols (SMRHN.PlusU1 n).toACCSystemQuad) (S : ACCSystemQuad.QuadSols (SMRHN.PlusU1 n).toACCSystemQuad) (h : SMRHN.PlusU1.QuadSol.α₁ C S.toLinSols ≠ 0) : (SMRHN.PlusU1.QuadSol.toQuadInv C S).2.1 • SMRHN.PlusU1.QuadSol.genericToQuad C (SMRHN.PlusU1.QuadSol.toQuadInv C S).1 =\n  S"}
{"name":"SMRHN.PlusU1.QuadSol.toQuadInv_special","declaration":"theorem SMRHN.PlusU1.QuadSol.toQuadInv_special {n : ℕ} (C : ACCSystemQuad.QuadSols (SMRHN.PlusU1 n).toACCSystemQuad) (S : ACCSystemQuad.QuadSols (SMRHN.PlusU1 n).toACCSystemQuad) (h : SMRHN.PlusU1.QuadSol.α₁ C S.toLinSols = 0) : SMRHN.PlusU1.QuadSol.specialToQuad C (SMRHN.PlusU1.QuadSol.toQuadInv C S).1 (SMRHN.PlusU1.QuadSol.toQuadInv C S).2.1\n    (SMRHN.PlusU1.QuadSol.toQuadInv C S).2.2 ⋯ ⋯ =\n  S"}
{"name":"SMRHN.PlusU1.QuadSol.genericToQuad_neq_zero","declaration":"theorem SMRHN.PlusU1.QuadSol.genericToQuad_neq_zero {n : ℕ} (C : ACCSystemQuad.QuadSols (SMRHN.PlusU1 n).toACCSystemQuad) (S : ACCSystemQuad.QuadSols (SMRHN.PlusU1 n).toACCSystemQuad) (h : SMRHN.PlusU1.QuadSol.α₁ C S.toLinSols ≠ 0) : (SMRHN.PlusU1.QuadSol.α₁ C S.toLinSols)⁻¹ • SMRHN.PlusU1.QuadSol.genericToQuad C S.toLinSols = S"}
{"name":"SMRHN.PlusU1.QuadSol.α₂_AFQ","declaration":"theorem SMRHN.PlusU1.QuadSol.α₂_AFQ {n : ℕ} (S : ACCSystemQuad.QuadSols (SMRHN.PlusU1 n).toACCSystemQuad) : SMRHN.PlusU1.QuadSol.α₂ S.toLinSols = 0"}
{"name":"SMRHN.PlusU1.QuadSol.genericToQuad","declaration":"/-- The construction of a `QuadSol` from a `LinSols` in the generic case. -/\ndef SMRHN.PlusU1.QuadSol.genericToQuad {n : ℕ} (C : ACCSystemQuad.QuadSols (SMRHN.PlusU1 n).toACCSystemQuad) (S : ACCSystemLinear.LinSols (SMRHN.PlusU1 n).toACCSystemLinear) : ACCSystemQuad.QuadSols (SMRHN.PlusU1 n).toACCSystemQuad"}
{"name":"SMRHN.PlusU1.QuadSol.accQuad_α₁_α₂_zero","declaration":"theorem SMRHN.PlusU1.QuadSol.accQuad_α₁_α₂_zero {n : ℕ} (C : ACCSystemQuad.QuadSols (SMRHN.PlusU1 n).toACCSystemQuad) (S : ACCSystemLinear.LinSols (SMRHN.PlusU1 n).toACCSystemLinear) (h1 : SMRHN.PlusU1.QuadSol.α₁ C S = 0) (h2 : SMRHN.PlusU1.QuadSol.α₂ S = 0) (a : ℚ) (b : ℚ) : SMνACCs.accQuad (a • S + b • C.toLinSols).val = 0"}
{"name":"SMRHN.PlusU1.QuadSol.genericToQuad_on_quad","declaration":"theorem SMRHN.PlusU1.QuadSol.genericToQuad_on_quad {n : ℕ} (C : ACCSystemQuad.QuadSols (SMRHN.PlusU1 n).toACCSystemQuad) (S : ACCSystemQuad.QuadSols (SMRHN.PlusU1 n).toACCSystemQuad) : SMRHN.PlusU1.QuadSol.genericToQuad C S.toLinSols = SMRHN.PlusU1.QuadSol.α₁ C S.toLinSols • S"}
{"name":"SMRHN.PlusU1.QuadSol.α₂","declaration":"/-- A helper function for what comes later. -/\ndef SMRHN.PlusU1.QuadSol.α₂ {n : ℕ} (S : ACCSystemLinear.LinSols (SMRHN.PlusU1 n).toACCSystemLinear) : ℚ"}
{"name":"SMRHN.PlusU1.QuadSol.accQuad_α₁_α₂","declaration":"theorem SMRHN.PlusU1.QuadSol.accQuad_α₁_α₂ {n : ℕ} (C : ACCSystemQuad.QuadSols (SMRHN.PlusU1 n).toACCSystemQuad) (S : ACCSystemLinear.LinSols (SMRHN.PlusU1 n).toACCSystemLinear) : SMνACCs.accQuad (SMRHN.PlusU1.QuadSol.α₁ C S • S + SMRHN.PlusU1.QuadSol.α₂ S • C.toLinSols).val = 0"}
{"name":"SMRHN.PlusU1.QuadSol.toQuad_surjective","declaration":"theorem SMRHN.PlusU1.QuadSol.toQuad_surjective {n : ℕ} (C : ACCSystemQuad.QuadSols (SMRHN.PlusU1 n).toACCSystemQuad) : Function.Surjective (SMRHN.PlusU1.QuadSol.toQuad C)"}
{"name":"SMRHN.PlusU1.QuadSol.toQuad_rightInverse","declaration":"theorem SMRHN.PlusU1.QuadSol.toQuad_rightInverse {n : ℕ} (C : ACCSystemQuad.QuadSols (SMRHN.PlusU1 n).toACCSystemQuad) : Function.RightInverse (SMRHN.PlusU1.QuadSol.toQuadInv C) (SMRHN.PlusU1.QuadSol.toQuad C)"}
{"name":"SMRHN.PlusU1.QuadSol.toQuadInv","declaration":"/-- A function from `QuadSols` to `LinSols × ℚ × ℚ` which is a right inverse to `toQuad`. -/\ndef SMRHN.PlusU1.QuadSol.toQuadInv {n : ℕ} (C : ACCSystemQuad.QuadSols (SMRHN.PlusU1 n).toACCSystemQuad) : ACCSystemQuad.QuadSols (SMRHN.PlusU1 n).toACCSystemQuad →\n  ACCSystemLinear.LinSols (SMRHN.PlusU1 n).toACCSystemLinear × ℚ × ℚ"}
{"name":"SMRHN.PlusU1.QuadSol.specialToQuad","declaration":"/-- The construction of a `QuadSol` from a `LinSols` in the special case when `α₁ C S = 0` and\n`α₂ S = 0`. -/\ndef SMRHN.PlusU1.QuadSol.specialToQuad {n : ℕ} (C : ACCSystemQuad.QuadSols (SMRHN.PlusU1 n).toACCSystemQuad) (S : ACCSystemLinear.LinSols (SMRHN.PlusU1 n).toACCSystemLinear) (a : ℚ) (b : ℚ) (h1 : SMRHN.PlusU1.QuadSol.α₁ C S = 0) (h2 : SMRHN.PlusU1.QuadSol.α₂ S = 0) : ACCSystemQuad.QuadSols (SMRHN.PlusU1 n).toACCSystemQuad"}
{"name":"SMRHN.PlusU1.QuadSol.add_AFL_quad","declaration":"theorem SMRHN.PlusU1.QuadSol.add_AFL_quad {n : ℕ} (C : ACCSystemQuad.QuadSols (SMRHN.PlusU1 n).toACCSystemQuad) (S : ACCSystemLinear.LinSols (SMRHN.PlusU1 n).toACCSystemLinear) (a : ℚ) (b : ℚ) : SMνACCs.accQuad (a • S.val + b • C.val) = a * (a * SMνACCs.accQuad S.val + 2 * b * (SMνACCs.quadBiLin S.val) C.val)"}
{"name":"SMRHN.PlusU1.QuadSol.toQuad","declaration":"/-- The construction of a `QuadSols` from a `LinSols` and two rationals taking account of the\ngeneric and special cases. This function is a surjection. -/\ndef SMRHN.PlusU1.QuadSol.toQuad {n : ℕ} (C : ACCSystemQuad.QuadSols (SMRHN.PlusU1 n).toACCSystemQuad) : ACCSystemLinear.LinSols (SMRHN.PlusU1 n).toACCSystemLinear × ℚ × ℚ →\n  ACCSystemQuad.QuadSols (SMRHN.PlusU1 n).toACCSystemQuad"}
{"name":"SMRHN.PlusU1.QuadSol.α₁","declaration":"/-- A helper function for what comes later. -/\ndef SMRHN.PlusU1.QuadSol.α₁ {n : ℕ} (C : ACCSystemQuad.QuadSols (SMRHN.PlusU1 n).toACCSystemQuad) (S : ACCSystemLinear.LinSols (SMRHN.PlusU1 n).toACCSystemLinear) : ℚ"}
{"name":"SMRHN.PlusU1.QuadSol.toQuadInv_α₁_α₂","declaration":"theorem SMRHN.PlusU1.QuadSol.toQuadInv_α₁_α₂ {n : ℕ} (C : ACCSystemQuad.QuadSols (SMRHN.PlusU1 n).toACCSystemQuad) (S : ACCSystemQuad.QuadSols (SMRHN.PlusU1 n).toACCSystemQuad) : SMRHN.PlusU1.QuadSol.α₁ C S.toLinSols = 0 ↔\n  SMRHN.PlusU1.QuadSol.α₁ C (SMRHN.PlusU1.QuadSol.toQuadInv C S).1 = 0 ∧\n    SMRHN.PlusU1.QuadSol.α₂ (SMRHN.PlusU1.QuadSol.toQuadInv C S).1 = 0"}
