{"name":"ACCSystemGroupAction.rep_linSolRep_commute","declaration":"/-- The representation on the charges and anomaly free solutions\ncommutes with the inclusion. -/\ntheorem ACCSystemGroupAction.rep_linSolRep_commute {χ : ACCSystem} (G : ACCSystemGroupAction χ) (g : G.group) (S : ACCSystemLinear.LinSols χ.toACCSystemLinear) : (ACCSystemLinear.linSolsIncl χ.toACCSystemLinear) (((ACCSystemGroupAction.linSolRep G) g) S) =\n  (G.rep g) ((ACCSystemLinear.linSolsIncl χ.toACCSystemLinear) S)"}
{"name":"ACCSystemGroupAction.solAction","declaration":"/-- The group action acting on solutions to the anomaly cancellation conditions. -/\ninstance ACCSystemGroupAction.solAction {χ : ACCSystem} (G : ACCSystemGroupAction χ) : MulAction G.group (ACCSystem.Sols χ)"}
{"name":"ACCSystemGroupAction.instGroupGroup","declaration":"instance ACCSystemGroupAction.instGroupGroup {χ : ACCSystem} (G : ACCSystemGroupAction χ) : Group G.group"}
{"name":"ACCSystemGroupAction.mk","declaration":"ctor ACCSystemGroupAction.mk {χ : ACCSystem} (group : Type) (groupInst : Group group) (rep : Representation ℚ group (ACCSystemCharges.Charges χ.toACCSystemCharges)) (linearInvariant : ∀ (i : Fin χ.numberLinear) (g : group) (S : ACCSystemCharges.Charges χ.toACCSystemCharges),\n  (χ.linearACCs i) ((rep g) S) = (χ.linearACCs i) S) (quadInvariant : ∀ (i : Fin χ.numberQuadratic) (g : group) (S : ACCSystemCharges.Charges χ.toACCSystemCharges),\n  (χ.quadraticACCs i) ((rep g) S) = (χ.quadraticACCs i) S) (cubicInvariant : ∀ (g : group) (S : ACCSystemCharges.Charges χ.toACCSystemCharges), χ.cubicACC ((rep g) S) = χ.cubicACC S) : ACCSystemGroupAction χ"}
{"name":"ACCSystemGroupAction.linSolRep","declaration":"/-- The representation acting on the vector space of solutions to the linear ACCs. -/\ndef ACCSystemGroupAction.linSolRep {χ : ACCSystem} (G : ACCSystemGroupAction χ) : Representation ℚ G.group (ACCSystemLinear.LinSols χ.toACCSystemLinear)"}
{"name":"ACCSystemGroupAction.quadInvariant","declaration":"/-- The invariance of the quadratic ACCs under the group action. -/\ndef ACCSystemGroupAction.quadInvariant {χ : ACCSystem} (self : ACCSystemGroupAction χ) (i : Fin χ.numberQuadratic) (g : self.group) (S : ACCSystemCharges.Charges χ.toACCSystemCharges) : (χ.quadraticACCs i) ((self.rep g) S) = (χ.quadraticACCs i) S"}
{"name":"ACCSystemGroupAction.cubicInvariant","declaration":"/-- The invariance of the cubic ACC under the group action. -/\ndef ACCSystemGroupAction.cubicInvariant {χ : ACCSystem} (self : ACCSystemGroupAction χ) (g : self.group) (S : ACCSystemCharges.Charges χ.toACCSystemCharges) : χ.cubicACC ((self.rep g) S) = χ.cubicACC S"}
{"name":"ACCSystemGroupAction","declaration":"/-- The type of a group action on a system of charges is defined as a representation on\nthe vector spaces of charges under which the anomaly equations are invariant.\n-/\nstructure ACCSystemGroupAction (χ : ACCSystem) : Type 1"}
{"name":"ACCSystemGroupAction.group","declaration":"/-- The underlying type of the group. -/\ndef ACCSystemGroupAction.group {χ : ACCSystem} (self : ACCSystemGroupAction χ) : Type"}
{"name":"ACCSystemGroupAction.quadSolAction","declaration":"/-- A multiplicative action of `G.group` on `quadSols`. -/\ninstance ACCSystemGroupAction.quadSolAction {χ : ACCSystem} (G : ACCSystemGroupAction χ) : MulAction G.group (ACCSystemQuad.QuadSols χ.toACCSystemQuad)"}
{"name":"ACCSystemGroupAction.linSolRep_solAction_commute","declaration":"theorem ACCSystemGroupAction.linSolRep_solAction_commute {χ : ACCSystem} (G : ACCSystemGroupAction χ) (g : G.group) (S : ACCSystem.Sols χ) : (ACCSystem.solsInclLinSols χ) ((MulAction.toFun G.group (ACCSystem.Sols χ)) S g) =\n  ((ACCSystemGroupAction.linSolRep G) g) ((ACCSystem.solsInclLinSols χ) S)"}
{"name":"ACCSystemGroupAction.rep","declaration":"/-- The representation of group acting on the vector space of charges. -/\ndef ACCSystemGroupAction.rep {χ : ACCSystem} (self : ACCSystemGroupAction χ) : Representation ℚ self.group (ACCSystemCharges.Charges χ.toACCSystemCharges)"}
{"name":"ACCSystemGroupAction.linSolRep_quadSolAction_commute","declaration":"theorem ACCSystemGroupAction.linSolRep_quadSolAction_commute {χ : ACCSystem} (G : ACCSystemGroupAction χ) (g : G.group) (S : ACCSystemQuad.QuadSols χ.toACCSystemQuad) : (ACCSystemQuad.quadSolsInclLinSols χ.toACCSystemQuad)\n    ((MulAction.toFun G.group (ACCSystemQuad.QuadSols χ.toACCSystemQuad)) S g) =\n  ((ACCSystemGroupAction.linSolRep G) g) ((ACCSystemQuad.quadSolsInclLinSols χ.toACCSystemQuad) S)"}
{"name":"ACCSystemGroupAction.linSolMap","declaration":"/-- The action of a group element on the vector space of linear solutions. -/\ndef ACCSystemGroupAction.linSolMap {χ : ACCSystem} (G : ACCSystemGroupAction χ) (g : G.group) : ACCSystemLinear.LinSols χ.toACCSystemLinear →ₗ[ℚ] ACCSystemLinear.LinSols χ.toACCSystemLinear"}
{"name":"ACCSystemGroupAction.quadSolAction_solAction_commute","declaration":"theorem ACCSystemGroupAction.quadSolAction_solAction_commute {χ : ACCSystem} (G : ACCSystemGroupAction χ) (g : G.group) (S : ACCSystem.Sols χ) : (ACCSystem.solsInclQuadSols χ) ((MulAction.toFun G.group (ACCSystem.Sols χ)) S g) =\n  (MulAction.toFun G.group (ACCSystemQuad.QuadSols χ.toACCSystemQuad)) ((ACCSystem.solsInclQuadSols χ) S) g"}
{"name":"ACCSystemGroupAction.groupInst","declaration":"/-- An instance given the `group` component the structure of a `Group`. -/\ndef ACCSystemGroupAction.groupInst {χ : ACCSystem} (self : ACCSystemGroupAction χ) : Group self.group"}
{"name":"ACCSystemGroupAction.linearInvariant","declaration":"/-- The invariance of the linear ACCs under the group action. -/\ndef ACCSystemGroupAction.linearInvariant {χ : ACCSystem} (self : ACCSystemGroupAction χ) (i : Fin χ.numberLinear) (g : self.group) (S : ACCSystemCharges.Charges χ.toACCSystemCharges) : (χ.linearACCs i) ((self.rep g) S) = (χ.linearACCs i) S"}
{"name":"ACCSystemGroupAction.rep_solAction_commute","declaration":"theorem ACCSystemGroupAction.rep_solAction_commute {χ : ACCSystem} (G : ACCSystemGroupAction χ) (g : G.group) (S : ACCSystem.Sols χ) : (ACCSystem.solsIncl χ) ((MulAction.toFun G.group (ACCSystem.Sols χ)) S g) = (G.rep g) ((ACCSystem.solsIncl χ) S)"}
{"name":"ACCSystemGroupAction.linSolRep_apply_apply_val","declaration":"theorem ACCSystemGroupAction.linSolRep_apply_apply_val {χ : ACCSystem} (G : ACCSystemGroupAction χ) (g : G.group) (S : ACCSystemLinear.LinSols χ.toACCSystemLinear) : (((ACCSystemGroupAction.linSolRep G) g) S).val = (G.rep g) S.val"}
{"name":"ACCSystemGroupAction.rep_quadSolAction_commute","declaration":"theorem ACCSystemGroupAction.rep_quadSolAction_commute {χ : ACCSystem} (G : ACCSystemGroupAction χ) (g : G.group) (S : ACCSystemQuad.QuadSols χ.toACCSystemQuad) : (ACCSystemQuad.quadSolsIncl χ.toACCSystemQuad)\n    ((MulAction.toFun G.group (ACCSystemQuad.QuadSols χ.toACCSystemQuad)) S g) =\n  (G.rep g) ((ACCSystemQuad.quadSolsIncl χ.toACCSystemQuad) S)"}
