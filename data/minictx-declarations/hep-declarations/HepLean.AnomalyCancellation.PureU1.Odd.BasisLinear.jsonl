{"name":"PureU1.VectorLikeOddPlane.δa₃","declaration":"/-- A helper function for what follows. -/\ndef PureU1.VectorLikeOddPlane.δa₃ {n : ℕ} : Fin (2 * Nat.succ n + 1)"}
{"name":"PureU1.VectorLikeOddPlane.basis_on_δ₃","declaration":"theorem PureU1.VectorLikeOddPlane.basis_on_δ₃ {n : ℕ} (j : Fin n) : PureU1.VectorLikeOddPlane.basisAsCharges j PureU1.VectorLikeOddPlane.δ₃ = 0"}
{"name":"PureU1.VectorLikeOddPlane.basis!AsCharges","declaration":"/-- The second part of the basis as charge assignments. -/\ndef PureU1.VectorLikeOddPlane.basis!AsCharges {n : ℕ} (j : Fin n) : ACCSystemCharges.Charges (PureU1 (2 * n + 1)).toACCSystemCharges"}
{"name":"PureU1.VectorLikeOddPlane.basisa","declaration":"/-- The whole basis as `LinSols`. -/\ndef PureU1.VectorLikeOddPlane.basisa {n : ℕ} : Fin n ⊕ Fin n → ACCSystemLinear.LinSols (PureU1 (2 * n + 1)).toACCSystemLinear"}
{"name":"PureU1.VectorLikeOddPlane.P_zero","declaration":"theorem PureU1.VectorLikeOddPlane.P_zero {n : ℕ} (f : Fin n → ℚ) (h : PureU1.VectorLikeOddPlane.P f = 0) (i : Fin n) : f i = 0"}
{"name":"PureU1.VectorLikeOddPlane.δa₄_δ!₂","declaration":"theorem PureU1.VectorLikeOddPlane.δa₄_δ!₂ {n : ℕ} (j : Fin (Nat.succ n)) : PureU1.VectorLikeOddPlane.δa₄ j = PureU1.VectorLikeOddPlane.δ!₂ j"}
{"name":"PureU1.VectorLikeOddPlane.sum_δ!","declaration":"theorem PureU1.VectorLikeOddPlane.sum_δ! {n : ℕ} (S : Fin (2 * n + 1) → ℚ) : (Finset.sum Finset.univ fun i => S i) =\n  S PureU1.VectorLikeOddPlane.δ!₃ +\n    Finset.sum Finset.univ fun i => (S ∘ PureU1.VectorLikeOddPlane.δ!₁) i + (S ∘ PureU1.VectorLikeOddPlane.δ!₂) i"}
{"name":"PureU1.VectorLikeOddPlane.Pa","declaration":"/-- A point in the span of the basis as a charge. -/\ndef PureU1.VectorLikeOddPlane.Pa {n : ℕ} (f : Fin n → ℚ) (g : Fin n → ℚ) : ACCSystemCharges.Charges (PureU1 (2 * n + 1)).toACCSystemCharges"}
{"name":"PureU1.VectorLikeOddPlane.δa₁_δ₁","declaration":"theorem PureU1.VectorLikeOddPlane.δa₁_δ₁ {n : ℕ} : PureU1.VectorLikeOddPlane.δa₁ = PureU1.VectorLikeOddPlane.δ₁ 0"}
{"name":"PureU1.VectorLikeOddPlane.basis_val","declaration":"theorem PureU1.VectorLikeOddPlane.basis_val {n : ℕ} (j : Fin n) : (PureU1.VectorLikeOddPlane.basis j).val = PureU1.VectorLikeOddPlane.basisAsCharges j"}
{"name":"PureU1.VectorLikeOddPlane.basis!_val","declaration":"theorem PureU1.VectorLikeOddPlane.basis!_val {n : ℕ} (j : Fin n) : (PureU1.VectorLikeOddPlane.basis! j).val = PureU1.VectorLikeOddPlane.basis!AsCharges j"}
{"name":"PureU1.VectorLikeOddPlane.basis_on_δ₂_self","declaration":"theorem PureU1.VectorLikeOddPlane.basis_on_δ₂_self {n : ℕ} (j : Fin n) : PureU1.VectorLikeOddPlane.basisAsCharges j (PureU1.VectorLikeOddPlane.δ₂ j) = -1"}
{"name":"PureU1.VectorLikeOddPlane.Pa'","declaration":"/-- A point in the span of the whole basis. -/\ndef PureU1.VectorLikeOddPlane.Pa' {n : ℕ} (f : Fin n ⊕ Fin n → ℚ) : ACCSystemLinear.LinSols (PureU1 (2 * n + 1)).toACCSystemLinear"}
{"name":"PureU1.VectorLikeOddPlane.split_adda","declaration":"theorem PureU1.VectorLikeOddPlane.split_adda (n : ℕ) : 1 + n + 1 + Nat.succ n = 2 * Nat.succ n + 1"}
{"name":"PureU1.VectorLikeOddPlane.P_δ₂","declaration":"theorem PureU1.VectorLikeOddPlane.P_δ₂ {n : ℕ} (f : Fin n → ℚ) (j : Fin n) : PureU1.VectorLikeOddPlane.P f (PureU1.VectorLikeOddPlane.δ₂ j) = -f j"}
{"name":"PureU1.VectorLikeOddPlane.basis!_linear_independent","declaration":"theorem PureU1.VectorLikeOddPlane.basis!_linear_independent {n : ℕ} : LinearIndependent ℚ PureU1.VectorLikeOddPlane.basis!"}
{"name":"PureU1.VectorLikeOddPlane.Pa_δa₃","declaration":"theorem PureU1.VectorLikeOddPlane.Pa_δa₃ {n : ℕ} (f : Fin (Nat.succ n) → ℚ) (g : Fin (Nat.succ n) → ℚ) : PureU1.VectorLikeOddPlane.Pa f g PureU1.VectorLikeOddPlane.δa₃ = g (Fin.last n)"}
{"name":"PureU1.VectorLikeOddPlane.join","declaration":"/-- A helper function for what follows. -/\ndef PureU1.VectorLikeOddPlane.join {n : ℕ} (g : Fin n → ℚ) (f : Fin n → ℚ) : Fin n ⊕ Fin n → ℚ"}
{"name":"PureU1.VectorLikeOddPlane.P!_zero","declaration":"theorem PureU1.VectorLikeOddPlane.P!_zero {n : ℕ} (f : Fin n → ℚ) (h : PureU1.VectorLikeOddPlane.P! f = 0) (i : Fin n) : f i = 0"}
{"name":"PureU1.VectorLikeOddPlane.basis!_on_δ!₁_self","declaration":"theorem PureU1.VectorLikeOddPlane.basis!_on_δ!₁_self {n : ℕ} (j : Fin n) : PureU1.VectorLikeOddPlane.basis!AsCharges j (PureU1.VectorLikeOddPlane.δ!₁ j) = 1"}
{"name":"PureU1.VectorLikeOddPlane.basis_linearACC","declaration":"theorem PureU1.VectorLikeOddPlane.basis_linearACC {n : ℕ} (j : Fin n) : (PureU1.accGrav (2 * n + 1)) (PureU1.VectorLikeOddPlane.basisAsCharges j) = 0"}
{"name":"PureU1.VectorLikeOddPlane.δa₂_δ!₁","declaration":"theorem PureU1.VectorLikeOddPlane.δa₂_δ!₁ {n : ℕ} (j : Fin n) : PureU1.VectorLikeOddPlane.δa₂ j = PureU1.VectorLikeOddPlane.δ!₁ (Fin.castSucc j)"}
{"name":"PureU1.VectorLikeOddPlane.Pa_eq","declaration":"theorem PureU1.VectorLikeOddPlane.Pa_eq {n : ℕ} (g : Fin (Nat.succ n) → ℚ) (g' : Fin (Nat.succ n) → ℚ) (f : Fin (Nat.succ n) → ℚ) (f' : Fin (Nat.succ n) → ℚ) : PureU1.VectorLikeOddPlane.Pa g f = PureU1.VectorLikeOddPlane.Pa g' f' ↔ g = g' ∧ f = f'"}
{"name":"PureU1.VectorLikeOddPlane.sum_δ","declaration":"theorem PureU1.VectorLikeOddPlane.sum_δ {n : ℕ} (S : Fin (2 * n + 1) → ℚ) : (Finset.sum Finset.univ fun i => S i) =\n  S PureU1.VectorLikeOddPlane.δ₃ +\n    Finset.sum Finset.univ fun i => (S ∘ PureU1.VectorLikeOddPlane.δ₁) i + (S ∘ PureU1.VectorLikeOddPlane.δ₂) i"}
{"name":"PureU1.VectorLikeOddPlane.δ₂_δ!₂","declaration":"theorem PureU1.VectorLikeOddPlane.δ₂_δ!₂ {n : ℕ} (j : Fin n) : PureU1.VectorLikeOddPlane.δ₂ j = PureU1.VectorLikeOddPlane.δ!₂ j"}
{"name":"PureU1.VectorLikeOddPlane.P_accCube","declaration":"theorem PureU1.VectorLikeOddPlane.P_accCube {n : ℕ} (f : Fin n → ℚ) : (PureU1.accCube (2 * n + 1)) (PureU1.VectorLikeOddPlane.P f) = 0"}
{"name":"PureU1.VectorLikeOddPlane.join_ext","declaration":"theorem PureU1.VectorLikeOddPlane.join_ext {n : ℕ} (g : Fin n → ℚ) (g' : Fin n → ℚ) (f : Fin n → ℚ) (f' : Fin n → ℚ) : PureU1.VectorLikeOddPlane.join g f = PureU1.VectorLikeOddPlane.join g' f' ↔ g = g' ∧ f = f'"}
{"name":"PureU1.VectorLikeOddPlane.P!_linearACC","declaration":"theorem PureU1.VectorLikeOddPlane.P!_linearACC {n : ℕ} (f : Fin n → ℚ) : (PureU1.accGrav (2 * n + 1)) (PureU1.VectorLikeOddPlane.P! f) = 0"}
{"name":"PureU1.VectorLikeOddPlane.P!_δ!₂","declaration":"theorem PureU1.VectorLikeOddPlane.P!_δ!₂ {n : ℕ} (f : Fin n → ℚ) (j : Fin n) : PureU1.VectorLikeOddPlane.P! f (PureU1.VectorLikeOddPlane.δ!₂ j) = -f j"}
{"name":"PureU1.VectorLikeOddPlane.δa₁","declaration":"/-- A helper function for what follows. -/\ndef PureU1.VectorLikeOddPlane.δa₁ {n : ℕ} : Fin (2 * Nat.succ n + 1)"}
{"name":"PureU1.VectorLikeOddPlane.basis!","declaration":"/-- The second part of the basis as `LinSols`. -/\ndef PureU1.VectorLikeOddPlane.basis! {n : ℕ} (j : Fin n) : ACCSystemLinear.LinSols (PureU1 (2 * n + 1)).toACCSystemLinear"}
{"name":"PureU1.VectorLikeOddPlane.span_basis","declaration":"theorem PureU1.VectorLikeOddPlane.span_basis {n : ℕ} (S : ACCSystemLinear.LinSols (PureU1 (2 * Nat.succ n + 1)).toACCSystemLinear) : ∃ g f, S.val = PureU1.VectorLikeOddPlane.P g + PureU1.VectorLikeOddPlane.P! f"}
{"name":"PureU1.VectorLikeOddPlane.basisa_card","declaration":"theorem PureU1.VectorLikeOddPlane.basisa_card {n : ℕ} : Fintype.card (Fin (Nat.succ n) ⊕ Fin (Nat.succ n)) =\n  FiniteDimensional.finrank ℚ (ACCSystemLinear.LinSols (PureU1 (2 * Nat.succ n + 1)).toACCSystemLinear)"}
{"name":"PureU1.VectorLikeOddPlane.δ!₃","declaration":"/-- A helper function for what follows. -/\ndef PureU1.VectorLikeOddPlane.δ!₃ {n : ℕ} : Fin (2 * n + 1)"}
{"name":"PureU1.VectorLikeOddPlane.P_P_P!_accCube","declaration":"theorem PureU1.VectorLikeOddPlane.P_P_P!_accCube {n : ℕ} (g : Fin n → ℚ) (j : Fin n) : ((PureU1.accCubeTriLinSymm (PureU1.VectorLikeOddPlane.P g)) (PureU1.VectorLikeOddPlane.P g))\n    (PureU1.VectorLikeOddPlane.basis!AsCharges j) =\n  PureU1.VectorLikeOddPlane.P g (PureU1.VectorLikeOddPlane.δ!₁ j) ^ 2 - g j ^ 2"}
{"name":"PureU1.VectorLikeOddPlane.P!_δ!₁","declaration":"theorem PureU1.VectorLikeOddPlane.P!_δ!₁ {n : ℕ} (f : Fin n → ℚ) (j : Fin n) : PureU1.VectorLikeOddPlane.P! f (PureU1.VectorLikeOddPlane.δ!₁ j) = f j"}
{"name":"PureU1.VectorLikeOddPlane.δ!₁","declaration":"/-- A helper function for what follows. -/\ndef PureU1.VectorLikeOddPlane.δ!₁ {n : ℕ} (j : Fin n) : Fin (2 * n + 1)"}
{"name":"PureU1.VectorLikeOddPlane.basis_δ₂_eq_minus_δ₁","declaration":"theorem PureU1.VectorLikeOddPlane.basis_δ₂_eq_minus_δ₁ {n : ℕ} (j : Fin n) (i : Fin n) : PureU1.VectorLikeOddPlane.basisAsCharges j (PureU1.VectorLikeOddPlane.δ₂ i) =\n  -PureU1.VectorLikeOddPlane.basisAsCharges j (PureU1.VectorLikeOddPlane.δ₁ i)"}
{"name":"PureU1.VectorLikeOddPlane.Pa'_P'_P!'","declaration":"theorem PureU1.VectorLikeOddPlane.Pa'_P'_P!' {n : ℕ} (f : Fin n ⊕ Fin n → ℚ) : PureU1.VectorLikeOddPlane.Pa' f =\n  PureU1.VectorLikeOddPlane.P' (f ∘ Sum.inl) + PureU1.VectorLikeOddPlane.P!' (f ∘ Sum.inr)"}
{"name":"PureU1.VectorLikeOddPlane.join_Pa","declaration":"theorem PureU1.VectorLikeOddPlane.join_Pa {n : ℕ} (g : Fin (Nat.succ n) → ℚ) (g' : Fin (Nat.succ n) → ℚ) (f : Fin (Nat.succ n) → ℚ) (f' : Fin (Nat.succ n) → ℚ) : PureU1.VectorLikeOddPlane.Pa' (PureU1.VectorLikeOddPlane.join g f) =\n    PureU1.VectorLikeOddPlane.Pa' (PureU1.VectorLikeOddPlane.join g' f') ↔\n  PureU1.VectorLikeOddPlane.Pa g f = PureU1.VectorLikeOddPlane.Pa g' f'"}
{"name":"PureU1.VectorLikeOddPlane.δa₁_δ!₃","declaration":"theorem PureU1.VectorLikeOddPlane.δa₁_δ!₃ {n : ℕ} : PureU1.VectorLikeOddPlane.δa₁ = PureU1.VectorLikeOddPlane.δ!₃"}
{"name":"PureU1.VectorLikeOddPlane.Pa_zero!","declaration":"theorem PureU1.VectorLikeOddPlane.Pa_zero! {n : ℕ} (f : Fin (Nat.succ n) → ℚ) (g : Fin (Nat.succ n) → ℚ) (h : PureU1.VectorLikeOddPlane.Pa f g = 0) (i : Fin (Nat.succ n)) : g i = 0"}
{"name":"PureU1.VectorLikeOddPlane.Pa_δa₄","declaration":"theorem PureU1.VectorLikeOddPlane.Pa_δa₄ {n : ℕ} (f : Fin (Nat.succ n) → ℚ) (g : Fin (Nat.succ n) → ℚ) (j : Fin (Nat.succ n)) : PureU1.VectorLikeOddPlane.Pa f g (PureU1.VectorLikeOddPlane.δa₄ j) = -f j - g j"}
{"name":"PureU1.VectorLikeOddPlane.δa₄_δ₂","declaration":"theorem PureU1.VectorLikeOddPlane.δa₄_δ₂ {n : ℕ} (j : Fin (Nat.succ n)) : PureU1.VectorLikeOddPlane.δa₄ j = PureU1.VectorLikeOddPlane.δ₂ j"}
{"name":"PureU1.VectorLikeOddPlane.swap!_as_add","declaration":"/-- Swapping the elements δ!₁ j and δ!₂ j is equivalent to adding a vector basis!AsCharges j. -/\ntheorem PureU1.VectorLikeOddPlane.swap!_as_add {n : ℕ} {S : ACCSystemLinear.LinSols (PureU1 (2 * n + 1)).toACCSystemLinear} {S' : ACCSystemLinear.LinSols (PureU1 (2 * n + 1)).toACCSystemLinear} (j : Fin n) (hS : ((ACCSystemGroupAction.linSolRep (PureU1.FamilyPermutations (2 * n + 1)))\n      (PureU1.pairSwap (PureU1.VectorLikeOddPlane.δ!₁ j) (PureU1.VectorLikeOddPlane.δ!₂ j)))\n    S =\n  S') : S'.val =\n  S.val +\n    (S.val (PureU1.VectorLikeOddPlane.δ!₂ j) - S.val (PureU1.VectorLikeOddPlane.δ!₁ j)) •\n      PureU1.VectorLikeOddPlane.basis!AsCharges j"}
{"name":"PureU1.VectorLikeOddPlane.δ₃","declaration":"/-- A helper function for what follows. -/\ndef PureU1.VectorLikeOddPlane.δ₃ {n : ℕ} : Fin (2 * n + 1)"}
{"name":"PureU1.VectorLikeOddPlane.δa₃_δ₃","declaration":"theorem PureU1.VectorLikeOddPlane.δa₃_δ₃ {n : ℕ} : PureU1.VectorLikeOddPlane.δa₃ = PureU1.VectorLikeOddPlane.δ₃"}
{"name":"PureU1.VectorLikeOddPlane.basis!_on_other","declaration":"theorem PureU1.VectorLikeOddPlane.basis!_on_other {n : ℕ} {k : Fin n} {j : Fin (2 * n + 1)} (h1 : j ≠ PureU1.VectorLikeOddPlane.δ!₁ k) (h2 : j ≠ PureU1.VectorLikeOddPlane.δ!₂ k) : PureU1.VectorLikeOddPlane.basis!AsCharges k j = 0"}
{"name":"PureU1.VectorLikeOddPlane.P!'","declaration":"/-- A point in the span of the second part of the basis. -/\ndef PureU1.VectorLikeOddPlane.P!' {n : ℕ} (f : Fin n → ℚ) : ACCSystemLinear.LinSols (PureU1 (2 * n + 1)).toACCSystemLinear"}
{"name":"PureU1.VectorLikeOddPlane.basisa_linear_independent","declaration":"theorem PureU1.VectorLikeOddPlane.basisa_linear_independent {n : ℕ} : LinearIndependent ℚ PureU1.VectorLikeOddPlane.basisa"}
{"name":"PureU1.VectorLikeOddPlane.δa₂_δ₁","declaration":"theorem PureU1.VectorLikeOddPlane.δa₂_δ₁ {n : ℕ} (j : Fin n) : PureU1.VectorLikeOddPlane.δa₂ j = PureU1.VectorLikeOddPlane.δ₁ (Fin.succ j)"}
{"name":"PureU1.VectorLikeOddPlane.P","declaration":"/-- A point in the span of the first part of the basis as a charge. -/\ndef PureU1.VectorLikeOddPlane.P {n : ℕ} (f : Fin n → ℚ) : ACCSystemCharges.Charges (PureU1 (2 * n + 1)).toACCSystemCharges"}
{"name":"PureU1.VectorLikeOddPlane.basis_on_δ₁_other","declaration":"theorem PureU1.VectorLikeOddPlane.basis_on_δ₁_other {n : ℕ} {k : Fin n} {j : Fin n} (h : k ≠ j) : PureU1.VectorLikeOddPlane.basisAsCharges k (PureU1.VectorLikeOddPlane.δ₁ j) = 0"}
{"name":"PureU1.VectorLikeOddPlane.δ₂","declaration":"/-- A helper function for what follows. -/\ndef PureU1.VectorLikeOddPlane.δ₂ {n : ℕ} (j : Fin n) : Fin (2 * n + 1)"}
{"name":"PureU1.VectorLikeOddPlane.P_linearACC","declaration":"theorem PureU1.VectorLikeOddPlane.P_linearACC {n : ℕ} (f : Fin n → ℚ) : (PureU1.accGrav (2 * n + 1)) (PureU1.VectorLikeOddPlane.P f) = 0"}
{"name":"PureU1.VectorLikeOddPlane.δ₁","declaration":"/-- A helper function for what follows. -/\ndef PureU1.VectorLikeOddPlane.δ₁ {n : ℕ} (j : Fin n) : Fin (2 * n + 1)"}
{"name":"PureU1.VectorLikeOddPlane.basis!_on_δ!₃","declaration":"theorem PureU1.VectorLikeOddPlane.basis!_on_δ!₃ {n : ℕ} (j : Fin n) : PureU1.VectorLikeOddPlane.basis!AsCharges j PureU1.VectorLikeOddPlane.δ!₃ = 0"}
{"name":"PureU1.VectorLikeOddPlane.δa₂","declaration":"/-- A helper function for what follows. -/\ndef PureU1.VectorLikeOddPlane.δa₂ {n : ℕ} (j : Fin n) : Fin (2 * Nat.succ n + 1)"}
{"name":"PureU1.VectorLikeOddPlane.δa₄","declaration":"/-- A helper function for what follows. -/\ndef PureU1.VectorLikeOddPlane.δa₄ {n : ℕ} (j : Fin (Nat.succ n)) : Fin (2 * Nat.succ n + 1)"}
{"name":"PureU1.VectorLikeOddPlane.δa₃_δ!₁","declaration":"theorem PureU1.VectorLikeOddPlane.δa₃_δ!₁ {n : ℕ} : PureU1.VectorLikeOddPlane.δa₃ = PureU1.VectorLikeOddPlane.δ!₁ (Fin.last n)"}
{"name":"PureU1.VectorLikeOddPlane.P!","declaration":"/-- A point in the span of the second part of the basis as a charge. -/\ndef PureU1.VectorLikeOddPlane.P! {n : ℕ} (f : Fin n → ℚ) : ACCSystemCharges.Charges (PureU1 (2 * n + 1)).toACCSystemCharges"}
{"name":"PureU1.VectorLikeOddPlane.P_δ₁","declaration":"theorem PureU1.VectorLikeOddPlane.P_δ₁ {n : ℕ} (f : Fin n → ℚ) (j : Fin n) : PureU1.VectorLikeOddPlane.P f (PureU1.VectorLikeOddPlane.δ₁ j) = f j"}
{"name":"PureU1.VectorLikeOddPlane.Pa_δa₂","declaration":"theorem PureU1.VectorLikeOddPlane.Pa_δa₂ {n : ℕ} (f : Fin (Nat.succ n) → ℚ) (g : Fin (Nat.succ n) → ℚ) (j : Fin n) : PureU1.VectorLikeOddPlane.Pa f g (PureU1.VectorLikeOddPlane.δa₂ j) = f (Fin.succ j) + g (Fin.castSucc j)"}
{"name":"PureU1.VectorLikeOddPlane.split_odd!","declaration":"theorem PureU1.VectorLikeOddPlane.split_odd! (n : ℕ) : 1 + n + n = 2 * n + 1"}
{"name":"PureU1.VectorLikeOddPlane.basisAsCharges","declaration":"/-- The first part of the basis as charge assignments. -/\ndef PureU1.VectorLikeOddPlane.basisAsCharges {n : ℕ} (j : Fin n) : ACCSystemCharges.Charges (PureU1 (2 * n + 1)).toACCSystemCharges"}
{"name":"PureU1.VectorLikeOddPlane.P!'_val","declaration":"theorem PureU1.VectorLikeOddPlane.P!'_val {n : ℕ} (f : Fin n → ℚ) : (PureU1.VectorLikeOddPlane.P!' f).val = PureU1.VectorLikeOddPlane.P! f"}
{"name":"PureU1.VectorLikeOddPlane.basis!_on_δ!₁_other","declaration":"theorem PureU1.VectorLikeOddPlane.basis!_on_δ!₁_other {n : ℕ} {k : Fin n} {j : Fin n} (h : k ≠ j) : PureU1.VectorLikeOddPlane.basis!AsCharges k (PureU1.VectorLikeOddPlane.δ!₁ j) = 0"}
{"name":"PureU1.VectorLikeOddPlane.Pa_δa₁","declaration":"theorem PureU1.VectorLikeOddPlane.Pa_δa₁ {n : ℕ} (f : Fin (Nat.succ n) → ℚ) (g : Fin (Nat.succ n) → ℚ) : PureU1.VectorLikeOddPlane.Pa f g PureU1.VectorLikeOddPlane.δa₁ = f 0"}
{"name":"PureU1.VectorLikeOddPlane.P!_accCube","declaration":"theorem PureU1.VectorLikeOddPlane.P!_accCube {n : ℕ} (f : Fin n → ℚ) : (PureU1.accCube (2 * n + 1)) (PureU1.VectorLikeOddPlane.P! f) = 0"}
{"name":"PureU1.VectorLikeOddPlane.Pa'_eq","declaration":"theorem PureU1.VectorLikeOddPlane.Pa'_eq {n : ℕ} (f : Fin (Nat.succ n) ⊕ Fin (Nat.succ n) → ℚ) (f' : Fin (Nat.succ n) ⊕ Fin (Nat.succ n) → ℚ) : PureU1.VectorLikeOddPlane.Pa' f = PureU1.VectorLikeOddPlane.Pa' f' ↔ f = f'"}
{"name":"PureU1.VectorLikeOddPlane.basis!_δ!₂_eq_minus_δ!₁","declaration":"theorem PureU1.VectorLikeOddPlane.basis!_δ!₂_eq_minus_δ!₁ {n : ℕ} (j : Fin n) (i : Fin n) : PureU1.VectorLikeOddPlane.basis!AsCharges j (PureU1.VectorLikeOddPlane.δ!₂ i) =\n  -PureU1.VectorLikeOddPlane.basis!AsCharges j (PureU1.VectorLikeOddPlane.δ!₁ i)"}
{"name":"PureU1.VectorLikeOddPlane.P'","declaration":"/-- A point in the span of the first part of the basis. -/\ndef PureU1.VectorLikeOddPlane.P' {n : ℕ} (f : Fin n → ℚ) : ACCSystemLinear.LinSols (PureU1 (2 * n + 1)).toACCSystemLinear"}
{"name":"PureU1.VectorLikeOddPlane.basis!_on_δ!₂_other","declaration":"theorem PureU1.VectorLikeOddPlane.basis!_on_δ!₂_other {n : ℕ} {k : Fin n} {j : Fin n} (h : k ≠ j) : PureU1.VectorLikeOddPlane.basis!AsCharges k (PureU1.VectorLikeOddPlane.δ!₂ j) = 0"}
{"name":"PureU1.VectorLikeOddPlane.basis!_on_δ!₂_self","declaration":"theorem PureU1.VectorLikeOddPlane.basis!_on_δ!₂_self {n : ℕ} (j : Fin n) : PureU1.VectorLikeOddPlane.basis!AsCharges j (PureU1.VectorLikeOddPlane.δ!₂ j) = -1"}
{"name":"PureU1.VectorLikeOddPlane.basis_on_other","declaration":"theorem PureU1.VectorLikeOddPlane.basis_on_other {n : ℕ} {k : Fin n} {j : Fin (2 * n + 1)} (h1 : j ≠ PureU1.VectorLikeOddPlane.δ₁ k) (h2 : j ≠ PureU1.VectorLikeOddPlane.δ₂ k) : PureU1.VectorLikeOddPlane.basisAsCharges k j = 0"}
{"name":"PureU1.VectorLikeOddPlane.P'_val","declaration":"theorem PureU1.VectorLikeOddPlane.P'_val {n : ℕ} (f : Fin n → ℚ) : (PureU1.VectorLikeOddPlane.P' f).val = PureU1.VectorLikeOddPlane.P f"}
{"name":"PureU1.VectorLikeOddPlane.basisaAsBasis","declaration":"/-- The basis formed out of our basisa vectors. -/\ndef PureU1.VectorLikeOddPlane.basisaAsBasis {n : ℕ} : Basis (Fin (Nat.succ n) ⊕ Fin (Nat.succ n)) ℚ (ACCSystemLinear.LinSols (PureU1 (2 * Nat.succ n + 1)).toACCSystemLinear)"}
{"name":"PureU1.VectorLikeOddPlane.P_δ₃","declaration":"theorem PureU1.VectorLikeOddPlane.P_δ₃ {n : ℕ} (f : Fin n → ℚ) : PureU1.VectorLikeOddPlane.P f PureU1.VectorLikeOddPlane.δ₃ = 0"}
{"name":"PureU1.VectorLikeOddPlane.span_basis_swap!","declaration":"theorem PureU1.VectorLikeOddPlane.span_basis_swap! {n : ℕ} {S' : ACCSystemLinear.LinSols (PureU1 (2 * Nat.succ n + 1)).toACCSystemLinear} {S : ACCSystemLinear.LinSols (PureU1 (2 * Nat.succ n + 1)).toACCSystemLinear} (j : Fin (Nat.succ n)) (hS : ((ACCSystemGroupAction.linSolRep (PureU1.FamilyPermutations (2 * Nat.succ n + 1)))\n      (PureU1.pairSwap (PureU1.VectorLikeOddPlane.δ!₁ j) (PureU1.VectorLikeOddPlane.δ!₂ j)))\n    S =\n  S') (g : Fin (Nat.succ n) → ℚ) (f : Fin (Nat.succ n) → ℚ) (hS1 : S.val = PureU1.VectorLikeOddPlane.P g + PureU1.VectorLikeOddPlane.P! f) : ∃ g' f',\n  S'.val = PureU1.VectorLikeOddPlane.P g' + PureU1.VectorLikeOddPlane.P! f' ∧\n    PureU1.VectorLikeOddPlane.P! f' =\n        PureU1.VectorLikeOddPlane.P! f +\n          (S.val (PureU1.VectorLikeOddPlane.δ!₂ j) - S.val (PureU1.VectorLikeOddPlane.δ!₁ j)) •\n            PureU1.VectorLikeOddPlane.basis!AsCharges j ∧\n      g' = g"}
{"name":"PureU1.VectorLikeOddPlane.basis_on_δ₂_other","declaration":"theorem PureU1.VectorLikeOddPlane.basis_on_δ₂_other {n : ℕ} {k : Fin n} {j : Fin n} (h : k ≠ j) : PureU1.VectorLikeOddPlane.basisAsCharges k (PureU1.VectorLikeOddPlane.δ₂ j) = 0"}
{"name":"PureU1.VectorLikeOddPlane.basis!_linearACC","declaration":"theorem PureU1.VectorLikeOddPlane.basis!_linearACC {n : ℕ} (j : Fin n) : (PureU1.accGrav (2 * n + 1)) (PureU1.VectorLikeOddPlane.basis!AsCharges j) = 0"}
{"name":"PureU1.VectorLikeOddPlane.basis_on_δ₁_self","declaration":"theorem PureU1.VectorLikeOddPlane.basis_on_δ₁_self {n : ℕ} (j : Fin n) : PureU1.VectorLikeOddPlane.basisAsCharges j (PureU1.VectorLikeOddPlane.δ₁ j) = 1"}
{"name":"PureU1.VectorLikeOddPlane.basis","declaration":"/-- The first part of the basis as `LinSols`. -/\ndef PureU1.VectorLikeOddPlane.basis {n : ℕ} (j : Fin n) : ACCSystemLinear.LinSols (PureU1 (2 * n + 1)).toACCSystemLinear"}
{"name":"PureU1.VectorLikeOddPlane.Pa_zero","declaration":"theorem PureU1.VectorLikeOddPlane.Pa_zero {n : ℕ} (f : Fin (Nat.succ n) → ℚ) (g : Fin (Nat.succ n) → ℚ) (h : PureU1.VectorLikeOddPlane.Pa f g = 0) (i : Fin (Nat.succ n)) : f i = 0"}
{"name":"PureU1.VectorLikeOddPlane.basis_linear_independent","declaration":"theorem PureU1.VectorLikeOddPlane.basis_linear_independent {n : ℕ} : LinearIndependent ℚ PureU1.VectorLikeOddPlane.basis"}
{"name":"PureU1.VectorLikeOddPlane.δ!₂","declaration":"/-- A helper function for what follows. -/\ndef PureU1.VectorLikeOddPlane.δ!₂ {n : ℕ} (j : Fin n) : Fin (2 * n + 1)"}
{"name":"PureU1.VectorLikeOddPlane.P!_δ!₃","declaration":"theorem PureU1.VectorLikeOddPlane.P!_δ!₃ {n : ℕ} (f : Fin n → ℚ) : PureU1.VectorLikeOddPlane.P! f PureU1.VectorLikeOddPlane.δ!₃ = 0"}
