{"name":"PureU1.LineInPlaneProp","declaration":"/-- The proposition on three rationals to satisfy the `linInPlane` condition. -/\ndef PureU1.LineInPlaneProp  : ℚ × ℚ × ℚ → Prop"}
{"name":"PureU1.lineInPlaneCond_perm","declaration":"theorem PureU1.lineInPlaneCond_perm {n : ℕ} {S : ACCSystemLinear.LinSols (PureU1 n).toACCSystemLinear} (hS : PureU1.LineInPlaneCond S) (M : (PureU1.FamilyPermutations n).group) : PureU1.LineInPlaneCond (((ACCSystemGroupAction.linSolRep (PureU1.FamilyPermutations n)) M) S)"}
{"name":"PureU1.linesInPlane_four","declaration":"theorem PureU1.linesInPlane_four (S : ACCSystem.Sols (PureU1 4)) (hS : PureU1.LineInPlaneCond S.toLinSols) : PureU1.ConstAbsProp (S.val 0, S.val 1)"}
{"name":"PureU1.linesInPlane_constAbs_four","declaration":"theorem PureU1.linesInPlane_constAbs_four (S : ACCSystem.Sols (PureU1 4)) (hS : PureU1.LineInPlaneCond S.toLinSols) : PureU1.ConstAbs S.val"}
{"name":"PureU1.linesInPlane_eq_sq","declaration":"theorem PureU1.linesInPlane_eq_sq {n : ℕ} {S : ACCSystemLinear.LinSols (PureU1 (Nat.succ (Nat.succ (Nat.succ (Nat.succ (Nat.succ n)))))).toACCSystemLinear} (hS : PureU1.LineInPlaneCond S) (i : Fin (Nat.succ (Nat.succ (Nat.succ (Nat.succ (Nat.succ n)))))) (j : Fin (Nat.succ (Nat.succ (Nat.succ (Nat.succ (Nat.succ n)))))) : i ≠ j → PureU1.ConstAbsProp (S.val i, S.val j)"}
{"name":"PureU1.linesInPlane_eq_sq_four","declaration":"theorem PureU1.linesInPlane_eq_sq_four {S : ACCSystem.Sols (PureU1 4)} (hS : PureU1.LineInPlaneCond S.toLinSols) (i : Fin 4) (j : Fin 4) : i ≠ j → PureU1.ConstAbsProp (S.val i, S.val j)"}
{"name":"PureU1.LineInPlaneCond","declaration":"/-- The proposition on a `LinSol` to satisfy the `linInPlane` condition. -/\ndef PureU1.LineInPlaneCond {n : ℕ} (S : ACCSystemLinear.LinSols (PureU1 n).toACCSystemLinear) : Prop"}
{"name":"PureU1.lineInPlaneCond_eq_last'","declaration":"theorem PureU1.lineInPlaneCond_eq_last' {n : ℕ} {S : ACCSystemLinear.LinSols (PureU1 (Nat.succ (Nat.succ n))).toACCSystemLinear} (hS : PureU1.LineInPlaneCond S) (h : ¬S.val (Fin.castSucc (Fin.last n)) ^ 2 = S.val (Fin.succ (Fin.last n)) ^ 2) : (2 - ↑n) * S.val (Fin.last (n + 1)) = -(2 - ↑n) * S.val (Fin.castSucc (Fin.last n))"}
{"name":"PureU1.linesInPlane_constAbs_AF","declaration":"theorem PureU1.linesInPlane_constAbs_AF {n : ℕ} (S : ACCSystem.Sols (PureU1 (Nat.succ (Nat.succ (Nat.succ (Nat.succ n)))))) (hS : PureU1.LineInPlaneCond S.toLinSols) : PureU1.ConstAbs S.val"}
{"name":"PureU1.linesInPlane_constAbs","declaration":"theorem PureU1.linesInPlane_constAbs {n : ℕ} {S : ACCSystemLinear.LinSols (PureU1 (Nat.succ (Nat.succ (Nat.succ (Nat.succ (Nat.succ n)))))).toACCSystemLinear} (hS : PureU1.LineInPlaneCond S) : PureU1.ConstAbs S.val"}
{"name":"PureU1.lineInPlaneCond_eq_last","declaration":"theorem PureU1.lineInPlaneCond_eq_last {n : ℕ} {S : ACCSystemLinear.LinSols (PureU1 (Nat.succ (Nat.succ (Nat.succ (Nat.succ (Nat.succ n)))))).toACCSystemLinear} (hS : PureU1.LineInPlaneCond S) : PureU1.ConstAbsProp\n  (S.val (Fin.castSucc (Fin.last (Nat.succ (Nat.succ (Nat.succ n))))),\n    S.val (Fin.succ (Fin.last (Nat.succ (Nat.succ (Nat.succ n))))))"}
