{"name":"SMRHN.SM.quadToAF","declaration":"/-- An element of `QuadSols` which satisfies the quadratic ACCs\ngives us a element of `Sols`. -/\ndef SMRHN.SM.quadToAF {n : ℕ} (S : ACCSystemQuad.QuadSols (SMRHN.SM n).toACCSystemQuad) (hc : SMνACCs.accCube S.val = 0) : ACCSystem.Sols (SMRHN.SM n)"}
{"name":"SMRHN.SM_numberCharges","declaration":"theorem SMRHN.SM_numberCharges (n : ℕ) : (SMRHN.SM n).numberCharges = 6 * n"}
{"name":"SMRHN.SM.linearToQuad","declaration":"/-- An element of `LinSols` which satisfies the quadratic ACCs\ngives us a element of `QuadSols`. -/\ndef SMRHN.SM.linearToQuad {n : ℕ} (S : ACCSystemLinear.LinSols (SMRHN.SM n).toACCSystemLinear) : ACCSystemQuad.QuadSols (SMRHN.SM n).toACCSystemQuad"}
{"name":"SMRHN.SM_numberQuadratic","declaration":"theorem SMRHN.SM_numberQuadratic (n : ℕ) : (SMRHN.SM n).numberQuadratic = 0"}
{"name":"SMRHN.SM_linearACCs","declaration":"theorem SMRHN.SM_linearACCs (n : ℕ) (i : Fin 3) : (SMRHN.SM n).linearACCs i =\n  match i with\n  | 0 =>\n    {\n      toAddHom :=\n        {\n          toFun := fun S =>\n            Finset.sum Finset.univ fun i =>\n              6 * S (finProdFinEquiv (0, i)) + 3 * S (finProdFinEquiv (1, i)) + 3 * S (finProdFinEquiv (2, i)) +\n                    2 * S (finProdFinEquiv (3, i)) +\n                  S (finProdFinEquiv (4, i)) +\n                S (finProdFinEquiv (5, i)),\n          map_add' := ⋯ },\n      map_smul' := ⋯ }\n  | 1 =>\n    {\n      toAddHom :=\n        { toFun := fun S => Finset.sum Finset.univ fun i => 3 * S (finProdFinEquiv (0, i)) + S (finProdFinEquiv (3, i)),\n          map_add' := ⋯ },\n      map_smul' := ⋯ }\n  | 2 =>\n    {\n      toAddHom :=\n        {\n          toFun := fun S =>\n            Finset.sum Finset.univ fun i =>\n              2 * S (finProdFinEquiv (0, i)) + S (finProdFinEquiv (1, i)) + S (finProdFinEquiv (2, i)),\n          map_add' := ⋯ },\n      map_smul' := ⋯ }"}
{"name":"SMRHN.SM.cubeSol","declaration":"theorem SMRHN.SM.cubeSol {n : ℕ} (S : ACCSystem.Sols (SMRHN.SM n)) : SMνACCs.accCube S.val = 0"}
{"name":"SMRHN.SM_numberLinear","declaration":"theorem SMRHN.SM_numberLinear (n : ℕ) : (SMRHN.SM n).numberLinear = 3"}
{"name":"SMRHN.SM.gravSol","declaration":"theorem SMRHN.SM.gravSol {n : ℕ} (S : ACCSystemLinear.LinSols (SMRHN.SM n).toACCSystemLinear) : SMνACCs.accGrav S.val = 0"}
{"name":"SMRHN.SM.SU3Sol","declaration":"theorem SMRHN.SM.SU3Sol {n : ℕ} (S : ACCSystemLinear.LinSols (SMRHN.SM n).toACCSystemLinear) : SMνACCs.accSU3 S.val = 0"}
{"name":"SMRHN.SM.perm","declaration":"/-- The permutations acting on the ACC system corresponding to the SM with RHN. -/\ndef SMRHN.SM.perm (n : ℕ) : ACCSystemGroupAction (SMRHN.SM n)"}
{"name":"SMRHN.SM.chargeToLinear","declaration":"/-- An element of `charges` which satisfies the linear ACCs\ngives us a element of `LinSols`. -/\ndef SMRHN.SM.chargeToLinear {n : ℕ} (S : ACCSystemCharges.Charges (SMRHN.SM n).toACCSystemCharges) (hGrav : SMνACCs.accGrav S = 0) (hSU2 : SMνACCs.accSU2 S = 0) (hSU3 : SMνACCs.accSU3 S = 0) : ACCSystemLinear.LinSols (SMRHN.SM n).toACCSystemLinear"}
{"name":"SMRHN.SM_quadraticACCs","declaration":"theorem SMRHN.SM_quadraticACCs (n : ℕ) (i : Fin 0) : (SMRHN.SM n).quadraticACCs i = Fin.elim0 i"}
{"name":"SMRHN.SM.SU2Sol","declaration":"theorem SMRHN.SM.SU2Sol {n : ℕ} (S : ACCSystemLinear.LinSols (SMRHN.SM n).toACCSystemLinear) : SMνACCs.accSU2 S.val = 0"}
{"name":"SMRHN.SM.chargeToAF","declaration":"/-- An element of `charges` which satisfies the linear, quadratic and cubic ACCs\ngives us a element of `Sols`. -/\ndef SMRHN.SM.chargeToAF {n : ℕ} (S : ACCSystemCharges.Charges (SMRHN.SM n).toACCSystemCharges) (hGrav : SMνACCs.accGrav S = 0) (hSU2 : SMνACCs.accSU2 S = 0) (hSU3 : SMνACCs.accSU3 S = 0) (hc : SMνACCs.accCube S = 0) : ACCSystem.Sols (SMRHN.SM n)"}
{"name":"SMRHN.SM_cubicACC_toFun","declaration":"theorem SMRHN.SM_cubicACC_toFun (n : ℕ) (S : ACCSystemCharges.Charges (SMνCharges n)) : (SMRHN.SM n).cubicACC.toFun S =\n  Finset.sum Finset.univ fun i =>\n    6 * (S (finProdFinEquiv (0, i)) * S (finProdFinEquiv (0, i)) * S (finProdFinEquiv (0, i))) +\n              3 * (S (finProdFinEquiv (1, i)) * S (finProdFinEquiv (1, i)) * S (finProdFinEquiv (1, i))) +\n            3 * (S (finProdFinEquiv (2, i)) * S (finProdFinEquiv (2, i)) * S (finProdFinEquiv (2, i))) +\n          2 * (S (finProdFinEquiv (3, i)) * S (finProdFinEquiv (3, i)) * S (finProdFinEquiv (3, i))) +\n        S (finProdFinEquiv (4, i)) * S (finProdFinEquiv (4, i)) * S (finProdFinEquiv (4, i)) +\n      S (finProdFinEquiv (5, i)) * S (finProdFinEquiv (5, i)) * S (finProdFinEquiv (5, i))"}
{"name":"SMRHN.SM.linearToAF","declaration":"/-- An element of `LinSols` which satisfies the quadratic and cubic ACCs\ngives us a element of `Sols`. -/\ndef SMRHN.SM.linearToAF {n : ℕ} (S : ACCSystemLinear.LinSols (SMRHN.SM n).toACCSystemLinear) (hc : SMνACCs.accCube S.val = 0) : ACCSystem.Sols (SMRHN.SM n)"}
{"name":"SMRHN.SM.chargeToQuad","declaration":"/-- An element of `charges` which satisfies the linear and quadratic ACCs\ngives us a element of `QuadSols`. -/\ndef SMRHN.SM.chargeToQuad {n : ℕ} (S : ACCSystemCharges.Charges (SMRHN.SM n).toACCSystemCharges) (hGrav : SMνACCs.accGrav S = 0) (hSU2 : SMνACCs.accSU2 S = 0) (hSU3 : SMνACCs.accSU3 S = 0) : ACCSystemQuad.QuadSols (SMRHN.SM n).toACCSystemQuad"}
{"name":"SMRHN.SM","declaration":"/-- The ACC system for the SM plus RHN. -/\ndef SMRHN.SM (n : ℕ) : ACCSystem"}
