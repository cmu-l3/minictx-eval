{"name":"transverseTactics.traverseForest","declaration":"/-- Applies `visitInfo` to each node of the info trees. -/\ndef transverseTactics.traverseForest (file : System.FilePath) (visitTacticInfo : System.FilePath → Lean.Elab.ContextInfo → Lean.Elab.TacticInfo → Lean.MetaM Unit) (steps : List (Lean.Environment × Lean.Elab.InfoState)) : List (IO Unit)"}
{"name":"transverseTactics","declaration":"/-- Applies `visitTacticInfo` to each tactic in a file. -/\ndef transverseTactics (file : System.FilePath) (visitTacticInfo : System.FilePath → Lean.Elab.ContextInfo → Lean.Elab.TacticInfo → Lean.MetaM Unit) : IO Unit"}
{"name":"transverseTactics.visitInfo","declaration":"/-- Tests if a given `info` is `ofTacticInfo` and if so runs `visitTacticInfo`. -/\ndef transverseTactics.visitInfo (file : System.FilePath) (env : Lean.Environment) (visitTacticInfo : System.FilePath → Lean.Elab.ContextInfo → Lean.Elab.TacticInfo → Lean.MetaM Unit) (ci : Lean.Elab.ContextInfo) (info : Lean.Elab.Info) (acc : List (IO Unit)) : List (IO Unit)"}
{"name":"transverseTactics.processCommands","declaration":"/-- Takes in a file and returns the infostates of commands and the corresponding\nenviroment before the command is processed. -/\nopaque transverseTactics.processCommands  : Lean.Elab.Frontend.FrontendM (List (Lean.Environment × Lean.Elab.InfoState))"}
