{"name":"PureU1.VectorLikeEvenPlane.P_δ₁","declaration":"theorem PureU1.VectorLikeEvenPlane.P_δ₁ {n : ℕ} (f : Fin (Nat.succ n) → ℚ) (j : Fin (Nat.succ n)) : PureU1.VectorLikeEvenPlane.P f (PureU1.VectorLikeEvenPlane.δ₁ j) = f j"}
{"name":"PureU1.VectorLikeEvenPlane.basis_δ₂_eq_minus_δ₁","declaration":"theorem PureU1.VectorLikeEvenPlane.basis_δ₂_eq_minus_δ₁ {n : ℕ} (j : Fin (Nat.succ n)) (i : Fin (Nat.succ n)) : PureU1.VectorLikeEvenPlane.basisAsCharges j (PureU1.VectorLikeEvenPlane.δ₂ i) =\n  -PureU1.VectorLikeEvenPlane.basisAsCharges j (PureU1.VectorLikeEvenPlane.δ₁ i)"}
{"name":"PureU1.VectorLikeEvenPlane.basis_on_δ₂_self","declaration":"theorem PureU1.VectorLikeEvenPlane.basis_on_δ₂_self {n : ℕ} (j : Fin (Nat.succ n)) : PureU1.VectorLikeEvenPlane.basisAsCharges j (PureU1.VectorLikeEvenPlane.δ₂ j) = -1"}
{"name":"PureU1.VectorLikeEvenPlane.P_δ₂","declaration":"theorem PureU1.VectorLikeEvenPlane.P_δ₂ {n : ℕ} (f : Fin (Nat.succ n) → ℚ) (j : Fin (Nat.succ n)) : PureU1.VectorLikeEvenPlane.P f (PureU1.VectorLikeEvenPlane.δ₂ j) = -f j"}
{"name":"PureU1.VectorLikeEvenPlane.Pa_δ!₂","declaration":"theorem PureU1.VectorLikeEvenPlane.Pa_δ!₂ {n : ℕ} (f : Fin (Nat.succ n) → ℚ) (g : Fin n → ℚ) (j : Fin n) : PureU1.VectorLikeEvenPlane.Pa f g (PureU1.VectorLikeEvenPlane.δ!₂ j) = -f (Fin.castSucc j) - g j"}
{"name":"PureU1.VectorLikeEvenPlane.P'","declaration":"/-- A point in the span of the first part of the basis. -/\ndef PureU1.VectorLikeEvenPlane.P' {n : ℕ} (f : Fin (Nat.succ n) → ℚ) : ACCSystemLinear.LinSols (PureU1 (2 * Nat.succ n)).toACCSystemLinear"}
{"name":"PureU1.VectorLikeEvenPlane.basis_on_δ₂_other","declaration":"theorem PureU1.VectorLikeEvenPlane.basis_on_δ₂_other {n : ℕ} {k : Fin (Nat.succ n)} {j : Fin (Nat.succ n)} (h : k ≠ j) : PureU1.VectorLikeEvenPlane.basisAsCharges k (PureU1.VectorLikeEvenPlane.δ₂ j) = 0"}
{"name":"PureU1.VectorLikeEvenPlane.δ₂","declaration":"/-- A helper function for what follows. -/\ndef PureU1.VectorLikeEvenPlane.δ₂ {n : ℕ} (j : Fin (Nat.succ n)) : Fin (2 * Nat.succ n)"}
{"name":"PureU1.VectorLikeEvenPlane.basis!_linearACC","declaration":"theorem PureU1.VectorLikeEvenPlane.basis!_linearACC {n : ℕ} (j : Fin n) : (PureU1.accGrav (2 * Nat.succ n)) (PureU1.VectorLikeEvenPlane.basis!AsCharges j) = 0"}
{"name":"PureU1.VectorLikeEvenPlane.Pa_zero","declaration":"theorem PureU1.VectorLikeEvenPlane.Pa_zero {n : ℕ} (f : Fin (Nat.succ n) → ℚ) (g : Fin n → ℚ) (h : PureU1.VectorLikeEvenPlane.Pa f g = 0) (i : Fin (Nat.succ n)) : f i = 0"}
{"name":"PureU1.VectorLikeEvenPlane.δ₁","declaration":"/-- A helper function for what follows. -/\ndef PureU1.VectorLikeEvenPlane.δ₁ {n : ℕ} (j : Fin (Nat.succ n)) : Fin (2 * Nat.succ n)"}
{"name":"PureU1.VectorLikeEvenPlane.P'_val","declaration":"theorem PureU1.VectorLikeEvenPlane.P'_val {n : ℕ} (f : Fin (Nat.succ n) → ℚ) : (PureU1.VectorLikeEvenPlane.P' f).val = PureU1.VectorLikeEvenPlane.P f"}
{"name":"PureU1.VectorLikeEvenPlane.P_linearACC","declaration":"theorem PureU1.VectorLikeEvenPlane.P_linearACC {n : ℕ} (f : Fin (Nat.succ n) → ℚ) : (PureU1.accGrav (2 * Nat.succ n)) (PureU1.VectorLikeEvenPlane.P f) = 0"}
{"name":"PureU1.VectorLikeEvenPlane.Pa'_eq","declaration":"theorem PureU1.VectorLikeEvenPlane.Pa'_eq {n : ℕ} (f : Fin (Nat.succ n) ⊕ Fin n → ℚ) (f' : Fin (Nat.succ n) ⊕ Fin n → ℚ) : PureU1.VectorLikeEvenPlane.Pa' f = PureU1.VectorLikeEvenPlane.Pa' f' ↔ f = f'"}
{"name":"PureU1.VectorLikeEvenPlane.basis_val","declaration":"theorem PureU1.VectorLikeEvenPlane.basis_val {n : ℕ} (j : Fin (Nat.succ n)) : (PureU1.VectorLikeEvenPlane.basis j).val = PureU1.VectorLikeEvenPlane.basisAsCharges j"}
{"name":"PureU1.VectorLikeEvenPlane.basis!_on_δ!₁_self","declaration":"theorem PureU1.VectorLikeEvenPlane.basis!_on_δ!₁_self {n : ℕ} (j : Fin n) : PureU1.VectorLikeEvenPlane.basis!AsCharges j (PureU1.VectorLikeEvenPlane.δ!₁ j) = 1"}
{"name":"PureU1.VectorLikeEvenPlane.basis!AsCharges","declaration":"/-- The second part of the basis as charges. -/\ndef PureU1.VectorLikeEvenPlane.basis!AsCharges {n : ℕ} (j : Fin n) : ACCSystemCharges.Charges (PureU1 (2 * Nat.succ n)).toACCSystemCharges"}
{"name":"PureU1.VectorLikeEvenPlane.Pa_δ!₃","declaration":"theorem PureU1.VectorLikeEvenPlane.Pa_δ!₃ {n : ℕ} (f : Fin (Nat.succ n) → ℚ) (g : Fin n → ℚ) : PureU1.VectorLikeEvenPlane.Pa f g PureU1.VectorLikeEvenPlane.δ!₃ = f 0"}
{"name":"PureU1.VectorLikeEvenPlane.sum_δ₁_δ₂","declaration":"theorem PureU1.VectorLikeEvenPlane.sum_δ₁_δ₂ {n : ℕ} (S : Fin (2 * Nat.succ n) → ℚ) : (Finset.sum Finset.univ fun i => S i) =\n  Finset.sum Finset.univ fun i => (S ∘ PureU1.VectorLikeEvenPlane.δ₁) i + (S ∘ PureU1.VectorLikeEvenPlane.δ₂) i"}
{"name":"PureU1.VectorLikeEvenPlane.δ!₄_δ₂Last","declaration":"theorem PureU1.VectorLikeEvenPlane.δ!₄_δ₂Last {n : ℕ} : PureU1.VectorLikeEvenPlane.δ!₄ = PureU1.VectorLikeEvenPlane.δ₂ (Fin.last n)"}
{"name":"PureU1.VectorLikeEvenPlane.basis!_linear_independent","declaration":"theorem PureU1.VectorLikeEvenPlane.basis!_linear_independent {n : ℕ} : LinearIndependent ℚ PureU1.VectorLikeEvenPlane.basis!"}
{"name":"PureU1.VectorLikeEvenPlane.P!_zero","declaration":"theorem PureU1.VectorLikeEvenPlane.P!_zero {n : ℕ} (f : Fin n → ℚ) (h : PureU1.VectorLikeEvenPlane.P! f = 0) (i : Fin n) : f i = 0"}
{"name":"PureU1.VectorLikeEvenPlane.join","declaration":"/-- A helper function for what follows. -/\ndef PureU1.VectorLikeEvenPlane.join {n : ℕ} (g : Fin (Nat.succ n) → ℚ) (f : Fin n → ℚ) : Fin (Nat.succ n) ⊕ Fin n → ℚ"}
{"name":"PureU1.VectorLikeEvenPlane.basis_accCube","declaration":"theorem PureU1.VectorLikeEvenPlane.basis_accCube {n : ℕ} (j : Fin (Nat.succ n)) : (PureU1.accCube (2 * Nat.succ n)) (PureU1.VectorLikeEvenPlane.basisAsCharges j) = 0"}
{"name":"PureU1.VectorLikeEvenPlane.δ!₂_δ₂","declaration":"theorem PureU1.VectorLikeEvenPlane.δ!₂_δ₂ {n : ℕ} (j : Fin n) : PureU1.VectorLikeEvenPlane.δ!₂ j = PureU1.VectorLikeEvenPlane.δ₂ (Fin.castSucc j)"}
{"name":"PureU1.VectorLikeEvenPlane.P!'_val","declaration":"theorem PureU1.VectorLikeEvenPlane.P!'_val {n : ℕ} (f : Fin n → ℚ) : (PureU1.VectorLikeEvenPlane.P!' f).val = PureU1.VectorLikeEvenPlane.P! f"}
{"name":"PureU1.VectorLikeEvenPlane.P_P_P!_accCube","declaration":"theorem PureU1.VectorLikeEvenPlane.P_P_P!_accCube {n : ℕ} (g : Fin (Nat.succ n) → ℚ) (j : Fin n) : ((PureU1.accCubeTriLinSymm (PureU1.VectorLikeEvenPlane.P g)) (PureU1.VectorLikeEvenPlane.P g))\n    (PureU1.VectorLikeEvenPlane.basis!AsCharges j) =\n  g (Fin.succ j) ^ 2 - g (Fin.castSucc j) ^ 2"}
{"name":"PureU1.VectorLikeEvenPlane.Pa","declaration":"/-- A point in the span of the basis as a charge. -/\ndef PureU1.VectorLikeEvenPlane.Pa {n : ℕ} (f : Fin (Nat.succ n) → ℚ) (g : Fin n → ℚ) : ACCSystemCharges.Charges (PureU1 (2 * Nat.succ n)).toACCSystemCharges"}
{"name":"PureU1.VectorLikeEvenPlane.P!","declaration":"/-- A point in the span of the second part of the basis as a charge. -/\ndef PureU1.VectorLikeEvenPlane.P! {n : ℕ} (f : Fin n → ℚ) : ACCSystemCharges.Charges (PureU1 (2 * Nat.succ n)).toACCSystemCharges"}
{"name":"PureU1.VectorLikeEvenPlane.vectorLikeEven_in_span","declaration":"theorem PureU1.VectorLikeEvenPlane.vectorLikeEven_in_span {n : ℕ} (S : ACCSystemLinear.LinSols (PureU1 (2 * Nat.succ n)).toACCSystemLinear) (hS : PureU1.VectorLikeEven S.val) : ∃ M,\n  ((ACCSystemGroupAction.linSolRep (PureU1.FamilyPermutations (2 * Nat.succ n))) M) S ∈\n    Submodule.span ℚ (Set.range PureU1.VectorLikeEvenPlane.basis)"}
{"name":"PureU1.VectorLikeEvenPlane.P!_in_span","declaration":"theorem PureU1.VectorLikeEvenPlane.P!_in_span {n : ℕ} (f : Fin n → ℚ) : PureU1.VectorLikeEvenPlane.P! f ∈ Submodule.span ℚ (Set.range PureU1.VectorLikeEvenPlane.basis!AsCharges)"}
{"name":"PureU1.VectorLikeEvenPlane.basis!_on_δ!₂_other","declaration":"theorem PureU1.VectorLikeEvenPlane.basis!_on_δ!₂_other {n : ℕ} {k : Fin n} {j : Fin n} (h : k ≠ j) : PureU1.VectorLikeEvenPlane.basis!AsCharges k (PureU1.VectorLikeEvenPlane.δ!₂ j) = 0"}
{"name":"PureU1.VectorLikeEvenPlane.P_zero","declaration":"theorem PureU1.VectorLikeEvenPlane.P_zero {n : ℕ} (f : Fin (Nat.succ n) → ℚ) (h : PureU1.VectorLikeEvenPlane.P f = 0) (i : Fin (Nat.succ n)) : f i = 0"}
{"name":"PureU1.VectorLikeEvenPlane.P!'","declaration":"/-- A point in the span of the second part of the basis. -/\ndef PureU1.VectorLikeEvenPlane.P!' {n : ℕ} (f : Fin n → ℚ) : ACCSystemLinear.LinSols (PureU1 (2 * Nat.succ n)).toACCSystemLinear"}
{"name":"PureU1.VectorLikeEvenPlane.basis_on_δ₁_self","declaration":"theorem PureU1.VectorLikeEvenPlane.basis_on_δ₁_self {n : ℕ} (j : Fin (Nat.succ n)) : PureU1.VectorLikeEvenPlane.basisAsCharges j (PureU1.VectorLikeEvenPlane.δ₁ j) = 1"}
{"name":"PureU1.VectorLikeEvenPlane.δ!₃_δ₁0","declaration":"theorem PureU1.VectorLikeEvenPlane.δ!₃_δ₁0 {n : ℕ} : PureU1.VectorLikeEvenPlane.δ!₃ = PureU1.VectorLikeEvenPlane.δ₁ 0"}
{"name":"PureU1.VectorLikeEvenPlane.P_accCube","declaration":"theorem PureU1.VectorLikeEvenPlane.P_accCube {n : ℕ} (f : Fin (Nat.succ n) → ℚ) : (PureU1.accCube (2 * Nat.succ n)) (PureU1.VectorLikeEvenPlane.P f) = 0"}
{"name":"PureU1.VectorLikeEvenPlane.Pa_zero!","declaration":"theorem PureU1.VectorLikeEvenPlane.Pa_zero! {n : ℕ} (f : Fin (Nat.succ n) → ℚ) (g : Fin n → ℚ) (h : PureU1.VectorLikeEvenPlane.Pa f g = 0) (i : Fin n) : g i = 0"}
{"name":"PureU1.VectorLikeEvenPlane.sum_δ!₁_δ!₂","declaration":"theorem PureU1.VectorLikeEvenPlane.sum_δ!₁_δ!₂ {n : ℕ} (S : Fin (2 * Nat.succ n) → ℚ) : (Finset.sum Finset.univ fun i => S i) =\n  S PureU1.VectorLikeEvenPlane.δ!₃ + S PureU1.VectorLikeEvenPlane.δ!₄ +\n    Finset.sum Finset.univ fun i => (S ∘ PureU1.VectorLikeEvenPlane.δ!₁) i + (S ∘ PureU1.VectorLikeEvenPlane.δ!₂) i"}
{"name":"PureU1.VectorLikeEvenPlane.sum_δ₁_δ₂'","declaration":"theorem PureU1.VectorLikeEvenPlane.sum_δ₁_δ₂' {n : ℕ} (S : Fin (2 * Nat.succ n) → ℚ) : (Finset.sum Finset.univ fun i => S i) =\n  Finset.sum Finset.univ fun i => (S ∘ PureU1.VectorLikeEvenPlane.δ₁) i + (S ∘ PureU1.VectorLikeEvenPlane.δ₂) i"}
{"name":"PureU1.VectorLikeEvenPlane.P","declaration":"/-- A point in the span of the first part of the basis as a charge. -/\ndef PureU1.VectorLikeEvenPlane.P {n : ℕ} (f : Fin (Nat.succ n) → ℚ) : ACCSystemCharges.Charges (PureU1 (2 * Nat.succ n)).toACCSystemCharges"}
{"name":"PureU1.VectorLikeEvenPlane.basisAsCharges","declaration":"/-- The first part of the basis as charges. -/\ndef PureU1.VectorLikeEvenPlane.basisAsCharges {n : ℕ} (j : Fin (Nat.succ n)) : ACCSystemCharges.Charges (PureU1 (2 * Nat.succ n)).toACCSystemCharges"}
{"name":"PureU1.VectorLikeEvenPlane.span_basis_swap!","declaration":"theorem PureU1.VectorLikeEvenPlane.span_basis_swap! {n : ℕ} {S' : ACCSystemLinear.LinSols (PureU1 (2 * Nat.succ n)).toACCSystemLinear} {S : ACCSystemLinear.LinSols (PureU1 (2 * Nat.succ n)).toACCSystemLinear} (j : Fin n) (hS : ((ACCSystemGroupAction.linSolRep (PureU1.FamilyPermutations (2 * Nat.succ n)))\n      (PureU1.pairSwap (PureU1.VectorLikeEvenPlane.δ!₁ j) (PureU1.VectorLikeEvenPlane.δ!₂ j)))\n    S =\n  S') (g : Fin (Nat.succ n) → ℚ) (f : Fin n → ℚ) (h : S.val = PureU1.VectorLikeEvenPlane.P g + PureU1.VectorLikeEvenPlane.P! f) : ∃ g' f',\n  S'.val = PureU1.VectorLikeEvenPlane.P g' + PureU1.VectorLikeEvenPlane.P! f' ∧\n    PureU1.VectorLikeEvenPlane.P! f' =\n        PureU1.VectorLikeEvenPlane.P! f +\n          (S.val (PureU1.VectorLikeEvenPlane.δ!₂ j) - S.val (PureU1.VectorLikeEvenPlane.δ!₁ j)) •\n            PureU1.VectorLikeEvenPlane.basis!AsCharges j ∧\n      g' = g"}
{"name":"PureU1.VectorLikeEvenPlane.Pa_eq","declaration":"theorem PureU1.VectorLikeEvenPlane.Pa_eq {n : ℕ} (g : Fin (Nat.succ n) → ℚ) (g' : Fin (Nat.succ n) → ℚ) (f : Fin n → ℚ) (f' : Fin n → ℚ) : PureU1.VectorLikeEvenPlane.Pa g f = PureU1.VectorLikeEvenPlane.Pa g' f' ↔ g = g' ∧ f = f'"}
{"name":"PureU1.VectorLikeEvenPlane.basis!_accCube","declaration":"theorem PureU1.VectorLikeEvenPlane.basis!_accCube {n : ℕ} (j : Fin n) : (PureU1.accCube (2 * Nat.succ n)) (PureU1.VectorLikeEvenPlane.basis!AsCharges j) = 0"}
{"name":"PureU1.VectorLikeEvenPlane.P!_δ!₁","declaration":"theorem PureU1.VectorLikeEvenPlane.P!_δ!₁ {n : ℕ} (f : Fin n → ℚ) (j : Fin n) : PureU1.VectorLikeEvenPlane.P! f (PureU1.VectorLikeEvenPlane.δ!₁ j) = f j"}
{"name":"PureU1.VectorLikeEvenPlane.P_δ₁_δ₂","declaration":"theorem PureU1.VectorLikeEvenPlane.P_δ₁_δ₂ {n : ℕ} (f : Fin (Nat.succ n) → ℚ) : PureU1.VectorLikeEvenPlane.P f ∘ PureU1.VectorLikeEvenPlane.δ₂ =\n  -PureU1.VectorLikeEvenPlane.P f ∘ PureU1.VectorLikeEvenPlane.δ₁"}
{"name":"PureU1.VectorLikeEvenPlane.Pa'_P'_P!'","declaration":"theorem PureU1.VectorLikeEvenPlane.Pa'_P'_P!' {n : ℕ} (f : Fin (Nat.succ n) ⊕ Fin n → ℚ) : PureU1.VectorLikeEvenPlane.Pa' f =\n  PureU1.VectorLikeEvenPlane.P' (f ∘ Sum.inl) + PureU1.VectorLikeEvenPlane.P!' (f ∘ Sum.inr)"}
{"name":"PureU1.VectorLikeEvenPlane.P!_δ!₂","declaration":"theorem PureU1.VectorLikeEvenPlane.P!_δ!₂ {n : ℕ} (f : Fin n → ℚ) (j : Fin n) : PureU1.VectorLikeEvenPlane.P! f (PureU1.VectorLikeEvenPlane.δ!₂ j) = -f j"}
{"name":"PureU1.VectorLikeEvenPlane.smul_basis!AsCharges_in_span","declaration":"theorem PureU1.VectorLikeEvenPlane.smul_basis!AsCharges_in_span {n : ℕ} (S : ACCSystemLinear.LinSols (PureU1 (2 * Nat.succ n)).toACCSystemLinear) (j : Fin n) : (S.val (PureU1.VectorLikeEvenPlane.δ!₂ j) - S.val (PureU1.VectorLikeEvenPlane.δ!₁ j)) •\n    PureU1.VectorLikeEvenPlane.basis!AsCharges j ∈\n  Submodule.span ℚ (Set.range PureU1.VectorLikeEvenPlane.basis!AsCharges)"}
{"name":"PureU1.VectorLikeEvenPlane.join_Pa","declaration":"theorem PureU1.VectorLikeEvenPlane.join_Pa {n : ℕ} (g : Fin (Nat.succ n) → ℚ) (g' : Fin (Nat.succ n) → ℚ) (f : Fin n → ℚ) (f' : Fin n → ℚ) : PureU1.VectorLikeEvenPlane.Pa' (PureU1.VectorLikeEvenPlane.join g f) =\n    PureU1.VectorLikeEvenPlane.Pa' (PureU1.VectorLikeEvenPlane.join g' f') ↔\n  PureU1.VectorLikeEvenPlane.Pa g f = PureU1.VectorLikeEvenPlane.Pa g' f'"}
{"name":"PureU1.VectorLikeEvenPlane.swap!_as_add","declaration":"/-- Swapping the elements δ!₁ j and δ!₂ j is equivalent to adding a vector basis!AsCharges j. -/\ntheorem PureU1.VectorLikeEvenPlane.swap!_as_add {n : ℕ} {S : ACCSystemLinear.LinSols (PureU1 (2 * Nat.succ n)).toACCSystemLinear} {S' : ACCSystemLinear.LinSols (PureU1 (2 * Nat.succ n)).toACCSystemLinear} (j : Fin n) (hS : ((ACCSystemGroupAction.linSolRep (PureU1.FamilyPermutations (2 * Nat.succ n)))\n      (PureU1.pairSwap (PureU1.VectorLikeEvenPlane.δ!₁ j) (PureU1.VectorLikeEvenPlane.δ!₂ j)))\n    S =\n  S') : S'.val =\n  S.val +\n    (S.val (PureU1.VectorLikeEvenPlane.δ!₂ j) - S.val (PureU1.VectorLikeEvenPlane.δ!₁ j)) •\n      PureU1.VectorLikeEvenPlane.basis!AsCharges j"}
{"name":"PureU1.VectorLikeEvenPlane.δ!₁","declaration":"/-- A helper function for what follows. -/\ndef PureU1.VectorLikeEvenPlane.δ!₁ {n : ℕ} (j : Fin n) : Fin (2 * Nat.succ n)"}
{"name":"PureU1.VectorLikeEvenPlane.Pa'","declaration":"/-- A point in the span of the whole basis. -/\ndef PureU1.VectorLikeEvenPlane.Pa' {n : ℕ} (f : Fin (Nat.succ n) ⊕ Fin n → ℚ) : ACCSystemLinear.LinSols (PureU1 (2 * Nat.succ n)).toACCSystemLinear"}
{"name":"PureU1.VectorLikeEvenPlane.δ!₁_δ₁","declaration":"theorem PureU1.VectorLikeEvenPlane.δ!₁_δ₁ {n : ℕ} (j : Fin n) : PureU1.VectorLikeEvenPlane.δ!₁ j = PureU1.VectorLikeEvenPlane.δ₁ (Fin.succ j)"}
{"name":"PureU1.VectorLikeEvenPlane.basisa_card","declaration":"theorem PureU1.VectorLikeEvenPlane.basisa_card {n : ℕ} : Fintype.card (Fin (Nat.succ n) ⊕ Fin n) =\n  FiniteDimensional.finrank ℚ (ACCSystemLinear.LinSols (PureU1 (2 * Nat.succ n)).toACCSystemLinear)"}
{"name":"PureU1.VectorLikeEvenPlane.basis!_on_δ!₁_other","declaration":"theorem PureU1.VectorLikeEvenPlane.basis!_on_δ!₁_other {n : ℕ} {k : Fin n} {j : Fin n} (h : k ≠ j) : PureU1.VectorLikeEvenPlane.basis!AsCharges k (PureU1.VectorLikeEvenPlane.δ!₁ j) = 0"}
{"name":"PureU1.VectorLikeEvenPlane.P!_accCube","declaration":"theorem PureU1.VectorLikeEvenPlane.P!_accCube {n : ℕ} (f : Fin n → ℚ) : (PureU1.accCube (2 * Nat.succ n)) (PureU1.VectorLikeEvenPlane.P! f) = 0"}
{"name":"PureU1.VectorLikeEvenPlane.P!_δ!₄","declaration":"theorem PureU1.VectorLikeEvenPlane.P!_δ!₄ {n : ℕ} (f : Fin n → ℚ) : PureU1.VectorLikeEvenPlane.P! f PureU1.VectorLikeEvenPlane.δ!₄ = 0"}
{"name":"PureU1.VectorLikeEvenPlane.basis!_val","declaration":"theorem PureU1.VectorLikeEvenPlane.basis!_val {n : ℕ} (j : Fin n) : (PureU1.VectorLikeEvenPlane.basis! j).val = PureU1.VectorLikeEvenPlane.basis!AsCharges j"}
{"name":"PureU1.VectorLikeEvenPlane.basis!_on_δ!₂_self","declaration":"theorem PureU1.VectorLikeEvenPlane.basis!_on_δ!₂_self {n : ℕ} (j : Fin n) : PureU1.VectorLikeEvenPlane.basis!AsCharges j (PureU1.VectorLikeEvenPlane.δ!₂ j) = -1"}
{"name":"PureU1.VectorLikeEvenPlane.δ!₄","declaration":"/-- A helper function for what follows. -/\ndef PureU1.VectorLikeEvenPlane.δ!₄ {n : ℕ} : Fin (2 * Nat.succ n)"}
{"name":"PureU1.VectorLikeEvenPlane.basis_on_δ₁_other","declaration":"theorem PureU1.VectorLikeEvenPlane.basis_on_δ₁_other {n : ℕ} {k : Fin (Nat.succ n)} {j : Fin (Nat.succ n)} (h : k ≠ j) : PureU1.VectorLikeEvenPlane.basisAsCharges k (PureU1.VectorLikeEvenPlane.δ₁ j) = 0"}
{"name":"PureU1.VectorLikeEvenPlane.basisaAsBasis","declaration":"/-- The basis formed out of our `basisa` vectors. -/\ndef PureU1.VectorLikeEvenPlane.basisaAsBasis {n : ℕ} : Basis (Fin (Nat.succ n) ⊕ Fin n) ℚ (ACCSystemLinear.LinSols (PureU1 (2 * Nat.succ n)).toACCSystemLinear)"}
{"name":"PureU1.VectorLikeEvenPlane.basisa_linear_independent","declaration":"theorem PureU1.VectorLikeEvenPlane.basisa_linear_independent {n : ℕ} : LinearIndependent ℚ PureU1.VectorLikeEvenPlane.basisa"}
{"name":"PureU1.VectorLikeEvenPlane.basis!_on_other","declaration":"theorem PureU1.VectorLikeEvenPlane.basis!_on_other {n : ℕ} {k : Fin n} {j : Fin (2 * Nat.succ n)} (h1 : j ≠ PureU1.VectorLikeEvenPlane.δ!₁ k) (h2 : j ≠ PureU1.VectorLikeEvenPlane.δ!₂ k) : PureU1.VectorLikeEvenPlane.basis!AsCharges k j = 0"}
{"name":"PureU1.VectorLikeEvenPlane.δ!₃","declaration":"/-- A helper function for what follows. -/\ndef PureU1.VectorLikeEvenPlane.δ!₃ {n : ℕ} : Fin (2 * Nat.succ n)"}
{"name":"PureU1.VectorLikeEvenPlane.P!_δ!₃","declaration":"theorem PureU1.VectorLikeEvenPlane.P!_δ!₃ {n : ℕ} (f : Fin n → ℚ) : PureU1.VectorLikeEvenPlane.P! f PureU1.VectorLikeEvenPlane.δ!₃ = 0"}
{"name":"PureU1.VectorLikeEvenPlane.Pa_δ!₄","declaration":"theorem PureU1.VectorLikeEvenPlane.Pa_δ!₄ {n : ℕ} (f : Fin (Nat.succ n) → ℚ) (g : Fin n → ℚ) : PureU1.VectorLikeEvenPlane.Pa f g PureU1.VectorLikeEvenPlane.δ!₄ = -f (Fin.last n)"}
{"name":"PureU1.VectorLikeEvenPlane.basis","declaration":"/-- The first part of the basis as `LinSols`. -/\ndef PureU1.VectorLikeEvenPlane.basis {n : ℕ} (j : Fin (Nat.succ n)) : ACCSystemLinear.LinSols (PureU1 (2 * Nat.succ n)).toACCSystemLinear"}
{"name":"PureU1.VectorLikeEvenPlane.basis!_on_δ!₄","declaration":"theorem PureU1.VectorLikeEvenPlane.basis!_on_δ!₄ {n : ℕ} (j : Fin n) : PureU1.VectorLikeEvenPlane.basis!AsCharges j PureU1.VectorLikeEvenPlane.δ!₄ = 0"}
{"name":"PureU1.VectorLikeEvenPlane.n_cond₂","declaration":"theorem PureU1.VectorLikeEvenPlane.n_cond₂ (n : ℕ) : 1 + (n + n + 1) = 2 * Nat.succ n"}
{"name":"PureU1.VectorLikeEvenPlane.P_P!_P!_accCube","declaration":"theorem PureU1.VectorLikeEvenPlane.P_P!_P!_accCube {n : ℕ} (g : Fin n → ℚ) (j : Fin (Nat.succ n)) : ((PureU1.accCubeTriLinSymm (PureU1.VectorLikeEvenPlane.P! g)) (PureU1.VectorLikeEvenPlane.P! g))\n    (PureU1.VectorLikeEvenPlane.basisAsCharges j) =\n  PureU1.VectorLikeEvenPlane.P! g (PureU1.VectorLikeEvenPlane.δ₁ j) ^ 2 -\n    PureU1.VectorLikeEvenPlane.P! g (PureU1.VectorLikeEvenPlane.δ₂ j) ^ 2"}
{"name":"PureU1.VectorLikeEvenPlane.basis!_on_δ!₃","declaration":"theorem PureU1.VectorLikeEvenPlane.basis!_on_δ!₃ {n : ℕ} (j : Fin n) : PureU1.VectorLikeEvenPlane.basis!AsCharges j PureU1.VectorLikeEvenPlane.δ!₃ = 0"}
{"name":"PureU1.VectorLikeEvenPlane.basisa","declaration":"/-- The whole basis as `LinSols`. -/\ndef PureU1.VectorLikeEvenPlane.basisa {n : ℕ} : Fin (Nat.succ n) ⊕ Fin n → ACCSystemLinear.LinSols (PureU1 (2 * Nat.succ n)).toACCSystemLinear"}
{"name":"PureU1.VectorLikeEvenPlane.Pa_δ!₁","declaration":"theorem PureU1.VectorLikeEvenPlane.Pa_δ!₁ {n : ℕ} (f : Fin (Nat.succ n) → ℚ) (g : Fin n → ℚ) (j : Fin n) : PureU1.VectorLikeEvenPlane.Pa f g (PureU1.VectorLikeEvenPlane.δ!₁ j) = f (Fin.succ j) + g j"}
{"name":"PureU1.VectorLikeEvenPlane.basis!_δ!₂_eq_minus_δ!₁","declaration":"theorem PureU1.VectorLikeEvenPlane.basis!_δ!₂_eq_minus_δ!₁ {n : ℕ} (j : Fin n) (i : Fin n) : PureU1.VectorLikeEvenPlane.basis!AsCharges j (PureU1.VectorLikeEvenPlane.δ!₂ i) =\n  -PureU1.VectorLikeEvenPlane.basis!AsCharges j (PureU1.VectorLikeEvenPlane.δ!₁ i)"}
{"name":"PureU1.VectorLikeEvenPlane.span_basis","declaration":"theorem PureU1.VectorLikeEvenPlane.span_basis {n : ℕ} (S : ACCSystemLinear.LinSols (PureU1 (2 * Nat.succ n)).toACCSystemLinear) : ∃ g f, S.val = PureU1.VectorLikeEvenPlane.P g + PureU1.VectorLikeEvenPlane.P! f"}
{"name":"PureU1.VectorLikeEvenPlane.δ!₂","declaration":"/-- A helper function for what follows. -/\ndef PureU1.VectorLikeEvenPlane.δ!₂ {n : ℕ} (j : Fin n) : Fin (2 * Nat.succ n)"}
{"name":"PureU1.VectorLikeEvenPlane.basis!","declaration":"/-- The second part of the basis as `LinSols`. -/\ndef PureU1.VectorLikeEvenPlane.basis! {n : ℕ} (j : Fin n) : ACCSystemLinear.LinSols (PureU1 (2 * Nat.succ n)).toACCSystemLinear"}
{"name":"PureU1.VectorLikeEvenPlane.basis_linear_independent","declaration":"theorem PureU1.VectorLikeEvenPlane.basis_linear_independent {n : ℕ} : LinearIndependent ℚ PureU1.VectorLikeEvenPlane.basis"}
{"name":"PureU1.VectorLikeEvenPlane.join_ext","declaration":"theorem PureU1.VectorLikeEvenPlane.join_ext {n : ℕ} (g : Fin (Nat.succ n) → ℚ) (g' : Fin (Nat.succ n) → ℚ) (f : Fin n → ℚ) (f' : Fin n → ℚ) : PureU1.VectorLikeEvenPlane.join g f = PureU1.VectorLikeEvenPlane.join g' f' ↔ g = g' ∧ f = f'"}
{"name":"PureU1.VectorLikeEvenPlane.ext_δ","declaration":"theorem PureU1.VectorLikeEvenPlane.ext_δ {n : ℕ} (S : Fin (2 * Nat.succ n) → ℚ) (T : Fin (2 * Nat.succ n) → ℚ) (h1 : ∀ (i : Fin (Nat.succ n)), S (PureU1.VectorLikeEvenPlane.δ₁ i) = T (PureU1.VectorLikeEvenPlane.δ₁ i)) (h2 : ∀ (i : Fin (Nat.succ n)), S (PureU1.VectorLikeEvenPlane.δ₂ i) = T (PureU1.VectorLikeEvenPlane.δ₂ i)) : S = T"}
{"name":"PureU1.VectorLikeEvenPlane.basis_linearACC","declaration":"theorem PureU1.VectorLikeEvenPlane.basis_linearACC {n : ℕ} (j : Fin (Nat.succ n)) : (PureU1.accGrav (2 * Nat.succ n)) (PureU1.VectorLikeEvenPlane.basisAsCharges j) = 0"}
{"name":"PureU1.VectorLikeEvenPlane.basis_on_other","declaration":"theorem PureU1.VectorLikeEvenPlane.basis_on_other {n : ℕ} {k : Fin (Nat.succ n)} {j : Fin (2 * Nat.succ n)} (h1 : j ≠ PureU1.VectorLikeEvenPlane.δ₁ k) (h2 : j ≠ PureU1.VectorLikeEvenPlane.δ₂ k) : PureU1.VectorLikeEvenPlane.basisAsCharges k j = 0"}
