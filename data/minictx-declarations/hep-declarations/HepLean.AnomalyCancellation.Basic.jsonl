{"name":"ACCSystemCharges.Charges","declaration":"/-- The charges as functions from `Fin χ.numberCharges → ℚ`. -/\ndef ACCSystemCharges.Charges (χ : ACCSystemCharges) : Type"}
{"name":"ACCSystemLinear.LinSols.linearSol","declaration":"/-- The condition that the charge satisfies the linear ACCs. -/\ndef ACCSystemLinear.LinSols.linearSol {χ : ACCSystemLinear} (self : ACCSystemLinear.LinSols χ) (i : Fin χ.numberLinear) : (χ.linearACCs i) self.val = 0"}
{"name":"ACCSystem.Hom.anomalyFree","declaration":"/-- The map between solutions. -/\ndef ACCSystem.Hom.anomalyFree {χ : ACCSystem} {η : ACCSystem} (self : ACCSystem.Hom χ η) : ACCSystem.Sols χ → ACCSystem.Sols η"}
{"name":"ACCSystem.Sols.ext","declaration":"/-- Two solutions are equal if the underlying charges are equal. -/\ntheorem ACCSystem.Sols.ext {χ : ACCSystem} {S : ACCSystem.Sols χ} {T : ACCSystem.Sols χ} (h : S.val = T.val) : S = T"}
{"name":"ACCSystemQuad.quadSolsInclLinSols","declaration":"/-- The inclusion of quadratic solutions into linear solutions. -/\ndef ACCSystemQuad.quadSolsInclLinSols (χ : ACCSystemQuad) : ACCSystemQuad.QuadSols χ →[ℚ] ACCSystemLinear.LinSols χ.toACCSystemLinear"}
{"name":"ACCSystem.Sols.mk","declaration":"ctor ACCSystem.Sols.mk {χ : ACCSystem} (toQuadSols : ACCSystemQuad.QuadSols χ.toACCSystemQuad) (cubicSol : χ.cubicACC toQuadSols.val = 0) : ACCSystem.Sols χ"}
{"name":"ACCSystemQuad.QuadSols.mk","declaration":"ctor ACCSystemQuad.QuadSols.mk {χ : ACCSystemQuad} (toLinSols : ACCSystemLinear.LinSols χ.toACCSystemLinear) (quadSol : ∀ (i : Fin χ.numberQuadratic), (χ.quadraticACCs i) toLinSols.val = 0) : ACCSystemQuad.QuadSols χ"}
{"name":"ACCSystem.solsInclLinSols","declaration":"/-- The inclusion of `Sols` into `LinSols`. -/\ndef ACCSystem.solsInclLinSols (χ : ACCSystem) : ACCSystem.Sols χ →[ℚ] ACCSystemLinear.LinSols χ.toACCSystemLinear"}
{"name":"ACCSystem.Hom.commute","declaration":"/-- The condition that the map commutes with the relevant inclusions. -/\ndef ACCSystem.Hom.commute {χ : ACCSystem} {η : ACCSystem} (self : ACCSystem.Hom χ η) : ⇑self.charges ∘ ⇑(ACCSystem.solsIncl χ) = ⇑(ACCSystem.solsIncl η) ∘ self.anomalyFree"}
{"name":"ACCSystem.IsSolution","declaration":"/-- A charge `S` is a solution if it extends to a solution. -/\ndef ACCSystem.IsSolution (χ : ACCSystem) (S : ACCSystemCharges.Charges χ.toACCSystemCharges) : Prop"}
{"name":"ACCSystemLinear.LinSols.val","declaration":"/-- The underlying charge. -/\ndef ACCSystemLinear.LinSols.val {χ : ACCSystemLinear} (self : ACCSystemLinear.LinSols χ) : ACCSystemCharges.Charges χ.toACCSystemCharges"}
{"name":"ACCSystem.solsMulAction","declaration":"/-- An instance giving the properties and structures to define an action of `ℚ` on `Sols`. -/\ninstance ACCSystem.solsMulAction (χ : ACCSystem) : MulAction ℚ (ACCSystem.Sols χ)"}
{"name":"ACCSystem","declaration":"/-- The type of charges plus the anomaly cancellation conditions. -/\nstructure ACCSystem  : Type"}
{"name":"ACCSystemLinear","declaration":"/-- The type of charges plus the linear ACCs. -/\nstructure ACCSystemLinear  : Type"}
{"name":"ACCSystem.cubicACC","declaration":"/-- The cubic ACC. -/\ndef ACCSystem.cubicACC (self : ACCSystem) : HomogeneousCubic (ACCSystemCharges.Charges self.toACCSystemCharges)"}
{"name":"ACCSystemLinear.linSolsAddCommMonoid_zero_val","declaration":"theorem ACCSystemLinear.linSolsAddCommMonoid_zero_val (χ : ACCSystemLinear) : 0.val = Zero.zero"}
{"name":"ACCSystemCharges.chargesModule","declaration":"/-- An instance to provide the necessary operations and properties for `charges` to form a module\nover the field `ℚ`.\n-/\ninstance ACCSystemCharges.chargesModule (χ : ACCSystemCharges) : Module ℚ (ACCSystemCharges.Charges χ)"}
{"name":"ACCSystemCharges.chargesModule_smul","declaration":"theorem ACCSystemCharges.chargesModule_smul (χ : ACCSystemCharges) : ∀ (x : ℚ) (x_1 : (i : Fin χ.numberCharges) → (fun i => (fun i => (fun a => ℚ) i) i) i) (i : Fin χ.numberCharges),\n  SMul.smul x x_1 i = x * x_1 i"}
{"name":"ACCSystemCharges.chargesAddCommMonoid_nsmul","declaration":"theorem ACCSystemCharges.chargesAddCommMonoid_nsmul (χ : ACCSystemCharges) (n : ℕ) (x : (i : Fin χ.numberCharges) → (fun i => (fun a => ℚ) i) i) (i : Fin χ.numberCharges) : (n • x) i = ↑n * x i"}
{"name":"ACCSystemLinear.numberLinear","declaration":"/-- The number of linear ACCs. -/\ndef ACCSystemLinear.numberLinear (self : ACCSystemLinear) : ℕ"}
{"name":"ACCSystemChargesMk","declaration":"/-- Creates an `ACCSystemCharges` object with the specified number of charges.\n-/\ndef ACCSystemChargesMk (n : ℕ) : ACCSystemCharges"}
{"name":"ACCSystem.Hom","declaration":"/-- The structure of a map between two ACCSystems. -/\nstructure ACCSystem.Hom (χ : ACCSystem) (η : ACCSystem) : Type"}
{"name":"ACCSystemLinear.linSolsAddCommMonoid","declaration":"/-- An instance providing the operations and properties for `LinSols` to form an\nadditive commutative monoid. -/\ninstance ACCSystemLinear.linSolsAddCommMonoid (χ : ACCSystemLinear) : AddCommMonoid (ACCSystemLinear.LinSols χ)"}
{"name":"ACCSystemCharges.mk","declaration":"ctor ACCSystemCharges.mk (numberCharges : ℕ) : ACCSystemCharges"}
{"name":"ACCSystemLinear.LinSols.mk","declaration":"ctor ACCSystemLinear.LinSols.mk {χ : ACCSystemLinear} (val : ACCSystemCharges.Charges χ.toACCSystemCharges) (linearSol : ∀ (i : Fin χ.numberLinear), (χ.linearACCs i) val = 0) : ACCSystemLinear.LinSols χ"}
{"name":"ACCSystemLinear.linearACCs","declaration":"/-- The linear ACCs. -/\ndef ACCSystemLinear.linearACCs (self : ACCSystemLinear) : Fin self.numberLinear → ACCSystemCharges.Charges self.toACCSystemCharges →ₗ[ℚ] ℚ"}
{"name":"ACCSystemLinear.linSolsAddCommGroup","declaration":"/-- An instance providing the operations and properties for `LinSols` to form an\nadditive commutative group. -/\ninstance ACCSystemLinear.linSolsAddCommGroup (χ : ACCSystemLinear) : AddCommGroup (ACCSystemLinear.LinSols χ)"}
{"name":"ACCSystemCharges.numberCharges","declaration":"/-- The number of charges. -/\ndef ACCSystemCharges.numberCharges (self : ACCSystemCharges) : ℕ"}
{"name":"ACCSystem.Sols","declaration":"/-- The type of solutions to the anomaly cancellation conditions. -/\nstructure ACCSystem.Sols (χ : ACCSystem) : Type"}
{"name":"ACCSystemQuad.QuadSols.quadSol","declaration":"/-- The condition that the charge satisfies the quadratic ACCs. -/\ndef ACCSystemQuad.QuadSols.quadSol {χ : ACCSystemQuad} (self : ACCSystemQuad.QuadSols χ) (i : Fin χ.numberQuadratic) : (χ.quadraticACCs i) self.val = 0"}
{"name":"ACCSystemLinear.LinSols","declaration":"/-- The type of solutions to the linear ACCs. -/\nstructure ACCSystemLinear.LinSols (χ : ACCSystemLinear) : Type"}
{"name":"ACCSystemLinear.linSolsIncl","declaration":"/-- The inclusion of `LinSols` into `charges`. -/\ndef ACCSystemLinear.linSolsIncl (χ : ACCSystemLinear) : ACCSystemLinear.LinSols χ →ₗ[ℚ] ACCSystemCharges.Charges χ.toACCSystemCharges"}
{"name":"ACCSystem.Hom.charges","declaration":"/-- The linear map between vector spaces of charges. -/\ndef ACCSystem.Hom.charges {χ : ACCSystem} {η : ACCSystem} (self : ACCSystem.Hom χ η) : ACCSystemCharges.Charges χ.toACCSystemCharges →ₗ[ℚ] ACCSystemCharges.Charges η.toACCSystemCharges"}
{"name":"ACCSystemLinear.Nat.cast_smul_eq_nsmul","declaration":"/-- `nsmul` is equal to any other module structure via a cast. -/\ntheorem ACCSystemLinear.Nat.cast_smul_eq_nsmul (R : Type u_1) {M : Type u_2} [Semiring R] [AddCommMonoid M] [Module R M] (n : ℕ) (b : M) : ↑n • b = n • b"}
{"name":"ACCSystemCharges.ChargesAddCommGroup","declaration":"/-- An instance provides the necessary operations and properties for `charges` to form an additive\ncommutative group.\n-/\ninstance ACCSystemCharges.ChargesAddCommGroup (χ : ACCSystemCharges) : AddCommGroup (ACCSystemCharges.Charges χ)"}
{"name":"ACCSystemQuad.quadraticACCs","declaration":"/-- The quadratic ACCs. -/\ndef ACCSystemQuad.quadraticACCs (self : ACCSystemQuad) : Fin self.numberQuadratic → HomogeneousQuadratic (ACCSystemCharges.Charges self.toACCSystemCharges)"}
{"name":"ACCSystem.Hom.mk","declaration":"ctor ACCSystem.Hom.mk {χ : ACCSystem} {η : ACCSystem} (charges : ACCSystemCharges.Charges χ.toACCSystemCharges →ₗ[ℚ] ACCSystemCharges.Charges η.toACCSystemCharges) (anomalyFree : ACCSystem.Sols χ → ACCSystem.Sols η) (commute : ⇑charges ∘ ⇑(ACCSystem.solsIncl χ) = ⇑(ACCSystem.solsIncl η) ∘ anomalyFree) : ACCSystem.Hom χ η"}
{"name":"ACCSystem.Hom.comp","declaration":"/-- The definition of composition between two ACCSystems. -/\ndef ACCSystem.Hom.comp {χ : ACCSystem} {η : ACCSystem} {ε : ACCSystem} (g : ACCSystem.Hom η ε) (f : ACCSystem.Hom χ η) : ACCSystem.Hom χ ε"}
{"name":"ACCSystemQuad.QuadSols","declaration":"/-- The type of solutions to the linear and quadratic ACCs. -/\nstructure ACCSystemQuad.QuadSols (χ : ACCSystemQuad) : Type"}
{"name":"ACCSystemQuad.numberQuadratic","declaration":"/-- The number of quadratic ACCs. -/\ndef ACCSystemQuad.numberQuadratic (self : ACCSystemQuad) : ℕ"}
{"name":"ACCSystemQuad.quadSolsIncl","declaration":"/-- The inclusion of quadratic solutions into all charges. -/\ndef ACCSystemQuad.quadSolsIncl (χ : ACCSystemQuad) : ACCSystemQuad.QuadSols χ →[ℚ] ACCSystemCharges.Charges χ.toACCSystemCharges"}
{"name":"ACCSystemCharges.chargesAddCommMonoid_add","declaration":"theorem ACCSystemCharges.chargesAddCommMonoid_add (χ : ACCSystemCharges) (f : (i : Fin χ.numberCharges) → (fun i => (fun i => (fun i => (fun a => ℚ) i) i) i) i) (g : (i : Fin χ.numberCharges) → (fun i => (fun i => (fun i => (fun a => ℚ) i) i) i) i) (i : Fin χ.numberCharges) : (f + g) i = f i + g i"}
{"name":"ACCSystemCharges.instFiniteRatChargesSemiringChargesAddCommMonoidChargesModule","declaration":"instance ACCSystemCharges.instFiniteRatChargesSemiringChargesAddCommMonoidChargesModule (χ : ACCSystemCharges) : Module.Finite ℚ (ACCSystemCharges.Charges χ)"}
{"name":"ACCSystemQuad","declaration":"/-- The type of charges plus the linear ACCs plus the quadratic ACCs. -/\nstructure ACCSystemQuad  : Type"}
{"name":"ACCSystemCharges.chargesAddCommMonoid","declaration":"/-- An instance to provide the necessary operations and properties for `charges` to form an additive\ncommutative monoid.\n-/\ninstance ACCSystemCharges.chargesAddCommMonoid (χ : ACCSystemCharges) : AddCommMonoid (ACCSystemCharges.Charges χ)"}
{"name":"ACCSystem.solsInclQuadSols","declaration":"/-- The inclusion of `Sols` into `QuadSols`. -/\ndef ACCSystem.solsInclQuadSols (χ : ACCSystem) : ACCSystem.Sols χ →[ℚ] ACCSystemQuad.QuadSols χ.toACCSystemQuad"}
{"name":"ACCSystemCharges.chargesAddCommMonoid_zero_num","declaration":"theorem ACCSystemCharges.chargesAddCommMonoid_zero_num (χ : ACCSystemCharges) : ∀ (x : Fin χ.numberCharges), (0 x).num = 0"}
{"name":"ACCSystemLinear.linSolsModule_smul_val","declaration":"theorem ACCSystemLinear.linSolsModule_smul_val (χ : ACCSystemLinear) (a : ℚ) (S : ACCSystemLinear.LinSols χ) : (SMul.smul a S).val = a • S.val"}
{"name":"ACCSystemQuad.linSolsInclQuadSolsZero","declaration":"/-- The inclusion of the linear solutions into the quadratic solutions, where there is\nno quadratic equations (i.e. no U(1)'s in the underlying gauge group). -/\ndef ACCSystemQuad.linSolsInclQuadSolsZero (χ : ACCSystemQuad) (h : χ.numberQuadratic = 0) : ACCSystemLinear.LinSols χ.toACCSystemLinear →[ℚ] ACCSystemQuad.QuadSols χ"}
{"name":"ACCSystemLinear.LinSols.ext","declaration":"/-- Two solutions are equal if the underlying charges are equal. -/\ntheorem ACCSystemLinear.LinSols.ext {χ : ACCSystemLinear} {S : ACCSystemLinear.LinSols χ} {T : ACCSystemLinear.LinSols χ} (h : S.val = T.val) : S = T"}
{"name":"ACCSystem.mk","declaration":"ctor ACCSystem.mk (toACCSystemQuad : ACCSystemQuad) (cubicACC : HomogeneousCubic (ACCSystemCharges.Charges toACCSystemQuad.toACCSystemCharges)) : ACCSystem"}
{"name":"LinearMap.toMulActionHom","declaration":"def LinearMap.toMulActionHom {R : Type u_1} [Semiring R] {M : Type u_2} {M₂ : Type u_3} [AddCommMonoid M] [AddCommMonoid M₂] [Module R M] [Module R M₂] (self : M →ₗ[R] M₂) : M →[R] M₂"}
{"name":"ACCSystemQuad.QuadSols.ext","declaration":"/-- Two `QuadSols` are equal if the underlying charges are equal. -/\ntheorem ACCSystemQuad.QuadSols.ext {χ : ACCSystemQuad} {S : ACCSystemQuad.QuadSols χ} {T : ACCSystemQuad.QuadSols χ} (h : S.val = T.val) : S = T"}
{"name":"ACCSystemLinear.mk","declaration":"ctor ACCSystemLinear.mk (toACCSystemCharges : ACCSystemCharges) (numberLinear : ℕ) (linearACCs : Fin numberLinear → ACCSystemCharges.Charges toACCSystemCharges →ₗ[ℚ] ℚ) : ACCSystemLinear"}
{"name":"ACCSystemQuad.mk","declaration":"ctor ACCSystemQuad.mk (toACCSystemLinear : ACCSystemLinear) (numberQuadratic : ℕ) (quadraticACCs : Fin numberQuadratic → HomogeneousQuadratic (ACCSystemCharges.Charges toACCSystemLinear.toACCSystemCharges)) : ACCSystemQuad"}
{"name":"ACCSystemLinear.linSolsAddCommMonoid_add_val","declaration":"theorem ACCSystemLinear.linSolsAddCommMonoid_add_val (χ : ACCSystemLinear) (S : ACCSystemLinear.LinSols χ) (T : ACCSystemLinear.LinSols χ) : (S + T).val = S.val + T.val"}
{"name":"ACCSystemCharges","declaration":"/-- A system of charges, specified by the number of charges. -/\nstructure ACCSystemCharges  : Type"}
{"name":"ACCSystemLinear.linSolsAddCommMonoid_nsmul_val","declaration":"theorem ACCSystemLinear.linSolsAddCommMonoid_nsmul_val (χ : ACCSystemLinear) (n : ℕ) (S : ACCSystemLinear.LinSols χ) : (n • S).val = n • S.val"}
{"name":"ACCSystemCharges.chargesAddCommMonoid_zero_den","declaration":"theorem ACCSystemCharges.chargesAddCommMonoid_zero_den (χ : ACCSystemCharges) : ∀ (x : Fin χ.numberCharges), (0 x).den = 1"}
{"name":"ACCSystemLinear.linSolsModule","declaration":"/-- An instance providing the operations and properties for `LinSols` to form a\nmodule over `ℚ`. -/\ninstance ACCSystemLinear.linSolsModule (χ : ACCSystemLinear) : Module ℚ (ACCSystemLinear.LinSols χ)"}
{"name":"ACCSystemQuad.quadSolsMulAction","declaration":"/-- An instance giving the properties and structures to define an action of `ℚ` on `QuadSols`. -/\ninstance ACCSystemQuad.quadSolsMulAction (χ : ACCSystemQuad) : MulAction ℚ (ACCSystemQuad.QuadSols χ)"}
{"name":"ACCSystem.Sols.cubicSol","declaration":"/-- The condition that the charge satisfies the cubic ACC. -/\ndef ACCSystem.Sols.cubicSol {χ : ACCSystem} (self : ACCSystem.Sols χ) : χ.cubicACC self.val = 0"}
{"name":"ACCSystem.solsIncl","declaration":"/-- The inclusion of `Sols` into `LinSols`. -/\ndef ACCSystem.solsIncl (χ : ACCSystem) : ACCSystem.Sols χ →[ℚ] ACCSystemCharges.Charges χ.toACCSystemCharges"}
