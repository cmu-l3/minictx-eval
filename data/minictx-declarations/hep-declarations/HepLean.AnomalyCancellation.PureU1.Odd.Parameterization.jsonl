{"name":"PureU1.Odd.parameterizationAsLinear_val","declaration":"theorem PureU1.Odd.parameterizationAsLinear_val {n : ℕ} (g : Fin n → ℚ) (f : Fin n → ℚ) (a : ℚ) : (PureU1.Odd.parameterizationAsLinear g f a).val =\n  a •\n    (((PureU1.accCubeTriLinSymm (PureU1.VectorLikeOddPlane.P! f)) (PureU1.VectorLikeOddPlane.P! f))\n          (PureU1.VectorLikeOddPlane.P g) •\n        PureU1.VectorLikeOddPlane.P g +\n      -((PureU1.accCubeTriLinSymm (PureU1.VectorLikeOddPlane.P g)) (PureU1.VectorLikeOddPlane.P g))\n            (PureU1.VectorLikeOddPlane.P! f) •\n        PureU1.VectorLikeOddPlane.P! f)"}
{"name":"PureU1.Odd.generic_case","declaration":"theorem PureU1.Odd.generic_case {n : ℕ} {S : ACCSystem.Sols (PureU1 (2 * Nat.succ n + 1))} (h : PureU1.Odd.GenericCase S) : ∃ g f a, S = PureU1.Odd.parameterization g f a"}
{"name":"PureU1.Odd.genericCase_exists","declaration":"theorem PureU1.Odd.genericCase_exists {n : ℕ} (S : ACCSystem.Sols (PureU1 (2 * Nat.succ n + 1))) (hs : ∃ g f,\n  S.val = PureU1.VectorLikeOddPlane.P g + PureU1.VectorLikeOddPlane.P! f ∧\n    ((PureU1.accCubeTriLinSymm (PureU1.VectorLikeOddPlane.P g)) (PureU1.VectorLikeOddPlane.P g))\n        (PureU1.VectorLikeOddPlane.P! f) ≠\n      0) : PureU1.Odd.GenericCase S"}
{"name":"PureU1.Odd.generic_or_special","declaration":"theorem PureU1.Odd.generic_or_special {n : ℕ} (S : ACCSystem.Sols (PureU1 (2 * Nat.succ n + 1))) : PureU1.Odd.GenericCase S ∨ PureU1.Odd.SpecialCase S"}
{"name":"PureU1.Odd.parameterizationAsLinear","declaration":"/-- Given a `g f : Fin n → ℚ` and a `a : ℚ` we form a linear solution. We will later\nshow that this can be extended to a complete solution. -/\ndef PureU1.Odd.parameterizationAsLinear {n : ℕ} (g : Fin n → ℚ) (f : Fin n → ℚ) (a : ℚ) : ACCSystemLinear.LinSols (PureU1 (2 * n + 1)).toACCSystemLinear"}
{"name":"PureU1.Odd.specialCase_exists","declaration":"theorem PureU1.Odd.specialCase_exists {n : ℕ} (S : ACCSystem.Sols (PureU1 (2 * Nat.succ n + 1))) (hs : ∃ g f,\n  S.val = PureU1.VectorLikeOddPlane.P g + PureU1.VectorLikeOddPlane.P! f ∧\n    ((PureU1.accCubeTriLinSymm (PureU1.VectorLikeOddPlane.P g)) (PureU1.VectorLikeOddPlane.P g))\n        (PureU1.VectorLikeOddPlane.P! f) =\n      0) : PureU1.Odd.SpecialCase S"}
{"name":"PureU1.Odd.anomalyFree_param","declaration":"theorem PureU1.Odd.anomalyFree_param {n : ℕ} {S : ACCSystem.Sols (PureU1 (2 * n + 1))} (g : Fin n → ℚ) (f : Fin n → ℚ) (hS : S.val = PureU1.VectorLikeOddPlane.P g + PureU1.VectorLikeOddPlane.P! f) : ((PureU1.accCubeTriLinSymm (PureU1.VectorLikeOddPlane.P g)) (PureU1.VectorLikeOddPlane.P g))\n    (PureU1.VectorLikeOddPlane.P! f) =\n  -((PureU1.accCubeTriLinSymm (PureU1.VectorLikeOddPlane.P! f)) (PureU1.VectorLikeOddPlane.P! f))\n      (PureU1.VectorLikeOddPlane.P g)"}
{"name":"PureU1.Odd.GenericCase","declaration":"/-- A proposition on a solution which is true if `accCubeTriLinSymm (P g, P g, P! f) ≠ 0`.\nIn this case our parameterization above will be able to recover this point. -/\ndef PureU1.Odd.GenericCase {n : ℕ} (S : ACCSystem.Sols (PureU1 (2 * Nat.succ n + 1))) : Prop"}
{"name":"PureU1.Odd.parameterization","declaration":"/-- Given a `g f : Fin n → ℚ` and a `a : ℚ` we form a solution. -/\ndef PureU1.Odd.parameterization {n : ℕ} (g : Fin n → ℚ) (f : Fin n → ℚ) (a : ℚ) : ACCSystem.Sols (PureU1 (2 * n + 1))"}
{"name":"PureU1.Odd.special_case_lineInCubic_perm","declaration":"theorem PureU1.Odd.special_case_lineInCubic_perm {n : ℕ} {S : ACCSystem.Sols (PureU1 (2 * Nat.succ n + 1))} (h : ∀ (M : (PureU1.FamilyPermutations (2 * Nat.succ n + 1)).group),\n  PureU1.Odd.SpecialCase\n    ((MulAction.toFun (PureU1.FamilyPermutations (2 * Nat.succ n + 1)).group\n        (ACCSystem.Sols (PureU1 (2 * Nat.succ n + 1))))\n      S M)) : PureU1.Odd.LineInCubicPerm S.toLinSols"}
{"name":"PureU1.Odd.parameterizationCharge_cube","declaration":"theorem PureU1.Odd.parameterizationCharge_cube {n : ℕ} (g : Fin n → ℚ) (f : Fin n → ℚ) (a : ℚ) : (PureU1.accCube (2 * n + 1)) (PureU1.Odd.parameterizationAsLinear g f a).val = 0"}
{"name":"PureU1.Odd.special_case","declaration":"theorem PureU1.Odd.special_case {n : ℕ} {S : ACCSystem.Sols (PureU1 (2 * Nat.succ (Nat.succ n) + 1))} (h : ∀ (M : (PureU1.FamilyPermutations (2 * Nat.succ (Nat.succ n) + 1)).group),\n  PureU1.Odd.SpecialCase\n    ((MulAction.toFun (PureU1.FamilyPermutations (2 * Nat.succ (Nat.succ n) + 1)).group\n        (ACCSystem.Sols (PureU1 (2 * Nat.succ (Nat.succ n) + 1))))\n      S M)) : S.toLinSols = 0"}
{"name":"PureU1.Odd.SpecialCase","declaration":"/-- A proposition on a solution which is true if `accCubeTriLinSymm (P g, P g, P! f) ≠ 0`.\nIn this case we will show that S is zero if it is true for all permutations. -/\ndef PureU1.Odd.SpecialCase {n : ℕ} (S : ACCSystem.Sols (PureU1 (2 * Nat.succ n + 1))) : Prop"}
{"name":"PureU1.Odd.special_case_lineInCubic","declaration":"theorem PureU1.Odd.special_case_lineInCubic {n : ℕ} {S : ACCSystem.Sols (PureU1 (2 * Nat.succ n + 1))} (h : PureU1.Odd.SpecialCase S) : PureU1.Odd.LineInCubic S.toLinSols"}
