{"name":"PureU1.BasisLinear.asLinSols","declaration":"/-- The basis elements as `LinSols`. -/\ndef PureU1.BasisLinear.asLinSols {n : ℕ} (j : Fin n) : ACCSystemLinear.LinSols (PureU1 (Nat.succ n)).toACCSystemLinear"}
{"name":"PureU1.BasisLinear.asCharges_eq_castSucc","declaration":"theorem PureU1.BasisLinear.asCharges_eq_castSucc {n : ℕ} (j : Fin n) : PureU1.BasisLinear.asCharges j (Fin.castSucc j) = 1"}
{"name":"PureU1.BasisLinear.sum_of_vectors","declaration":"theorem PureU1.BasisLinear.sum_of_vectors {k : ℕ} {n : ℕ} (f : Fin k → ACCSystemLinear.LinSols (PureU1 n).toACCSystemLinear) (j : Fin n) : (Finset.sum Finset.univ fun i => f i).val j = Finset.sum Finset.univ fun i => (f i).val j"}
{"name":"PureU1.BasisLinear.asLinSols_val","declaration":"theorem PureU1.BasisLinear.asLinSols_val {n : ℕ} (j : Fin n) : (PureU1.BasisLinear.asLinSols j).val = PureU1.BasisLinear.asCharges j"}
{"name":"PureU1.BasisLinear.coordinateMap","declaration":"/-- The coordinate map for the basis. -/\ndef PureU1.BasisLinear.coordinateMap {n : ℕ} : ACCSystemLinear.LinSols (PureU1 (Nat.succ n)).toACCSystemLinear ≃ₗ[ℚ] Fin n →₀ ℚ"}
{"name":"PureU1.BasisLinear.finrank_AnomalyFreeLinear","declaration":"theorem PureU1.BasisLinear.finrank_AnomalyFreeLinear {n : ℕ} : FiniteDimensional.finrank ℚ (ACCSystemLinear.LinSols (PureU1 (Nat.succ n)).toACCSystemLinear) = n"}
{"name":"PureU1.BasisLinear.asBasis","declaration":"/-- The basis of `LinSols`. -/\ndef PureU1.BasisLinear.asBasis {n : ℕ} : Basis (Fin n) ℚ (ACCSystemLinear.LinSols (PureU1 (Nat.succ n)).toACCSystemLinear)"}
{"name":"PureU1.BasisLinear.asCharges","declaration":"/-- The basis elements as charges, defined to have a `1` in the `j`th position and a `-1` in the\nlast position. -/\ndef PureU1.BasisLinear.asCharges {n : ℕ} (j : Fin n) : ACCSystemCharges.Charges (PureU1 (Nat.succ n)).toACCSystemCharges"}
{"name":"PureU1.BasisLinear.instFiniteRatLinSolsToACCSystemLinearToACCSystemQuadPureU1SuccSemiringLinSolsAddCommMonoidLinSolsModule","declaration":"instance PureU1.BasisLinear.instFiniteRatLinSolsToACCSystemLinearToACCSystemQuadPureU1SuccSemiringLinSolsAddCommMonoidLinSolsModule {n : ℕ} : Module.Finite ℚ (ACCSystemLinear.LinSols (PureU1 (Nat.succ n)).toACCSystemLinear)"}
{"name":"PureU1.BasisLinear.asCharges_ne_castSucc","declaration":"theorem PureU1.BasisLinear.asCharges_ne_castSucc {n : ℕ} {k : Fin n} {j : Fin n} (h : k ≠ j) : PureU1.BasisLinear.asCharges k (Fin.castSucc j) = 0"}
