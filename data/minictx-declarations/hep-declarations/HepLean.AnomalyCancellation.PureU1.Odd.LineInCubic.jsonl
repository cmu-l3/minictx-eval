{"name":"PureU1.Odd.lineInCubicPerm_constAbs","declaration":"theorem PureU1.Odd.lineInCubicPerm_constAbs {n : ℕ} {S : ACCSystemLinear.LinSols (PureU1 (2 * Nat.succ (Nat.succ n) + 1)).toACCSystemLinear} (LIC : PureU1.Odd.LineInCubicPerm S) : PureU1.ConstAbs S.val"}
{"name":"PureU1.Odd.lineInCubicPerm_last_perm","declaration":"theorem PureU1.Odd.lineInCubicPerm_last_perm {n : ℕ} {S : ACCSystemLinear.LinSols (PureU1 (2 * Nat.succ (Nat.succ n) + 1)).toACCSystemLinear} (LIC : PureU1.Odd.LineInCubicPerm S) : PureU1.LineInPlaneCond S"}
{"name":"PureU1.Odd.P_P_P!_accCube'","declaration":"theorem PureU1.Odd.P_P_P!_accCube' {n : ℕ} {S : ACCSystemLinear.LinSols (PureU1 (2 * Nat.succ (Nat.succ n) + 1)).toACCSystemLinear} (f : Fin (Nat.succ (Nat.succ n)) → ℚ) (g : Fin (Nat.succ (Nat.succ n)) → ℚ) (hS : S.val = PureU1.VectorLikeOddPlane.Pa f g) : ((PureU1.accCubeTriLinSymm (PureU1.VectorLikeOddPlane.P f)) (PureU1.VectorLikeOddPlane.P f))\n    (PureU1.VectorLikeOddPlane.basis!AsCharges 0) =\n  (S.val (PureU1.VectorLikeOddPlane.δ!₁ 0) + S.val (PureU1.VectorLikeOddPlane.δ!₂ 0)) *\n    (2 * S.val PureU1.VectorLikeOddPlane.δ!₃ + S.val (PureU1.VectorLikeOddPlane.δ!₁ 0) +\n      S.val (PureU1.VectorLikeOddPlane.δ!₂ 0))"}
{"name":"PureU1.Odd.lineInCubicPerm_permute","declaration":"/-- If `lineInCubicPerm S`, then `lineInCubicPerm (M S)` for all permutations `M`. -/\ntheorem PureU1.Odd.lineInCubicPerm_permute {n : ℕ} {S : ACCSystemLinear.LinSols (PureU1 (2 * n + 1)).toACCSystemLinear} (hS : PureU1.Odd.LineInCubicPerm S) (M' : (PureU1.FamilyPermutations (2 * n + 1)).group) : PureU1.Odd.LineInCubicPerm (((ACCSystemGroupAction.linSolRep (PureU1.FamilyPermutations (2 * n + 1))) M') S)"}
{"name":"PureU1.Odd.line_in_cubic_P_P_P!","declaration":"theorem PureU1.Odd.line_in_cubic_P_P_P! {n : ℕ} {S : ACCSystemLinear.LinSols (PureU1 (2 * n + 1)).toACCSystemLinear} (h : PureU1.Odd.LineInCubic S) (g : Fin n → ℚ) (f : Fin n → ℚ) : S.val = PureU1.VectorLikeOddPlane.P g + PureU1.VectorLikeOddPlane.P! f →\n  ((PureU1.accCubeTriLinSymm (PureU1.VectorLikeOddPlane.P g)) (PureU1.VectorLikeOddPlane.P g))\n      (PureU1.VectorLikeOddPlane.P! f) =\n    0"}
{"name":"PureU1.Odd.lineInCubicPerm_last_cond","declaration":"theorem PureU1.Odd.lineInCubicPerm_last_cond {n : ℕ} {S : ACCSystemLinear.LinSols (PureU1 (2 * Nat.succ (Nat.succ n) + 1)).toACCSystemLinear} (LIC : PureU1.Odd.LineInCubicPerm S) : PureU1.LineInPlaneProp\n  (S.val (PureU1.VectorLikeOddPlane.δ!₂ 0), S.val (PureU1.VectorLikeOddPlane.δ!₁ 0),\n    S.val PureU1.VectorLikeOddPlane.δ!₃)"}
{"name":"PureU1.Odd.lineInCubicPerm_zero","declaration":"theorem PureU1.Odd.lineInCubicPerm_zero {n : ℕ} {S : ACCSystemLinear.LinSols (PureU1 (2 * Nat.succ (Nat.succ n) + 1)).toACCSystemLinear} (LIC : PureU1.Odd.LineInCubicPerm S) : S = 0"}
{"name":"PureU1.Odd.lineInCubic_expand","declaration":"theorem PureU1.Odd.lineInCubic_expand {n : ℕ} {S : ACCSystemLinear.LinSols (PureU1 (2 * n + 1)).toACCSystemLinear} (h : PureU1.Odd.LineInCubic S) (g : Fin n → ℚ) (f : Fin n → ℚ) : S.val = PureU1.VectorLikeOddPlane.P g + PureU1.VectorLikeOddPlane.P! f →\n  ∀ (a b : ℚ),\n    3 * a * b *\n        (a *\n            ((PureU1.accCubeTriLinSymm (PureU1.VectorLikeOddPlane.P g)) (PureU1.VectorLikeOddPlane.P g))\n              (PureU1.VectorLikeOddPlane.P! f) +\n          b *\n            ((PureU1.accCubeTriLinSymm (PureU1.VectorLikeOddPlane.P! f)) (PureU1.VectorLikeOddPlane.P! f))\n              (PureU1.VectorLikeOddPlane.P g)) =\n      0"}
{"name":"PureU1.Odd.LineInCubic","declaration":"/-- A property on `LinSols`, satisfied if every point on the line between the two planes\nin the basis through that point is in the cubic. -/\ndef PureU1.Odd.LineInCubic {n : ℕ} (S : ACCSystemLinear.LinSols (PureU1 (2 * n + 1)).toACCSystemLinear) : Prop"}
{"name":"PureU1.Odd.LineInCubicPerm","declaration":"/-- A `LinSol` satisfies `lineInCubicPerm` if all its permutations satisfy `lineInCubic`. -/\ndef PureU1.Odd.LineInCubicPerm {n : ℕ} (S : ACCSystemLinear.LinSols (PureU1 (2 * n + 1)).toACCSystemLinear) : Prop"}
{"name":"PureU1.Odd.lineInCubicPerm_swap","declaration":"theorem PureU1.Odd.lineInCubicPerm_swap {n : ℕ} {S : ACCSystemLinear.LinSols (PureU1 (2 * Nat.succ n + 1)).toACCSystemLinear} (LIC : PureU1.Odd.LineInCubicPerm S) (j : Fin (Nat.succ n)) (g : Fin (Nat.succ n) → ℚ) (f : Fin (Nat.succ n) → ℚ) : S.val = PureU1.VectorLikeOddPlane.Pa g f →\n  (S.val (PureU1.VectorLikeOddPlane.δ!₂ j) - S.val (PureU1.VectorLikeOddPlane.δ!₁ j)) *\n      ((PureU1.accCubeTriLinSymm (PureU1.VectorLikeOddPlane.P g)) (PureU1.VectorLikeOddPlane.P g))\n        (PureU1.VectorLikeOddPlane.basis!AsCharges j) =\n    0"}
{"name":"PureU1.Odd.lineInCubicPerm_self","declaration":"/-- If `lineInCubicPerm S`, then `lineInCubic S`. -/\ntheorem PureU1.Odd.lineInCubicPerm_self {n : ℕ} {S : ACCSystemLinear.LinSols (PureU1 (2 * n + 1)).toACCSystemLinear} (hS : PureU1.Odd.LineInCubicPerm S) : PureU1.Odd.LineInCubic S"}
