{"name":"SMRHN.PlusU1.Y.on_quadBiLin_AFL","declaration":"theorem SMRHN.PlusU1.Y.on_quadBiLin_AFL {n : ℕ} (S : ACCSystemLinear.LinSols (SMRHN.PlusU1 n).toACCSystemLinear) : (SMνACCs.quadBiLin (SMRHN.PlusU1.Y n).val) S.val = 0"}
{"name":"SMRHN.PlusU1.Y.addQuad_zero","declaration":"theorem SMRHN.PlusU1.Y.addQuad_zero {n : ℕ} (S : ACCSystemQuad.QuadSols (SMRHN.PlusU1 n).toACCSystemQuad) (a : ℚ) : SMRHN.PlusU1.Y.addQuad S a 0 = a • S"}
{"name":"SMRHN.PlusU1.Y_val","declaration":"theorem SMRHN.PlusU1.Y_val (n : ℕ) : (SMRHN.PlusU1.Y n).val = (SMRHN.familyUniversal n) SMRHN.PlusU1.Y₁.val"}
{"name":"SMRHN.PlusU1.Y","declaration":"/-- The hypercharge for `n` family. -/\ndef SMRHN.PlusU1.Y (n : ℕ) : ACCSystem.Sols (SMRHN.PlusU1 n)"}
{"name":"SMRHN.PlusU1.Y.on_quadBiLin","declaration":"theorem SMRHN.PlusU1.Y.on_quadBiLin {n : ℕ} (S : ACCSystemCharges.Charges (SMRHN.PlusU1 n).toACCSystemCharges) : (SMνACCs.quadBiLin (SMRHN.PlusU1.Y n).val) S = SMνACCs.accYY S"}
{"name":"SMRHN.PlusU1.Y.addCube","declaration":"/-- The `Sol` obtained by adding hypercharge to a `Sol`. -/\ndef SMRHN.PlusU1.Y.addCube {n : ℕ} (S : ACCSystem.Sols (SMRHN.PlusU1 n)) (a : ℚ) (b : ℚ) : ACCSystem.Sols (SMRHN.PlusU1 n)"}
{"name":"SMRHN.PlusU1.Y.addQuad","declaration":"/-- The `QuadSol` obtained by adding hypercharge to a `QuadSol`. -/\ndef SMRHN.PlusU1.Y.addQuad {n : ℕ} (S : ACCSystemQuad.QuadSols (SMRHN.PlusU1 n).toACCSystemQuad) (a : ℚ) (b : ℚ) : ACCSystemQuad.QuadSols (SMRHN.PlusU1 n).toACCSystemQuad"}
{"name":"SMRHN.PlusU1.Y.on_cubeTriLin","declaration":"theorem SMRHN.PlusU1.Y.on_cubeTriLin {n : ℕ} (S : ACCSystemCharges.Charges (SMRHN.PlusU1 n).toACCSystemCharges) : ((SMνACCs.cubeTriLin (SMRHN.PlusU1.Y n).val) (SMRHN.PlusU1.Y n).val) S = 6 * SMνACCs.accYY S"}
{"name":"SMRHN.PlusU1.Y₁","declaration":"/-- The hypercharge for 1 family. -/\ndef SMRHN.PlusU1.Y₁  : ACCSystem.Sols (SMRHN.PlusU1 1)"}
{"name":"SMRHN.PlusU1.Y.on_cubeTriLin'","declaration":"theorem SMRHN.PlusU1.Y.on_cubeTriLin' {n : ℕ} (S : ACCSystemCharges.Charges (SMRHN.PlusU1 n).toACCSystemCharges) : ((SMνACCs.cubeTriLin (SMRHN.PlusU1.Y n).val) S) S = 6 * SMνACCs.accQuad S"}
{"name":"SMRHN.PlusU1.Y.add_AF_cube","declaration":"theorem SMRHN.PlusU1.Y.add_AF_cube {n : ℕ} (S : ACCSystem.Sols (SMRHN.PlusU1 n)) (a : ℚ) (b : ℚ) : SMνACCs.accCube (a • S.val + b • (SMRHN.PlusU1.Y n).val) = 0"}
{"name":"SMRHN.PlusU1.Y.add_AFL_quad","declaration":"theorem SMRHN.PlusU1.Y.add_AFL_quad {n : ℕ} (S : ACCSystemLinear.LinSols (SMRHN.PlusU1 n).toACCSystemLinear) (a : ℚ) (b : ℚ) : SMνACCs.accQuad (a • S.val + b • (SMRHN.PlusU1.Y n).val) = a ^ 2 * SMνACCs.accQuad S.val"}
{"name":"SMRHN.PlusU1.Y.add_AFL_cube","declaration":"theorem SMRHN.PlusU1.Y.add_AFL_cube {n : ℕ} (S : ACCSystemLinear.LinSols (SMRHN.PlusU1 n).toACCSystemLinear) (a : ℚ) (b : ℚ) : SMνACCs.accCube (a • S.val + b • (SMRHN.PlusU1.Y n).val) =\n  a ^ 2 * (a * SMνACCs.accCube S.val + 3 * b * ((SMνACCs.cubeTriLin S.val) S.val) (SMRHN.PlusU1.Y n).val)"}
{"name":"SMRHN.PlusU1.Y₁_val","declaration":"theorem SMRHN.PlusU1.Y₁_val (i : Fin (SMRHN.PlusU1 1).numberCharges) : SMRHN.PlusU1.Y₁.val i =\n  match i with\n  | 0 => 1\n  | 1 => -4\n  | 2 => 2\n  | 3 => -3\n  | 4 => 6\n  | 5 => 0"}
{"name":"SMRHN.PlusU1.Y.on_cubeTriLin'_ALQ","declaration":"theorem SMRHN.PlusU1.Y.on_cubeTriLin'_ALQ {n : ℕ} (S : ACCSystemQuad.QuadSols (SMRHN.PlusU1 n).toACCSystemQuad) : ((SMνACCs.cubeTriLin (SMRHN.PlusU1.Y n).val) S.val) S.val = 0"}
{"name":"SMRHN.PlusU1.Y.add_AFQ_cube","declaration":"theorem SMRHN.PlusU1.Y.add_AFQ_cube {n : ℕ} (S : ACCSystemQuad.QuadSols (SMRHN.PlusU1 n).toACCSystemQuad) (a : ℚ) (b : ℚ) : SMνACCs.accCube (a • S.val + b • (SMRHN.PlusU1.Y n).val) = a ^ 3 * SMνACCs.accCube S.val"}
{"name":"SMRHN.PlusU1.Y.on_cubeTriLin_AFL","declaration":"theorem SMRHN.PlusU1.Y.on_cubeTriLin_AFL {n : ℕ} (S : ACCSystemLinear.LinSols (SMRHN.PlusU1 n).toACCSystemLinear) : ((SMνACCs.cubeTriLin (SMRHN.PlusU1.Y n).val) (SMRHN.PlusU1.Y n).val) S.val = 0"}
{"name":"SMRHN.PlusU1.Y.add_quad","declaration":"theorem SMRHN.PlusU1.Y.add_quad {n : ℕ} (S : ACCSystemQuad.QuadSols (SMRHN.PlusU1 n).toACCSystemQuad) (a : ℚ) (b : ℚ) : SMνACCs.accQuad (a • S.val + b • (SMRHN.PlusU1.Y n).val) = 0"}
