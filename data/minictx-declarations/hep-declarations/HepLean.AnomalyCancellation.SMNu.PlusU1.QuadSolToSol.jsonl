{"name":"SMRHN.PlusU1.QuadSolToSol.generic","declaration":"/-- The construction of a `Sol` from a `QuadSol` in the generic case. -/\ndef SMRHN.PlusU1.QuadSolToSol.generic {n : ℕ} (S : ACCSystemQuad.QuadSols (SMRHN.PlusU1 n).toACCSystemQuad) : ACCSystem.Sols (SMRHN.PlusU1 n)"}
{"name":"SMRHN.PlusU1.QuadSolToSol.BL_add_α₁_α₂_cube","declaration":"theorem SMRHN.PlusU1.QuadSolToSol.BL_add_α₁_α₂_cube {n : ℕ} (S : ACCSystemQuad.QuadSols (SMRHN.PlusU1 n).toACCSystemQuad) : SMνACCs.accCube (SMRHN.PlusU1.BL.addQuad S (SMRHN.PlusU1.QuadSolToSol.α₁ S) (SMRHN.PlusU1.QuadSolToSol.α₂ S)).val = 0"}
{"name":"SMRHN.PlusU1.QuadSolToSol.α₂","declaration":"/-- A helper function for what follows. -/\ndef SMRHN.PlusU1.QuadSolToSol.α₂ {n : ℕ} (S : ACCSystemQuad.QuadSols (SMRHN.PlusU1 n).toACCSystemQuad) : ℚ"}
{"name":"SMRHN.PlusU1.quadSolToSol","declaration":"/-- A map from `QuadSols × ℚ × ℚ` to `Sols` taking account of the special and generic cases.\nWe will show that this map is a surjection. -/\ndef SMRHN.PlusU1.quadSolToSol {n : ℕ} : ACCSystemQuad.QuadSols (SMRHN.PlusU1 n).toACCSystemQuad × ℚ × ℚ → ACCSystem.Sols (SMRHN.PlusU1 n)"}
{"name":"SMRHN.PlusU1.quadSolToSolInv_α₁_α₂_neq_zero","declaration":"theorem SMRHN.PlusU1.quadSolToSolInv_α₁_α₂_neq_zero {n : ℕ} (S : ACCSystem.Sols (SMRHN.PlusU1 n)) (h : SMRHN.PlusU1.QuadSolToSol.α₁ S.toQuadSols ≠ 0) : ¬(SMRHN.PlusU1.QuadSolToSol.α₁ (SMRHN.PlusU1.quadSolToSolInv S).1 = 0 ∧\n    SMRHN.PlusU1.QuadSolToSol.α₂ (SMRHN.PlusU1.quadSolToSolInv S).1 = 0)"}
{"name":"SMRHN.PlusU1.QuadSolToSol.generic_on_AF","declaration":"theorem SMRHN.PlusU1.QuadSolToSol.generic_on_AF {n : ℕ} (S : ACCSystem.Sols (SMRHN.PlusU1 n)) : SMRHN.PlusU1.QuadSolToSol.generic S.toQuadSols = SMRHN.PlusU1.QuadSolToSol.α₁ S.toQuadSols • S"}
{"name":"SMRHN.PlusU1.QuadSolToSol.generic_on_AF_α₁_ne_zero","declaration":"theorem SMRHN.PlusU1.QuadSolToSol.generic_on_AF_α₁_ne_zero {n : ℕ} (S : ACCSystem.Sols (SMRHN.PlusU1 n)) (h : SMRHN.PlusU1.QuadSolToSol.α₁ S.toQuadSols ≠ 0) : (SMRHN.PlusU1.QuadSolToSol.α₁ S.toQuadSols)⁻¹ • SMRHN.PlusU1.QuadSolToSol.generic S.toQuadSols = S"}
{"name":"SMRHN.PlusU1.QuadSolToSol.α₁","declaration":"/-- A helper function for what follows. -/\ndef SMRHN.PlusU1.QuadSolToSol.α₁ {n : ℕ} (S : ACCSystemQuad.QuadSols (SMRHN.PlusU1 n).toACCSystemQuad) : ℚ"}
{"name":"SMRHN.PlusU1.QuadSolToSol.BL_add_α₁_α₂_AF","declaration":"theorem SMRHN.PlusU1.QuadSolToSol.BL_add_α₁_α₂_AF {n : ℕ} (S : ACCSystem.Sols (SMRHN.PlusU1 n)) : SMRHN.PlusU1.BL.addQuad S.toQuadSols (SMRHN.PlusU1.QuadSolToSol.α₁ S.toQuadSols)\n    (SMRHN.PlusU1.QuadSolToSol.α₂ S.toQuadSols) =\n  SMRHN.PlusU1.QuadSolToSol.α₁ S.toQuadSols • S.toQuadSols"}
{"name":"SMRHN.PlusU1.quadSolToSolInv_rightInverse","declaration":"theorem SMRHN.PlusU1.quadSolToSolInv_rightInverse {n : ℕ} : Function.RightInverse SMRHN.PlusU1.quadSolToSolInv SMRHN.PlusU1.quadSolToSol"}
{"name":"SMRHN.PlusU1.QuadSolToSol.special","declaration":"/-- The construction of a `Sol` from a `QuadSol` in the case when `α₁ S = 0` and `α₂ S = 0`. -/\ndef SMRHN.PlusU1.QuadSolToSol.special {n : ℕ} (S : ACCSystemQuad.QuadSols (SMRHN.PlusU1 n).toACCSystemQuad) (a : ℚ) (b : ℚ) (h1 : SMRHN.PlusU1.QuadSolToSol.α₁ S = 0) (h2 : SMRHN.PlusU1.QuadSolToSol.α₂ S = 0) : ACCSystem.Sols (SMRHN.PlusU1 n)"}
{"name":"SMRHN.PlusU1.QuadSolToSol.special_on_AF","declaration":"theorem SMRHN.PlusU1.QuadSolToSol.special_on_AF {n : ℕ} (S : ACCSystem.Sols (SMRHN.PlusU1 n)) (h1 : SMRHN.PlusU1.QuadSolToSol.α₁ S.toQuadSols = 0) : SMRHN.PlusU1.QuadSolToSol.special S.toQuadSols 1 0 h1 ⋯ = S"}
{"name":"SMRHN.PlusU1.quadSolToSolInv_generic","declaration":"theorem SMRHN.PlusU1.quadSolToSolInv_generic {n : ℕ} (S : ACCSystem.Sols (SMRHN.PlusU1 n)) (h : SMRHN.PlusU1.QuadSolToSol.α₁ S.toQuadSols ≠ 0) : (SMRHN.PlusU1.quadSolToSolInv S).2.1 • SMRHN.PlusU1.QuadSolToSol.generic (SMRHN.PlusU1.quadSolToSolInv S).1 = S"}
{"name":"SMRHN.PlusU1.quadSolToSolInv","declaration":"/-- A map from `Sols` to `QuadSols × ℚ × ℚ` which forms a right-inverse to `quadSolToSol`, as\nshown in `quadSolToSolInv_rightInverse`. -/\ndef SMRHN.PlusU1.quadSolToSolInv {n : ℕ} : ACCSystem.Sols (SMRHN.PlusU1 n) → ACCSystemQuad.QuadSols (SMRHN.PlusU1 n).toACCSystemQuad × ℚ × ℚ"}
{"name":"SMRHN.PlusU1.quadSolToSolInv_1","declaration":"theorem SMRHN.PlusU1.quadSolToSolInv_1 {n : ℕ} (S : ACCSystem.Sols (SMRHN.PlusU1 n)) : (SMRHN.PlusU1.quadSolToSolInv S).1 = S.toQuadSols"}
{"name":"SMRHN.PlusU1.quadSolToSolInv_special","declaration":"theorem SMRHN.PlusU1.quadSolToSolInv_special {n : ℕ} (S : ACCSystem.Sols (SMRHN.PlusU1 n)) (h : SMRHN.PlusU1.QuadSolToSol.α₁ S.toQuadSols = 0) : SMRHN.PlusU1.QuadSolToSol.special (SMRHN.PlusU1.quadSolToSolInv S).1 (SMRHN.PlusU1.quadSolToSolInv S).2.1\n    (SMRHN.PlusU1.quadSolToSolInv S).2.2 ⋯ ⋯ =\n  S"}
{"name":"SMRHN.PlusU1.QuadSolToSol.cube_α₁_α₂_zero","declaration":"theorem SMRHN.PlusU1.QuadSolToSol.cube_α₁_α₂_zero {n : ℕ} (S : ACCSystemQuad.QuadSols (SMRHN.PlusU1 n).toACCSystemQuad) (a : ℚ) (b : ℚ) (h1 : SMRHN.PlusU1.QuadSolToSol.α₁ S = 0) (h2 : SMRHN.PlusU1.QuadSolToSol.α₂ S = 0) : SMνACCs.accCube (SMRHN.PlusU1.BL.addQuad S a b).val = 0"}
{"name":"SMRHN.PlusU1.QuadSolToSol.α₂_AF","declaration":"theorem SMRHN.PlusU1.QuadSolToSol.α₂_AF {n : ℕ} (S : ACCSystem.Sols (SMRHN.PlusU1 n)) : SMRHN.PlusU1.QuadSolToSol.α₂ S.toQuadSols = 0"}
{"name":"SMRHN.PlusU1.quadSolToSol_surjective","declaration":"theorem SMRHN.PlusU1.quadSolToSol_surjective {n : ℕ} : Function.Surjective SMRHN.PlusU1.quadSolToSol"}
{"name":"SMRHN.PlusU1.quadSolToSolInv_α₁_α₂_zero","declaration":"theorem SMRHN.PlusU1.quadSolToSolInv_α₁_α₂_zero {n : ℕ} (S : ACCSystem.Sols (SMRHN.PlusU1 n)) (h : SMRHN.PlusU1.QuadSolToSol.α₁ S.toQuadSols = 0) : SMRHN.PlusU1.QuadSolToSol.α₁ (SMRHN.PlusU1.quadSolToSolInv S).1 = 0 ∧\n  SMRHN.PlusU1.QuadSolToSol.α₂ (SMRHN.PlusU1.quadSolToSolInv S).1 = 0"}
