{"name":"PureU1.Even.line_in_cubic_P_P_P!","declaration":"/-- This lemma states that for a given `S` of type `(PureU1 (2 * n.succ)).AnomalyFreeLinear` and\na proof `h` that the line through `S` lies on a cubic curve,\nfor any functions `g : Fin n.succ → ℚ` and `f : Fin n → ℚ`, if `S.val = P g + P! f`,\nthen `accCubeTriLinSymm.toFun (P g, P g, P! f) = 0`.\n-/\ntheorem PureU1.Even.line_in_cubic_P_P_P! {n : ℕ} {S : ACCSystemLinear.LinSols (PureU1 (2 * Nat.succ n)).toACCSystemLinear} (h : PureU1.Even.LineInCubic S) (g : Fin (Nat.succ n) → ℚ) (f : Fin n → ℚ) : S.val = PureU1.VectorLikeEvenPlane.P g + PureU1.VectorLikeEvenPlane.P! f →\n  ((PureU1.accCubeTriLinSymm (PureU1.VectorLikeEvenPlane.P g)) (PureU1.VectorLikeEvenPlane.P g))\n      (PureU1.VectorLikeEvenPlane.P! f) =\n    0"}
{"name":"PureU1.Even.lineInCubicPerm_swap","declaration":"theorem PureU1.Even.lineInCubicPerm_swap {n : ℕ} {S : ACCSystemLinear.LinSols (PureU1 (2 * Nat.succ n)).toACCSystemLinear} (LIC : PureU1.Even.LineInCubicPerm S) (j : Fin n) (g : Fin (Nat.succ n) → ℚ) (f : Fin n → ℚ) : S.val = PureU1.VectorLikeEvenPlane.Pa g f →\n  (S.val (PureU1.VectorLikeEvenPlane.δ!₂ j) - S.val (PureU1.VectorLikeEvenPlane.δ!₁ j)) *\n      ((PureU1.accCubeTriLinSymm (PureU1.VectorLikeEvenPlane.P g)) (PureU1.VectorLikeEvenPlane.P g))\n        (PureU1.VectorLikeEvenPlane.basis!AsCharges j) =\n    0"}
{"name":"PureU1.Even.lineInCubicPerm_self","declaration":"/-- If `lineInCubicPerm S` then `lineInCubic S`. -/\ntheorem PureU1.Even.lineInCubicPerm_self {n : ℕ} {S : ACCSystemLinear.LinSols (PureU1 (2 * Nat.succ n)).toACCSystemLinear} (hS : PureU1.Even.LineInCubicPerm S) : PureU1.Even.LineInCubic S"}
{"name":"PureU1.Even.LineInCubic","declaration":"/-- A property on `LinSols`, satisfied if every point on the line between the two planes\nin the basis through that point is in the cubic. -/\ndef PureU1.Even.LineInCubic {n : ℕ} (S : ACCSystemLinear.LinSols (PureU1 (2 * Nat.succ n)).toACCSystemLinear) : Prop"}
{"name":"PureU1.Even.lineInCubicPerm_permute","declaration":"/-- If `lineInCubicPerm S` then `lineInCubicPerm (M S)` for all permutations `M`. -/\ntheorem PureU1.Even.lineInCubicPerm_permute {n : ℕ} {S : ACCSystemLinear.LinSols (PureU1 (2 * Nat.succ n)).toACCSystemLinear} (hS : PureU1.Even.LineInCubicPerm S) (M' : (PureU1.FamilyPermutations (2 * Nat.succ n)).group) : PureU1.Even.LineInCubicPerm (((ACCSystemGroupAction.linSolRep (PureU1.FamilyPermutations (2 * Nat.succ n))) M') S)"}
{"name":"PureU1.Even.lineInCubicPerm_constAbs","declaration":"theorem PureU1.Even.lineInCubicPerm_constAbs {n : ℕ} {S : ACCSystem.Sols (PureU1 (2 * Nat.succ (Nat.succ n)))} (LIC : PureU1.Even.LineInCubicPerm S.toLinSols) : PureU1.ConstAbs S.val"}
{"name":"PureU1.Even.lineInCubicPerm_in_plane","declaration":"theorem PureU1.Even.lineInCubicPerm_in_plane {n : ℕ} (S : ACCSystem.Sols (PureU1 (2 * Nat.succ (Nat.succ n)))) (LIC : PureU1.Even.LineInCubicPerm S.toLinSols) : ∃ M,\n  ((ACCSystemGroupAction.linSolRep (PureU1.FamilyPermutations (2 * Nat.succ (Nat.succ n)))) M) S.toLinSols ∈\n    Submodule.span ℚ (Set.range PureU1.VectorLikeEvenPlane.basis)"}
{"name":"PureU1.Even.lineInCubicPerm_last_cond","declaration":"theorem PureU1.Even.lineInCubicPerm_last_cond {n : ℕ} {S : ACCSystemLinear.LinSols (PureU1 (2 * Nat.succ (Nat.succ n))).toACCSystemLinear} (LIC : PureU1.Even.LineInCubicPerm S) : PureU1.LineInPlaneProp\n  (S.val (PureU1.VectorLikeEvenPlane.δ!₂ (Fin.last n)), S.val (PureU1.VectorLikeEvenPlane.δ!₁ (Fin.last n)),\n    S.val PureU1.VectorLikeEvenPlane.δ!₄)"}
{"name":"PureU1.Even.lineInCubicPerm_vectorLike","declaration":"theorem PureU1.Even.lineInCubicPerm_vectorLike {n : ℕ} {S : ACCSystem.Sols (PureU1 (2 * Nat.succ (Nat.succ n)))} (LIC : PureU1.Even.LineInCubicPerm S.toLinSols) : PureU1.VectorLikeEven S.val"}
{"name":"PureU1.Even.lineInCubicPerm_last_perm","declaration":"theorem PureU1.Even.lineInCubicPerm_last_perm {n : ℕ} {S : ACCSystemLinear.LinSols (PureU1 (2 * Nat.succ (Nat.succ n))).toACCSystemLinear} (LIC : PureU1.Even.LineInCubicPerm S) : PureU1.LineInPlaneCond S"}
{"name":"PureU1.Even.LineInCubicPerm","declaration":"/-- A `LinSol` satisfies `LineInCubicPerm` if all its permutations satisfy `lineInCubic`. -/\ndef PureU1.Even.LineInCubicPerm {n : ℕ} (S : ACCSystemLinear.LinSols (PureU1 (2 * Nat.succ n)).toACCSystemLinear) : Prop"}
{"name":"PureU1.Even.P_P_P!_accCube'","declaration":"theorem PureU1.Even.P_P_P!_accCube' {n : ℕ} {S : ACCSystemLinear.LinSols (PureU1 (2 * Nat.succ (Nat.succ n))).toACCSystemLinear} (f : Fin (Nat.succ (Nat.succ n)) → ℚ) (g : Fin (Nat.succ n) → ℚ) (hS : S.val = PureU1.VectorLikeEvenPlane.Pa f g) : ((PureU1.accCubeTriLinSymm (PureU1.VectorLikeEvenPlane.P f)) (PureU1.VectorLikeEvenPlane.P f))\n    (PureU1.VectorLikeEvenPlane.basis!AsCharges (Fin.last n)) =\n  -(S.val (PureU1.VectorLikeEvenPlane.δ!₂ (Fin.last n)) + S.val (PureU1.VectorLikeEvenPlane.δ!₁ (Fin.last n))) *\n    (2 * S.val PureU1.VectorLikeEvenPlane.δ!₄ + S.val (PureU1.VectorLikeEvenPlane.δ!₂ (Fin.last n)) +\n      S.val (PureU1.VectorLikeEvenPlane.δ!₁ (Fin.last n)))"}
{"name":"PureU1.Even.lineInCubic_expand","declaration":"theorem PureU1.Even.lineInCubic_expand {n : ℕ} {S : ACCSystemLinear.LinSols (PureU1 (2 * Nat.succ n)).toACCSystemLinear} (h : PureU1.Even.LineInCubic S) (g : Fin (Nat.succ n) → ℚ) (f : Fin n → ℚ) : S.val = PureU1.VectorLikeEvenPlane.Pa g f →\n  ∀ (a b : ℚ),\n    3 * a * b *\n        (a *\n            ((PureU1.accCubeTriLinSymm (PureU1.VectorLikeEvenPlane.P g)) (PureU1.VectorLikeEvenPlane.P g))\n              (PureU1.VectorLikeEvenPlane.P! f) +\n          b *\n            ((PureU1.accCubeTriLinSymm (PureU1.VectorLikeEvenPlane.P! f)) (PureU1.VectorLikeEvenPlane.P! f))\n              (PureU1.VectorLikeEvenPlane.P g)) =\n      0"}
