{"name":"PureU1.Even.generic_case","declaration":"theorem PureU1.Even.generic_case {n : ℕ} {S : ACCSystem.Sols (PureU1 (2 * Nat.succ n))} (h : PureU1.Even.GenericCase S) : ∃ g f a, S = PureU1.Even.parameterization g f a"}
{"name":"PureU1.Even.parameterization","declaration":"/-- The construction of a `Sol` from a `Fin n.succ → ℚ`, a `Fin n → ℚ` and a `ℚ`. -/\ndef PureU1.Even.parameterization {n : ℕ} (g : Fin (Nat.succ n) → ℚ) (f : Fin n → ℚ) (a : ℚ) : ACCSystem.Sols (PureU1 (2 * Nat.succ n))"}
{"name":"PureU1.Even.parameterizationCharge_cube","declaration":"theorem PureU1.Even.parameterizationCharge_cube {n : ℕ} (g : Fin (Nat.succ n) → ℚ) (f : Fin n → ℚ) (a : ℚ) : (PureU1.accCube (2 * Nat.succ n)) (PureU1.Even.parameterizationAsLinear g f a).val = 0"}
{"name":"PureU1.Even.anomalyFree_param","declaration":"theorem PureU1.Even.anomalyFree_param {n : ℕ} {S : ACCSystem.Sols (PureU1 (2 * Nat.succ n))} (g : Fin (Nat.succ n) → ℚ) (f : Fin n → ℚ) (hS : S.val = PureU1.VectorLikeEvenPlane.P g + PureU1.VectorLikeEvenPlane.P! f) : ((PureU1.accCubeTriLinSymm (PureU1.VectorLikeEvenPlane.P g)) (PureU1.VectorLikeEvenPlane.P g))\n    (PureU1.VectorLikeEvenPlane.P! f) =\n  -((PureU1.accCubeTriLinSymm (PureU1.VectorLikeEvenPlane.P! f)) (PureU1.VectorLikeEvenPlane.P! f))\n      (PureU1.VectorLikeEvenPlane.P g)"}
{"name":"PureU1.Even.specialCase_exists","declaration":"theorem PureU1.Even.specialCase_exists {n : ℕ} (S : ACCSystem.Sols (PureU1 (2 * Nat.succ n))) (hs : ∃ g f,\n  S.val = PureU1.VectorLikeEvenPlane.P g + PureU1.VectorLikeEvenPlane.P! f ∧\n    ((PureU1.accCubeTriLinSymm (PureU1.VectorLikeEvenPlane.P g)) (PureU1.VectorLikeEvenPlane.P g))\n        (PureU1.VectorLikeEvenPlane.P! f) =\n      0) : PureU1.Even.SpecialCase S"}
{"name":"PureU1.Even.parameterizationAsLinear_val","declaration":"theorem PureU1.Even.parameterizationAsLinear_val {n : ℕ} (g : Fin (Nat.succ n) → ℚ) (f : Fin n → ℚ) (a : ℚ) : (PureU1.Even.parameterizationAsLinear g f a).val =\n  a •\n    (((PureU1.accCubeTriLinSymm (PureU1.VectorLikeEvenPlane.P! f)) (PureU1.VectorLikeEvenPlane.P! f))\n          (PureU1.VectorLikeEvenPlane.P g) •\n        PureU1.VectorLikeEvenPlane.P g +\n      -((PureU1.accCubeTriLinSymm (PureU1.VectorLikeEvenPlane.P g)) (PureU1.VectorLikeEvenPlane.P g))\n            (PureU1.VectorLikeEvenPlane.P! f) •\n        PureU1.VectorLikeEvenPlane.P! f)"}
{"name":"PureU1.Even.special_case_lineInCubic","declaration":"theorem PureU1.Even.special_case_lineInCubic {n : ℕ} {S : ACCSystem.Sols (PureU1 (2 * Nat.succ n))} (h : PureU1.Even.SpecialCase S) : PureU1.Even.LineInCubic S.toLinSols"}
{"name":"PureU1.Even.GenericCase","declaration":"/-- A proposition on a solution which is true if `accCubeTriLinSymm (P g, P g, P! f) ≠ 0`.\nIn this case our parameterization above will be able to recover this point. -/\ndef PureU1.Even.GenericCase {n : ℕ} (S : ACCSystem.Sols (PureU1 (2 * Nat.succ n))) : Prop"}
{"name":"PureU1.Even.special_case_lineInCubic_perm","declaration":"theorem PureU1.Even.special_case_lineInCubic_perm {n : ℕ} {S : ACCSystem.Sols (PureU1 (2 * Nat.succ n))} (h : ∀ (M : (PureU1.FamilyPermutations (2 * Nat.succ n)).group),\n  PureU1.Even.SpecialCase\n    ((MulAction.toFun (PureU1.FamilyPermutations (2 * Nat.succ n)).group (ACCSystem.Sols (PureU1 (2 * Nat.succ n)))) S\n      M)) : PureU1.Even.LineInCubicPerm S.toLinSols"}
{"name":"PureU1.Even.parameterizationAsLinear","declaration":"/-- Given coefficients `g` of a point in `P` and `f` of a point in `P!`, and a rational, we get a\nrational `a ∈ ℚ`, we get a\npoint in `(PureU1 (2 * n.succ)).AnomalyFreeLinear`, which we will later show extends to an anomaly\nfree point. -/\ndef PureU1.Even.parameterizationAsLinear {n : ℕ} (g : Fin (Nat.succ n) → ℚ) (f : Fin n → ℚ) (a : ℚ) : ACCSystemLinear.LinSols (PureU1 (2 * Nat.succ n)).toACCSystemLinear"}
{"name":"PureU1.Even.SpecialCase","declaration":"/-- A proposition on a solution which is true if `accCubeTriLinSymm (P g, P g, P! f) = 0`. -/\ndef PureU1.Even.SpecialCase {n : ℕ} (S : ACCSystem.Sols (PureU1 (2 * Nat.succ n))) : Prop"}
{"name":"PureU1.Even.generic_or_special","declaration":"theorem PureU1.Even.generic_or_special {n : ℕ} (S : ACCSystem.Sols (PureU1 (2 * Nat.succ n))) : PureU1.Even.GenericCase S ∨ PureU1.Even.SpecialCase S"}
{"name":"PureU1.Even.special_case","declaration":"theorem PureU1.Even.special_case {n : ℕ} {S : ACCSystem.Sols (PureU1 (2 * Nat.succ (Nat.succ n)))} (h : ∀ (M : (PureU1.FamilyPermutations (2 * Nat.succ (Nat.succ n))).group),\n  PureU1.Even.SpecialCase\n    ((MulAction.toFun (PureU1.FamilyPermutations (2 * Nat.succ (Nat.succ n))).group\n        (ACCSystem.Sols (PureU1 (2 * Nat.succ (Nat.succ n)))))\n      S M)) : ∃ M,\n  ((MulAction.toFun (PureU1.FamilyPermutations (2 * Nat.succ (Nat.succ n))).group\n          (ACCSystem.Sols (PureU1 (2 * Nat.succ (Nat.succ n)))))\n        S M).toLinSols ∈\n    Submodule.span ℚ (Set.range PureU1.VectorLikeEvenPlane.basis)"}
{"name":"PureU1.Even.genericCase_exists","declaration":"theorem PureU1.Even.genericCase_exists {n : ℕ} (S : ACCSystem.Sols (PureU1 (2 * Nat.succ n))) (hs : ∃ g f,\n  S.val = PureU1.VectorLikeEvenPlane.P g + PureU1.VectorLikeEvenPlane.P! f ∧\n    ((PureU1.accCubeTriLinSymm (PureU1.VectorLikeEvenPlane.P g)) (PureU1.VectorLikeEvenPlane.P g))\n        (PureU1.VectorLikeEvenPlane.P! f) ≠\n      0) : PureU1.Even.GenericCase S"}
