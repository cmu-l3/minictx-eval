{"name":"IndexNotation.instDecidableEqIndexRep","declaration":"instance IndexNotation.instDecidableEqIndexRep (X : Type) [IndexNotation X] : DecidableEq (IndexNotation.IndexRep X)"}
{"name":"IndexNotation.charList","declaration":"/-- The list of characters describing the index notation e.g.\n`{'ᵘ', 'ᵤ'}` for real tensors. -/\ndef IndexNotation.charList (X : Type) [self : IndexNotation X] : Finset Char"}
{"name":"IndexNotation.IndexRep.ofCharList","declaration":"/-- Creats an index from a non-empty list of characters satisfying `listCharIndex`. -/\ndef IndexNotation.IndexRep.ofCharList {X : Type} [IndexNotation X] (l : List Char) (h : IndexNotation.listCharIndex X l ∧ l ≠ []) : IndexNotation.IndexRep X"}
{"name":"IndexNotation.IsIndexId","declaration":"/-- Given a character `f` which is a notation character, this is true if `c`\nis a subscript when `f` is a subscript or `c` is a superscript when `f` is a\nsuperscript. -/\ndef IndexNotation.IsIndexId (f : Char) (c : Char) : Bool"}
{"name":"IndexNotation.IndexRep.tailNat","declaration":"/-- The natural numbers assocaited with an index. -/\ndef IndexNotation.IndexRep.tailNat {X : Type} [IndexNotation X] (s : IndexNotation.IndexRep X) : List ℕ"}
{"name":"IndexNotation.IndexRep.tail","declaration":"/-- The numerical characters associated with an index. -/\ndef IndexNotation.IndexRep.tail {X : Type} [IndexNotation X] (s : IndexNotation.IndexRep X) : List Char"}
{"name":"IndexNotation.isNotationChar","declaration":"/-- A character is a `notation character` if it is in `charList`. -/\ndef IndexNotation.isNotationChar (X : Type) [IndexNotation X] (c : Char) : Bool"}
{"name":"IndexNotation.IndexRep.toColor","declaration":"/-- The color associated to an index. -/\ndef IndexNotation.IndexRep.toColor {X : Type} [IndexNotation X] (s : IndexNotation.IndexRep X) : X"}
{"name":"IndexNotation.Index.id","declaration":"/-- The natural number representating the id of an index. -/\ndef IndexNotation.Index.id {X : Type} (I : IndexNotation.Index X) : ℕ"}
{"name":"IndexNotation.Index.eq_iff_color_eq_and_id_eq","declaration":"theorem IndexNotation.Index.eq_iff_color_eq_and_id_eq {X : Type} (I : IndexNotation.Index X) (J : IndexNotation.Index X) : I = J ↔\n  IndexNotation.Index.toColor I = IndexNotation.Index.toColor J ∧ IndexNotation.Index.id I = IndexNotation.Index.id J"}
{"name":"IndexNotation.Index.toColor","declaration":"/-- The color associated to an index. -/\ndef IndexNotation.Index.toColor {X : Type} (I : IndexNotation.Index X) : X"}
{"name":"IndexNotation.instDecidableListCharIndexTail","declaration":"instance IndexNotation.instDecidableListCharIndexTail {f : Char} {l : List Char} : Decidable (IndexNotation.listCharIndexTail f l)"}
{"name":"IndexNotation.instDecidableListCharIndex","declaration":"instance IndexNotation.instDecidableListCharIndex (X : Type) [IndexNotation X] {l : List Char} : Decidable (IndexNotation.listCharIndex X l)"}
{"name":"IndexNotation.listCharIndex","declaration":"/-- The proposition for a list of characters to be the characters of an index\ne.g. `['ᵘ', '¹', '⁷', ...]` -/\ndef IndexNotation.listCharIndex (X : Type) [IndexNotation X] (l : List Char) : Prop"}
{"name":"IndexNotation","declaration":"/-- The class defining index notation on a type `X`.\nNormally `X` will be taken as the type of colors of a `TensorStructure`. -/\nclass IndexNotation (X : Type) : Type"}
{"name":"IndexNotation.IndexRep.head","declaration":"/-- Gets the first character in an index e.g. `ᵘ` as an element of `charList X`. -/\ndef IndexNotation.IndexRep.head {X : Type} [IndexNotation X] (s : IndexNotation.IndexRep X) : { x // x ∈ IndexNotation.charList X }"}
{"name":"IndexNotation.isNumericSupscript","declaration":"/-- A character is a numeric superscript if it is e.g. `⁰`, `¹`, etc. -/\ndef IndexNotation.isNumericSupscript (c : Char) : Bool"}
{"name":"IndexNotation.listCharIndexTail","declaration":"/-- The proposition for a list of characters to be the tail of an index\ne.g. `['¹', '⁷', ...]` -/\ndef IndexNotation.listCharIndexTail (f : Char) (l : List Char) : Prop"}
{"name":"instDecidableDite","declaration":"instance instDecidableDite {c : Prop} {t : c → Prop} {e : ¬c → Prop} [dC : Decidable c] [dT : (h : c) → Decidable (t h)] [dE : (h : ¬c) → Decidable (e h)] : Decidable (if h : c then t h else e h)"}
{"name":"IndexNotation.IndexRep.toIndex","declaration":"/-- The index associated with a `IndexRep`. -/\ndef IndexNotation.IndexRep.toIndex {X : Type} [IndexNotation X] (s : IndexNotation.IndexRep X) : IndexNotation.Index X"}
{"name":"IndexNotation.listCharIndex_iff","declaration":"/-- An auxillary rewrite lemma to prove that `listCharIndex` is decidable. -/\ntheorem IndexNotation.listCharIndex_iff (X : Type) [IndexNotation X] (l : List Char) : IndexNotation.listCharIndex X l ↔\n  if h : l = [] then True\n  else\n    let sfst := List.head l h;\n    if ¬IndexNotation.isNotationChar X sfst = true then False else IndexNotation.listCharIndexTail sfst (List.tail l)"}
{"name":"IndexNotation.Index","declaration":"/-- An index for `X` is an pair of an element of `X` (the color of the index) and a natural\nnumber (the id of the index). -/\ndef IndexNotation.Index (X : Type) : Type"}
{"name":"IndexNotation.instDecidableEqIndex","declaration":"instance IndexNotation.instDecidableEqIndex (X : Type) [DecidableEq X] : DecidableEq (IndexNotation.Index X)"}
{"name":"IndexNotation.notaEquiv","declaration":"/-- An equivalence between `X` (colors of indices) and `charList`.\nThis takes every color of index to its notation character. -/\ndef IndexNotation.notaEquiv {X : Type} [self : IndexNotation X] : X ≃ { x // x ∈ IndexNotation.charList X }"}
{"name":"IndexNotation.IndexRep.charToNat","declaration":"/-- A map from super and subscript numerical characters to the natural numbers,\nreturning `0` on all other characters. -/\ndef IndexNotation.IndexRep.charToNat (c : Char) : ℕ"}
{"name":"IndexNotation.nota","declaration":"/-- The map taking a color to its notation character. -/\ndef IndexNotation.nota {X : Type} [IndexNotation X] (x : X) : Char"}
{"name":"IndexNotation.IndexRep","declaration":"/-- An index rep is a non-empty string satisfying the condtion `listCharIndex`,\ne.g. `ᵘ¹²` or `ᵤ₄₃` etc. -/\ndef IndexNotation.IndexRep (X : Type) [IndexNotation X] : Type"}
{"name":"IndexNotation.mk","declaration":"ctor IndexNotation.mk {X : Type} (charList : Finset Char) (notaEquiv : X ≃ { x // x ∈ charList }) : IndexNotation X"}
{"name":"IndexNotation.IndexRep.instToStringIndexRep","declaration":"instance IndexNotation.IndexRep.instToStringIndexRep {X : Type} [IndexNotation X] : ToString (IndexNotation.IndexRep X)"}
{"name":"IndexNotation.IndexRep.id","declaration":"/-- The id of an index, as a natural number. -/\ndef IndexNotation.IndexRep.id {X : Type} [IndexNotation X] (s : IndexNotation.IndexRep X) : ℕ"}
